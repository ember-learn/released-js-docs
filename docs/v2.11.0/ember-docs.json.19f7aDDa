{
    "project": {
        "name": "The Ember API",
        "description": "The Ember API: a framework for building ambitious web applications",
        "url": "http://emberjs.com/",
        "version": "v2.11.0"
    },
    "files": {
        "packages/container/lib/container.js": {
            "name": "packages/container/lib/container.js",
            "modules": {},
            "classes": {
                "Container": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "packages/container/lib/registry.js": {
            "name": "packages/container/lib/registry.js",
            "modules": {},
            "classes": {
                "Registry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-application/lib/system/application-instance.js": {
            "name": "packages/ember-application/lib/system/application-instance.js",
            "modules": {
                "ember-application": 1
            },
            "classes": {
                "Ember.ApplicationInstance": 1,
                "Ember.ApplicationInstance.BootOptions": 1
            },
            "fors": {},
            "namespaces": {
                "Ember.ApplicationInstance": 1
            }
        },
        "packages/ember-application/lib/system/application.js": {
            "name": "packages/ember-application/lib/system/application.js",
            "modules": {},
            "classes": {
                "Ember.Application": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-application/lib/system/engine-instance.js": {
            "name": "packages/ember-application/lib/system/engine-instance.js",
            "modules": {},
            "classes": {
                "Ember.EngineInstance": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-application/lib/system/engine-parent.js": {
            "name": "packages/ember-application/lib/system/engine-parent.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-application/lib/system/engine.js": {
            "name": "packages/ember-application/lib/system/engine.js",
            "modules": {},
            "classes": {
                "Ember.Engine": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-application/lib/system/resolver.js": {
            "name": "packages/ember-application/lib/system/resolver.js",
            "modules": {},
            "classes": {
                "Ember.DefaultResolver": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-application/lib/utils/validate-type.js": {
            "name": "packages/ember-application/lib/utils/validate-type.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-application/lib/index.js": {
            "name": "packages/ember-application/lib/index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-debug/lib/deprecate.js": {
            "name": "packages/ember-debug/lib/deprecate.js",
            "modules": {
                "ember-debug": 1
            },
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-debug/lib/index.js": {
            "name": "packages/ember-debug/lib/index.js",
            "modules": {},
            "classes": {
                "Ember.Debug": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-debug/lib/warn.js": {
            "name": "packages/ember-debug/lib/warn.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-extension-support/lib/container_debug_adapter.js": {
            "name": "packages/ember-extension-support/lib/container_debug_adapter.js",
            "modules": {
                "ember-extension-support": 1
            },
            "classes": {
                "Ember.ContainerDebugAdapter": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-extension-support/lib/data_adapter.js": {
            "name": "packages/ember-extension-support/lib/data_adapter.js",
            "modules": {},
            "classes": {
                "Ember.DataAdapter": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-extension-support/lib/index.js": {
            "name": "packages/ember-extension-support/lib/index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-glimmer/lib/components/checkbox.js": {
            "name": "packages/ember-glimmer/lib/components/checkbox.js",
            "modules": {
                "ember-views": 1
            },
            "classes": {
                "Ember.Checkbox": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-glimmer/lib/components/link-to.js": {
            "name": "packages/ember-glimmer/lib/components/link-to.js",
            "modules": {
                "ember-glimmer": 1
            },
            "classes": {
                "Ember.LinkComponent": 1
            },
            "fors": {
                "Ember.Templates.helpers": 1
            },
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-glimmer/lib/components/text_area.js": {
            "name": "packages/ember-glimmer/lib/components/text_area.js",
            "modules": {},
            "classes": {
                "Ember.TextArea": 1
            },
            "fors": {
                "Ember.Templates.helpers": 1
            },
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-glimmer/lib/components/text_field.js": {
            "name": "packages/ember-glimmer/lib/components/text_field.js",
            "modules": {},
            "classes": {
                "Ember.TextField": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-glimmer/lib/helpers/action.js": {
            "name": "packages/ember-glimmer/lib/helpers/action.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Templates.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-glimmer/lib/helpers/component.js": {
            "name": "packages/ember-glimmer/lib/helpers/component.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Templates.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-glimmer/lib/helpers/concat.js": {
            "name": "packages/ember-glimmer/lib/helpers/concat.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Templates.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-glimmer/lib/helpers/debugger.js": {
            "name": "packages/ember-glimmer/lib/helpers/debugger.js",
            "modules": {
                "ember-htmlbars": 1
            },
            "classes": {},
            "fors": {
                "Ember.Templates.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-glimmer/lib/helpers/each-in.js": {
            "name": "packages/ember-glimmer/lib/helpers/each-in.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Templates.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-glimmer/lib/helpers/get.js": {
            "name": "packages/ember-glimmer/lib/helpers/get.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Templates.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-glimmer/lib/helpers/hash.js": {
            "name": "packages/ember-glimmer/lib/helpers/hash.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Templates.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-glimmer/lib/helpers/if-unless.js": {
            "name": "packages/ember-glimmer/lib/helpers/if-unless.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Templates.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-glimmer/lib/helpers/loc.js": {
            "name": "packages/ember-glimmer/lib/helpers/loc.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Templates.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-glimmer/lib/helpers/log.js": {
            "name": "packages/ember-glimmer/lib/helpers/log.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Templates.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-glimmer/lib/helpers/mut.js": {
            "name": "packages/ember-glimmer/lib/helpers/mut.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Templates.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-glimmer/lib/helpers/query-param.js": {
            "name": "packages/ember-glimmer/lib/helpers/query-param.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Templates.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-glimmer/lib/helpers/readonly.js": {
            "name": "packages/ember-glimmer/lib/helpers/readonly.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Templates.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-glimmer/lib/helpers/unbound.js": {
            "name": "packages/ember-glimmer/lib/helpers/unbound.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Templates.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-glimmer/lib/syntax/input.js": {
            "name": "packages/ember-glimmer/lib/syntax/input.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Templates.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-glimmer/lib/syntax/mount.js": {
            "name": "packages/ember-glimmer/lib/syntax/mount.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Templates.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-glimmer/lib/syntax/outlet.js": {
            "name": "packages/ember-glimmer/lib/syntax/outlet.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Templates.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-glimmer/lib/syntax/render.js": {
            "name": "packages/ember-glimmer/lib/syntax/render.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Templates.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-glimmer/lib/utils/string.js": {
            "name": "packages/ember-glimmer/lib/utils/string.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.String": 1
            },
            "namespaces": {}
        },
        "packages/ember-glimmer/lib/views/outlet.js": {
            "name": "packages/ember-glimmer/lib/views/outlet.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-glimmer/lib/component.js": {
            "name": "packages/ember-glimmer/lib/component.js",
            "modules": {},
            "classes": {
                "Ember.Component": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-glimmer/lib/helper.js": {
            "name": "packages/ember-glimmer/lib/helper.js",
            "modules": {},
            "classes": {
                "Ember.Helper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-glimmer/lib/index.js": {
            "name": "packages/ember-glimmer/lib/index.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Templates.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-glimmer/lib/make-bound-helper.js": {
            "name": "packages/ember-glimmer/lib/make-bound-helper.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.HTMLBars": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/binding.js": {
            "name": "packages/ember-metal/lib/binding.js",
            "modules": {},
            "classes": {
                "Ember.Binding": 1
            },
            "fors": {
                "Ember": 1
            },
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-metal/lib/computed.js": {
            "name": "packages/ember-metal/lib/computed.js",
            "modules": {},
            "classes": {
                "Ember.ComputedProperty": 1,
                "Ember.computed": 1
            },
            "fors": {
                "Ember": 1
            },
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-metal/lib/core.js": {
            "name": "packages/ember-metal/lib/core.js",
            "modules": {},
            "classes": {
                "Ember": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-metal/lib/dependent_keys.js": {
            "name": "packages/ember-metal/lib/dependent_keys.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-metal/lib/deprecate_property.js": {
            "name": "packages/ember-metal/lib/deprecate_property.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-metal/lib/descriptor.js": {
            "name": "packages/ember-metal/lib/descriptor.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-metal/lib/error.js": {
            "name": "packages/ember-metal/lib/error.js",
            "modules": {},
            "classes": {
                "Ember.Error": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-metal/lib/events.js": {
            "name": "packages/ember-metal/lib/events.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/expand_properties.js": {
            "name": "packages/ember-metal/lib/expand_properties.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/features.js": {
            "name": "packages/ember-metal/lib/features.js",
            "modules": {},
            "classes": {
                "Ember.FEATURES": 1
            },
            "fors": {
                "Ember.FEATURES": 1
            },
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-metal/lib/get_properties.js": {
            "name": "packages/ember-metal/lib/get_properties.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/index.js": {
            "name": "packages/ember-metal/lib/index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-metal/lib/injected_property.js": {
            "name": "packages/ember-metal/lib/injected_property.js",
            "modules": {},
            "classes": {
                "Ember.InjectedProperty": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-metal/lib/instrumentation.js": {
            "name": "packages/ember-metal/lib/instrumentation.js",
            "modules": {},
            "classes": {
                "Ember.Instrumentation": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1,
                "Ember.Instrumentation": 1
            }
        },
        "packages/ember-metal/lib/is_blank.js": {
            "name": "packages/ember-metal/lib/is_blank.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/is_empty.js": {
            "name": "packages/ember-metal/lib/is_empty.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/is_none.js": {
            "name": "packages/ember-metal/lib/is_none.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/is_present.js": {
            "name": "packages/ember-metal/lib/is_present.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/libraries.js": {
            "name": "packages/ember-metal/lib/libraries.js",
            "modules": {},
            "classes": {
                "Libraries": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-metal/lib/map.js": {
            "name": "packages/ember-metal/lib/map.js",
            "modules": {},
            "classes": {
                "Ember.OrderedSet": 1,
                "Ember.Map": 1,
                "Ember.MapWithDefault": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-metal/lib/merge.js": {
            "name": "packages/ember-metal/lib/merge.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/meta.js": {
            "name": "packages/ember-metal/lib/meta.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/mixin.js": {
            "name": "packages/ember-metal/lib/mixin.js",
            "modules": {},
            "classes": {
                "Ember.Mixin": 1
            },
            "fors": {
                "Ember": 1
            },
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-metal/lib/observer.js": {
            "name": "packages/ember-metal/lib/observer.js",
            "modules": {
                "ember-metal": 1
            },
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/properties.js": {
            "name": "packages/ember-metal/lib/properties.js",
            "modules": {},
            "classes": {
                "Descriptor": 1
            },
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/property_events.js": {
            "name": "packages/ember-metal/lib/property_events.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/property_get.js": {
            "name": "packages/ember-metal/lib/property_get.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/property_set.js": {
            "name": "packages/ember-metal/lib/property_set.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/run_loop.js": {
            "name": "packages/ember-metal/lib/run_loop.js",
            "modules": {},
            "classes": {
                "Ember.run": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-metal/lib/set_properties.js": {
            "name": "packages/ember-metal/lib/set_properties.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-metal/lib/watching.js": {
            "name": "packages/ember-metal/lib/watching.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-routing/lib/ext/controller.js": {
            "name": "packages/ember-routing/lib/ext/controller.js",
            "modules": {
                "ember-routing": 1
            },
            "classes": {},
            "fors": {
                "Ember.ControllerMixin": 1
            },
            "namespaces": {}
        },
        "packages/ember-routing/lib/ext/run_loop.js": {
            "name": "packages/ember-routing/lib/ext/run_loop.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-routing/lib/location/api.js": {
            "name": "packages/ember-routing/lib/location/api.js",
            "modules": {},
            "classes": {
                "Ember.Location": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-routing/lib/location/auto_location.js": {
            "name": "packages/ember-routing/lib/location/auto_location.js",
            "modules": {},
            "classes": {
                "Ember.AutoLocation": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-routing/lib/location/hash_location.js": {
            "name": "packages/ember-routing/lib/location/hash_location.js",
            "modules": {},
            "classes": {
                "Ember.HashLocation": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-routing/lib/location/history_location.js": {
            "name": "packages/ember-routing/lib/location/history_location.js",
            "modules": {},
            "classes": {
                "Ember.HistoryLocation": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-routing/lib/location/none_location.js": {
            "name": "packages/ember-routing/lib/location/none_location.js",
            "modules": {},
            "classes": {
                "Ember.NoneLocation": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-routing/lib/location/util.js": {
            "name": "packages/ember-routing/lib/location/util.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-routing/lib/services/routing.js": {
            "name": "packages/ember-routing/lib/services/routing.js",
            "modules": {},
            "classes": {
                "RoutingService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-routing/lib/system/cache.js": {
            "name": "packages/ember-routing/lib/system/cache.js",
            "modules": {},
            "classes": {
                "BucketCache": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-routing/lib/system/controller_for.js": {
            "name": "packages/ember-routing/lib/system/controller_for.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-routing/lib/system/dsl.js": {
            "name": "packages/ember-routing/lib/system/dsl.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-routing/lib/system/generate_controller.js": {
            "name": "packages/ember-routing/lib/system/generate_controller.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-routing/lib/system/route.js": {
            "name": "packages/ember-routing/lib/system/route.js",
            "modules": {},
            "classes": {
                "Ember.Route": 1
            },
            "fors": {
                "Ember.Route": 1
            },
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-routing/lib/system/router.js": {
            "name": "packages/ember-routing/lib/system/router.js",
            "modules": {},
            "classes": {
                "Ember.Router": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-routing/lib/index.js": {
            "name": "packages/ember-routing/lib/index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-runtime/lib/computed/computed_macros.js": {
            "name": "packages/ember-runtime/lib/computed/computed_macros.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.computed": 1
            },
            "namespaces": {}
        },
        "packages/ember-runtime/lib/computed/reduce_computed_macros.js": {
            "name": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
            "modules": {
                "ember-runtime": 1
            },
            "classes": {},
            "fors": {
                "Ember.computed": 1
            },
            "namespaces": {}
        },
        "packages/ember-runtime/lib/controllers/controller.js": {
            "name": "packages/ember-runtime/lib/controllers/controller.js",
            "modules": {},
            "classes": {
                "Ember.Controller": 1
            },
            "fors": {
                "Ember.inject": 1
            },
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/ext/function.js": {
            "name": "packages/ember-runtime/lib/ext/function.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Function": 1
            },
            "namespaces": {}
        },
        "packages/ember-runtime/lib/ext/string.js": {
            "name": "packages/ember-runtime/lib/ext/string.js",
            "modules": {},
            "classes": {},
            "fors": {
                "String": 1
            },
            "namespaces": {}
        },
        "packages/ember-runtime/lib/mixins/-proxy.js": {
            "name": "packages/ember-runtime/lib/mixins/-proxy.js",
            "modules": {},
            "classes": {
                "Ember.ProxyMixin": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/mixins/action_handler.js": {
            "name": "packages/ember-runtime/lib/mixins/action_handler.js",
            "modules": {},
            "classes": {
                "Ember.ActionHandler": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/mixins/array.js": {
            "name": "packages/ember-runtime/lib/mixins/array.js",
            "modules": {},
            "classes": {
                "Ember.Array": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/mixins/comparable.js": {
            "name": "packages/ember-runtime/lib/mixins/comparable.js",
            "modules": {},
            "classes": {
                "Ember.Comparable": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/mixins/container_proxy.js": {
            "name": "packages/ember-runtime/lib/mixins/container_proxy.js",
            "modules": {},
            "classes": {
                "ContainerProxyMixin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-runtime/lib/mixins/controller.js": {
            "name": "packages/ember-runtime/lib/mixins/controller.js",
            "modules": {},
            "classes": {
                "Ember.ControllerMixin": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/mixins/controller_content_model_alias_deprecation.js": {
            "name": "packages/ember-runtime/lib/mixins/controller_content_model_alias_deprecation.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-runtime/lib/mixins/copyable.js": {
            "name": "packages/ember-runtime/lib/mixins/copyable.js",
            "modules": {},
            "classes": {
                "Ember.Copyable": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/mixins/enumerable.js": {
            "name": "packages/ember-runtime/lib/mixins/enumerable.js",
            "modules": {},
            "classes": {
                "Ember.Enumerable": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/mixins/evented.js": {
            "name": "packages/ember-runtime/lib/mixins/evented.js",
            "modules": {},
            "classes": {
                "Ember.Evented": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/mixins/freezable.js": {
            "name": "packages/ember-runtime/lib/mixins/freezable.js",
            "modules": {},
            "classes": {
                "Ember.Freezable": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/mixins/mutable_array.js": {
            "name": "packages/ember-runtime/lib/mixins/mutable_array.js",
            "modules": {},
            "classes": {
                "Ember.MutableArray": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/mixins/mutable_enumerable.js": {
            "name": "packages/ember-runtime/lib/mixins/mutable_enumerable.js",
            "modules": {},
            "classes": {
                "Ember.MutableEnumerable": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/mixins/observable.js": {
            "name": "packages/ember-runtime/lib/mixins/observable.js",
            "modules": {},
            "classes": {
                "Ember.Observable": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/mixins/promise_proxy.js": {
            "name": "packages/ember-runtime/lib/mixins/promise_proxy.js",
            "modules": {},
            "classes": {
                "Ember.PromiseProxyMixin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-runtime/lib/mixins/registry_proxy.js": {
            "name": "packages/ember-runtime/lib/mixins/registry_proxy.js",
            "modules": {},
            "classes": {
                "RegistryProxyMixin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-runtime/lib/mixins/target_action_support.js": {
            "name": "packages/ember-runtime/lib/mixins/target_action_support.js",
            "modules": {},
            "classes": {
                "Ember.TargetActionSupport": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/system/array_proxy.js": {
            "name": "packages/ember-runtime/lib/system/array_proxy.js",
            "modules": {},
            "classes": {
                "Ember.ArrayProxy": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/system/core_object.js": {
            "name": "packages/ember-runtime/lib/system/core_object.js",
            "modules": {},
            "classes": {
                "Ember.CoreObject": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/system/each_proxy.js": {
            "name": "packages/ember-runtime/lib/system/each_proxy.js",
            "modules": {},
            "classes": {
                "Ember.EachProxy": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-runtime/lib/system/lazy_load.js": {
            "name": "packages/ember-runtime/lib/system/lazy_load.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-runtime/lib/system/namespace.js": {
            "name": "packages/ember-runtime/lib/system/namespace.js",
            "modules": {},
            "classes": {
                "Ember.Namespace": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/system/native_array.js": {
            "name": "packages/ember-runtime/lib/system/native_array.js",
            "modules": {},
            "classes": {
                "Ember.NativeArray": 1
            },
            "fors": {
                "Ember": 1
            },
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/system/object.js": {
            "name": "packages/ember-runtime/lib/system/object.js",
            "modules": {},
            "classes": {
                "Ember.Object": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/system/object_proxy.js": {
            "name": "packages/ember-runtime/lib/system/object_proxy.js",
            "modules": {},
            "classes": {
                "Ember.ObjectProxy": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/system/service.js": {
            "name": "packages/ember-runtime/lib/system/service.js",
            "modules": {},
            "classes": {
                "Ember.Service": 1
            },
            "fors": {
                "Ember.inject": 1
            },
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/system/string.js": {
            "name": "packages/ember-runtime/lib/system/string.js",
            "modules": {},
            "classes": {
                "Ember.String": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/compare.js": {
            "name": "packages/ember-runtime/lib/compare.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-runtime/lib/copy.js": {
            "name": "packages/ember-runtime/lib/copy.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-runtime/lib/index.js": {
            "name": "packages/ember-runtime/lib/index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-runtime/lib/inject.js": {
            "name": "packages/ember-runtime/lib/inject.js",
            "modules": {},
            "classes": {
                "Ember.inject": 1
            },
            "fors": {
                "Ember": 1
            },
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/is-equal.js": {
            "name": "packages/ember-runtime/lib/is-equal.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-runtime/lib/utils.js": {
            "name": "packages/ember-runtime/lib/utils.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-testing/lib/adapters/adapter.js": {
            "name": "packages/ember-testing/lib/adapters/adapter.js",
            "modules": {
                "ember-testing": 1
            },
            "classes": {
                "Ember.Test.Adapter": 1
            },
            "fors": {},
            "namespaces": {
                "Ember.Test": 1
            }
        },
        "packages/ember-testing/lib/adapters/qunit.js": {
            "name": "packages/ember-testing/lib/adapters/qunit.js",
            "modules": {},
            "classes": {
                "Ember.Test.QUnitAdapter": 1
            },
            "fors": {},
            "namespaces": {
                "Ember.Test": 1
            }
        },
        "packages/ember-testing/lib/ext/application.js": {
            "name": "packages/ember-testing/lib/ext/application.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-testing/lib/helpers/and_then.js": {
            "name": "packages/ember-testing/lib/helpers/and_then.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-testing/lib/helpers/click.js": {
            "name": "packages/ember-testing/lib/helpers/click.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-testing/lib/helpers/current_path.js": {
            "name": "packages/ember-testing/lib/helpers/current_path.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-testing/lib/helpers/current_route_name.js": {
            "name": "packages/ember-testing/lib/helpers/current_route_name.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-testing/lib/helpers/current_url.js": {
            "name": "packages/ember-testing/lib/helpers/current_url.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-testing/lib/helpers/fill_in.js": {
            "name": "packages/ember-testing/lib/helpers/fill_in.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-testing/lib/helpers/find.js": {
            "name": "packages/ember-testing/lib/helpers/find.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-testing/lib/helpers/find_with_assert.js": {
            "name": "packages/ember-testing/lib/helpers/find_with_assert.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-testing/lib/helpers/key_event.js": {
            "name": "packages/ember-testing/lib/helpers/key_event.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-testing/lib/helpers/pause_test.js": {
            "name": "packages/ember-testing/lib/helpers/pause_test.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-testing/lib/helpers/trigger_event.js": {
            "name": "packages/ember-testing/lib/helpers/trigger_event.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-testing/lib/helpers/visit.js": {
            "name": "packages/ember-testing/lib/helpers/visit.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-testing/lib/helpers/wait.js": {
            "name": "packages/ember-testing/lib/helpers/wait.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-testing/lib/test/helpers.js": {
            "name": "packages/ember-testing/lib/test/helpers.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Test": 1
            },
            "namespaces": {}
        },
        "packages/ember-testing/lib/test/on_inject_helpers.js": {
            "name": "packages/ember-testing/lib/test/on_inject_helpers.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Test": 1
            },
            "namespaces": {}
        },
        "packages/ember-testing/lib/test/promise.js": {
            "name": "packages/ember-testing/lib/test/promise.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Test": 1
            },
            "namespaces": {}
        },
        "packages/ember-testing/lib/test/waiters.js": {
            "name": "packages/ember-testing/lib/test/waiters.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Test": 1
            },
            "namespaces": {}
        },
        "packages/ember-testing/lib/index.js": {
            "name": "packages/ember-testing/lib/index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-testing/lib/setup_for_testing.js": {
            "name": "packages/ember-testing/lib/setup_for_testing.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-testing/lib/support.js": {
            "name": "packages/ember-testing/lib/support.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-testing/lib/test.js": {
            "name": "packages/ember-testing/lib/test.js",
            "modules": {},
            "classes": {
                "Ember.Test": 1
            },
            "fors": {
                "Ember.Test": 1
            },
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-utils/lib/apply-str.js": {
            "name": "packages/ember-utils/lib/apply-str.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-utils/lib/assign.js": {
            "name": "packages/ember-utils/lib/assign.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-utils/lib/guid.js": {
            "name": "packages/ember-utils/lib/guid.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-utils/lib/inspect.js": {
            "name": "packages/ember-utils/lib/inspect.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-utils/lib/intern.js": {
            "name": "packages/ember-utils/lib/intern.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-utils/lib/invoke.js": {
            "name": "packages/ember-utils/lib/invoke.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-utils/lib/make-array.js": {
            "name": "packages/ember-utils/lib/make-array.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-utils/lib/owner.js": {
            "name": "packages/ember-utils/lib/owner.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-utils/lib/super.js": {
            "name": "packages/ember-utils/lib/super.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-views/lib/mixins/action_support.js": {
            "name": "packages/ember-views/lib/mixins/action_support.js",
            "modules": {},
            "classes": {
                "Ember.ActionSupport": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-views/lib/mixins/child_views_support.js": {
            "name": "packages/ember-views/lib/mixins/child_views_support.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/mixins/class_names_support.js": {
            "name": "packages/ember-views/lib/mixins/class_names_support.js",
            "modules": {},
            "classes": {
                "Ember.ClassNamesSupport": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-views/lib/mixins/text_support.js": {
            "name": "packages/ember-views/lib/mixins/text_support.js",
            "modules": {},
            "classes": {
                "Ember.TextSupport": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-views/lib/mixins/view_state_support.js": {
            "name": "packages/ember-views/lib/mixins/view_state_support.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/mixins/view_support.js": {
            "name": "packages/ember-views/lib/mixins/view_support.js",
            "modules": {},
            "classes": {
                "Ember.ViewMixin": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-views/lib/system/action_manager.js": {
            "name": "packages/ember-views/lib/system/action_manager.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/system/event_dispatcher.js": {
            "name": "packages/ember-views/lib/system/event_dispatcher.js",
            "modules": {},
            "classes": {
                "Ember.EventDispatcher": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-views/lib/system/ext.js": {
            "name": "packages/ember-views/lib/system/ext.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/system/utils.js": {
            "name": "packages/ember-views/lib/system/utils.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/views/states/default.js": {
            "name": "packages/ember-views/lib/views/states/default.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/views/states/destroying.js": {
            "name": "packages/ember-views/lib/views/states/destroying.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/views/states/in_dom.js": {
            "name": "packages/ember-views/lib/views/states/in_dom.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/views/states/pre_render.js": {
            "name": "packages/ember-views/lib/views/states/pre_render.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/views/core_view.js": {
            "name": "packages/ember-views/lib/views/core_view.js",
            "modules": {},
            "classes": {
                "Ember.CoreView": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-views/lib/views/view.js": {
            "name": "packages/ember-views/lib/views/view.js",
            "modules": {},
            "classes": {
                "Ember.View": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-views/lib/index.js": {
            "name": "packages/ember-views/lib/index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember/lib/index.js": {
            "name": "packages/ember/lib/index.js",
            "modules": {
                "ember": 1
            },
            "classes": {
                "Backburner": 1
            },
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        }
    },
    "modules": {
        "ember": {
            "name": "ember",
            "submodules": {
                "ember-application": 1,
                "ember-debug": 1,
                "ember-extension-support": 1,
                "ember-views": 1,
                "ember-glimmer": 1,
                "ember-htmlbars": 1,
                "ember-metal": 1,
                "ember-routing": 1,
                "ember-runtime": 1,
                "ember-testing": 1
            },
            "elements": {},
            "classes": {
                "Container": 1,
                "Registry": 1,
                "Ember.ApplicationInstance": 1,
                "Ember.ApplicationInstance.BootOptions": 1,
                "Ember.Application": 1,
                "Ember.EngineInstance": 1,
                "Ember": 1,
                "Ember.Engine": 1,
                "Ember.DefaultResolver": 1,
                "Ember.Debug": 1,
                "Ember.ContainerDebugAdapter": 1,
                "Ember.DataAdapter": 1,
                "Ember.Checkbox": 1,
                "Ember.Templates.helpers": 1,
                "Ember.LinkComponent": 1,
                "Ember.TextArea": 1,
                "Ember.TextField": 1,
                "Ember.String": 1,
                "Ember.Component": 1,
                "Ember.Helper": 1,
                "Ember.HTMLBars": 1,
                "Ember.Binding": 1,
                "Ember.ComputedProperty": 1,
                "Ember.computed": 1,
                "Ember.Error": 1,
                "Ember.FEATURES": 1,
                "Ember.InjectedProperty": 1,
                "Ember.Instrumentation": 1,
                "Libraries": 1,
                "Ember.OrderedSet": 1,
                "Ember.Map": 1,
                "Ember.MapWithDefault": 1,
                "Ember.Mixin": 1,
                "Ember.ControllerMixin": 1,
                "Ember.Location": 1,
                "Ember.AutoLocation": 1,
                "Ember.HashLocation": 1,
                "Ember.HistoryLocation": 1,
                "Ember.NoneLocation": 1,
                "RoutingService": 1,
                "BucketCache": 1,
                "Ember.Route": 1,
                "Ember.Router": 1,
                "Ember.Controller": 1,
                "Ember.inject": 1,
                "Function": 1,
                "String": 1,
                "Ember.ProxyMixin": 1,
                "Ember.ActionHandler": 1,
                "Ember.Array": 1,
                "Ember.Comparable": 1,
                "ContainerProxyMixin": 1,
                "Ember.Copyable": 1,
                "Ember.Enumerable": 1,
                "Ember.Evented": 1,
                "Ember.Freezable": 1,
                "Ember.MutableArray": 1,
                "Ember.MutableEnumerable": 1,
                "Ember.Observable": 1,
                "Ember.PromiseProxyMixin": 1,
                "RegistryProxyMixin": 1,
                "Ember.TargetActionSupport": 1,
                "Ember.ArrayProxy": 1,
                "Ember.CoreObject": 1,
                "Ember.EachProxy": 1,
                "Ember.Namespace": 1,
                "Ember.NativeArray": 1,
                "Ember.Object": 1,
                "Ember.ObjectProxy": 1,
                "Ember.Service": 1,
                "Ember.Test.Adapter": 1,
                "Ember.Test.QUnitAdapter": 1,
                "Ember.Test": 1,
                "Ember.ActionSupport": 1,
                "Ember.ClassNamesSupport": 1,
                "Ember.TextSupport": 1,
                "Ember.ViewMixin": 1,
                "Ember.EventDispatcher": 1,
                "Ember.CoreView": 1,
                "Ember.View": 1,
                "Backburner": 1
            },
            "fors": {
                "Ember": 1,
                "Ember.Templates.helpers": 1,
                "Ember.String": 1,
                "Ember.HTMLBars": 1,
                "Ember.FEATURES": 1,
                "Ember.ControllerMixin": 1,
                "Ember.Route": 1,
                "Ember.computed": 1,
                "Ember.inject": 1,
                "Function": 1,
                "String": 1,
                "Ember.Test": 1
            },
            "namespaces": {
                "Ember.ApplicationInstance": 1,
                "Ember": 1,
                "Ember.Instrumentation": 1,
                "Ember.Test": 1
            },
            "tag": "module",
            "file": "packages/ember/lib/index.js",
            "line": 232
        },
        "ember-application": {
            "name": "ember-application",
            "submodules": {},
            "elements": {},
            "classes": {
                "Ember.ApplicationInstance": 1,
                "Ember.ApplicationInstance.BootOptions": 1,
                "Ember.Application": 1,
                "Ember.EngineInstance": 1,
                "Ember.Engine": 1,
                "Ember.DefaultResolver": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "Ember.ApplicationInstance": 1,
                "Ember": 1
            },
            "module": "ember",
            "namespace": "",
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 33,
            "description": "The `ApplicationInstance` encapsulates all of the stateful aspects of a\nrunning `Application`.\n\nAt a high-level, we break application boot into two distinct phases:\n\n* Definition time, where all of the classes, templates, and other\n  dependencies are loaded (typically in the browser).\n* Run time, where we begin executing the application once everything\n  has loaded.\n\nDefinition time can be expensive and only needs to happen once since it is\nan idempotent operation. For example, between test runs and FastBoot\nrequests, the application stays the same. It is only the state that we want\nto reset.\n\nThat state is what the `ApplicationInstance` manages: it is responsible for\ncreating the container that contains all application state, and disposing of\nit once the particular test run or FastBoot request has finished."
        },
        "ember-debug": {
            "name": "ember-debug",
            "submodules": {},
            "elements": {},
            "classes": {
                "Ember.Debug": 1
            },
            "fors": {
                "Ember": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "ember",
            "namespace": "",
            "file": "packages/ember-debug/lib/index.js",
            "line": 223
        },
        "ember-extension-support": {
            "name": "ember-extension-support",
            "submodules": {},
            "elements": {},
            "classes": {
                "Ember.ContainerDebugAdapter": 1,
                "Ember.DataAdapter": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "Ember": 1
            },
            "module": "ember",
            "namespace": "",
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 19,
            "description": "The `ContainerDebugAdapter` helps the container and resolver interface\nwith tools that debug Ember such as the\n[Ember Extension](https://github.com/tildeio/ember-extension)\nfor Chrome and Firefox.\n\nThis class can be extended by a custom resolver implementer\nto override some of the methods with library-specific code.\n\nThe methods likely to be overridden are:\n\n* `canCatalogEntriesByType`\n* `catalogEntriesByType`\n\nThe adapter will need to be registered\nin the application's container as `container-debug-adapter:main`.\n\nExample:\n\n```javascript\nApplication.initializer({\n  name: \"containerDebugAdapter\",\n\n  initialize(application) {\n    application.register('container-debug-adapter:main', require('app/container-debug-adapter'));\n  }\n});\n```"
        },
        "ember-views": {
            "name": "ember-views",
            "submodules": {},
            "elements": {},
            "classes": {
                "Ember.Checkbox": 1,
                "Ember.TextField": 1,
                "Ember.ActionSupport": 1,
                "Ember.ClassNamesSupport": 1,
                "Ember.TextSupport": 1,
                "Ember.EventDispatcher": 1,
                "Ember.View": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "Ember": 1
            },
            "module": "ember",
            "namespace": "",
            "file": "packages/ember-views/lib/views/view.js",
            "line": 6,
            "description": "The internal class used to create text inputs when the `{{input}}`\nhelper is used with `type` of `checkbox`.\n\nSee [Ember.Templates.helpers.input](/api/classes/Ember.Templates.helpers.html#method_input)  for usage details.\n\n## Direct manipulation of `checked`\n\nThe `checked` attribute of an `Ember.Checkbox` object should always be set\nthrough the Ember object or by interacting with its rendered element\nrepresentation via the mouse, keyboard, or touch. Updating the value of the\ncheckbox via jQuery will result in the checked value of the object and its\nelement losing synchronization.\n\n## Layout and LayoutName properties\n\nBecause HTML `input` elements are self closing `layout` and `layoutName`\nproperties will not be applied. See [Ember.View](/api/classes/Ember.View.html)'s\nlayout section for more information."
        },
        "ember-glimmer": {
            "name": "ember-glimmer",
            "submodules": {},
            "elements": {},
            "classes": {
                "Ember.Templates.helpers": 1,
                "Ember.LinkComponent": 1,
                "Ember.TextArea": 1,
                "Ember.Component": 1,
                "Ember.Helper": 1,
                "Ember.HTMLBars": 1
            },
            "fors": {
                "Ember.Templates.helpers": 1,
                "Ember.String": 1,
                "Ember.HTMLBars": 1
            },
            "is_submodule": 1,
            "namespaces": {
                "Ember": 1
            },
            "module": "ember",
            "namespace": "",
            "file": "packages/ember-glimmer/lib/helper.js",
            "line": 12,
            "description": "[Glimmer](https://github.com/tildeio/glimmer) is a [Handlebars](http://handlebarsjs.com/)\ncompatible templating engine used by Ember.js.\nAny valid Handlebars syntax is valid in an Ember template.\n\n### Showing a property\n\nTemplates manage the flow of an application's UI, and display state (through\nthe DOM) to a user. For example, given a component with the property \"name\",\nthat component's template can use the name in several ways:\n\n```javascript\n  // app/components/person.js\n  export default Ember.Component.extend({\n    name: 'Jill'\n  });\n```\n\n```handlebars\n{{! app/components/person.hbs }}\n{{name}}\n<div>{{name}}</div>\n<span data-name={{name}}></span>\n```\n\nAny time the \"name\" property on the component changes, the DOM will be\nupdated.\n\nProperties can be chained as well:\n\n```handlebars\n{{aUserModel.name}}\n<div>{{listOfUsers.firstObject.name}}</div>\n```\n\n### Using Ember helpers\n\nWhen content is passed in mustaches `{{}}`, Ember will first try to find a helper\nor component with that name. For example, the `if` helper:\n\n```handlebars\n{{if name \"I have a name\" \"I have no name\"}}\n<span data-has-name={{if name true}}></span>\n```\n\nThe returned value is placed where the `{{}}` is called. The above style is\ncalled \"inline\". A second style of helper usage is called \"block\". For example:\n\n```handlebars\n{{#if name}}\nI have a name\n{{else}}\nI have no name\n{{/if}}\n```\n\nThe block form of helpers allows you to control how the UI is created based\non the values of properties.\nA third form of helper is called \"nested\". For example here the concat\nhelper will add \" Doe\" to a displayed name if the person has no last name:\n\n```handlebars\n<span data-name={{concat firstName (\nif lastName (concat \" \" lastName) \"Doe\"\n)}}></span>\n```\n\nEmber's built-in helpers are described under the [Ember.Templates.helpers](/api/classes/Ember.Templates.helpers.html)\nnamespace. Documentation on creating custom helpers can be found under\n[Ember.Helper](/api/classes/Ember.Helper.html).\n\n### Invoking a Component\n\nEmber components represent state to the UI of an application. Further\nreading on components can be found under [Ember.Component](/api/classes/Ember.Component.html).",
            "tag": "main",
            "itemtype": "main",
            "access": "public",
            "tagname": ""
        },
        "ember-htmlbars": {
            "name": "ember-htmlbars",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "Ember.Templates.helpers": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "ember",
            "namespace": "",
            "file": "packages/ember-glimmer/lib/helpers/debugger.js",
            "line": 3
        },
        "ember-metal": {
            "name": "ember-metal",
            "submodules": {},
            "elements": {},
            "classes": {
                "Ember": 1,
                "Ember.Binding": 1,
                "Ember.ComputedProperty": 1,
                "Ember.computed": 1,
                "Descriptor": 1,
                "Ember.OrderedSet": 1,
                "Ember.Map": 1,
                "Ember.MapWithDefault": 1,
                "Ember.Mixin": 1,
                "Ember.run": 1
            },
            "fors": {
                "Ember": 1,
                "Ember.computed": 1
            },
            "is_submodule": 1,
            "namespaces": {
                "Ember": 1
            },
            "module": "ember",
            "namespace": "",
            "file": "packages/ember-metal/lib/run_loop.js",
            "line": 48,
            "tag": "module",
            "description": "This namespace contains all Ember methods and functions. Future versions of\nEmber may overwrite this namespace and therefore, you should avoid adding any\nnew properties.\n\nAt the heart of Ember is Ember-Runtime, a set of core functions that provide\ncross-platform compatibility and object property observing.  Ember-Runtime is\nsmall and performance-focused so you can use it alongside other\ncross-platform libraries such as jQuery. For more details, see\n[Ember-Runtime](http://emberjs.com/api/modules/ember-runtime.html)."
        },
        "ember-routing": {
            "name": "ember-routing",
            "submodules": {},
            "elements": {},
            "classes": {
                "Ember.ControllerMixin": 1,
                "Ember.Location": 1,
                "Ember.AutoLocation": 1,
                "Ember.HashLocation": 1,
                "Ember.HistoryLocation": 1,
                "Ember.NoneLocation": 1,
                "RoutingService": 1,
                "Ember.Route": 1,
                "Ember.Router": 1
            },
            "fors": {
                "Ember.ControllerMixin": 1,
                "Ember": 1,
                "Ember.Route": 1
            },
            "is_submodule": 1,
            "namespaces": {
                "Ember": 1
            },
            "module": "ember",
            "namespace": "",
            "file": "packages/ember-routing/lib/system/router.js",
            "line": 51,
            "description": "Ember.Location returns an instance of the correct implementation of\nthe `location` API.\n\n## Implementations\n\nYou can pass an implementation name (`hash`, `history`, `none`) to force a\nparticular implementation to be used in your application.\n\n### HashLocation\n\nUsing `HashLocation` results in URLs with a `#` (hash sign) separating the\nserver side URL portion of the URL from the portion that is used by Ember.\nThis relies upon the `hashchange` event existing in the browser.\n\nExample:\n\n```javascript\nApp.Router.map(function() {\n  this.route('posts', function() {\n    this.route('new');\n  });\n});\n\nApp.Router.reopen({\n  location: 'hash'\n});\n```\n\nThis will result in a posts.new url of `/#/posts/new`.\n\n### HistoryLocation\n\nUsing `HistoryLocation` results in URLs that are indistinguishable from a\nstandard URL. This relies upon the browser's `history` API.\n\nExample:\n\n```javascript\nApp.Router.map(function() {\n  this.route('posts', function() {\n    this.route('new');\n  });\n});\n\nApp.Router.reopen({\n  location: 'history'\n});\n```\n\nThis will result in a posts.new url of `/posts/new`.\n\nKeep in mind that your server must serve the Ember app at all the routes you\ndefine.\n\n### AutoLocation\n\nUsing `AutoLocation`, the router will use the best Location class supported by\nthe browser it is running in.\n\nBrowsers that support the `history` API will use `HistoryLocation`, those that\ndo not, but still support the `hashchange` event will use `HashLocation`, and\nin the rare case neither is supported will use `NoneLocation`.\n\nExample:\n\n```javascript\nApp.Router.map(function() {\n  this.route('posts', function() {\n    this.route('new');\n  });\n});\n\nApp.Router.reopen({\n  location: 'auto'\n});\n```\n\nThis will result in a posts.new url of `/posts/new` for modern browsers that\nsupport the `history` api or `/#/posts/new` for older ones, like Internet\nExplorer 9 and below.\n\nWhen a user visits a link to your application, they will be automatically\nupgraded or downgraded to the appropriate `Location` class, with the URL\ntransformed accordingly, if needed.\n\nKeep in mind that since some of your users will use `HistoryLocation`, your\nserver must serve the Ember app at all the routes you define.\n\n### NoneLocation\n\nUsing `NoneLocation` causes Ember to not store the applications URL state\nin the actual URL. This is generally used for testing purposes, and is one\nof the changes made when calling `App.setupForTesting()`.\n\n## Location API\n\nEach location implementation must provide the following methods:\n\n* implementation: returns the string name used to reference the implementation.\n* getURL: returns the current URL.\n* setURL(path): sets the current URL.\n* replaceURL(path): replace the current URL (optional).\n* onUpdateURL(callback): triggers the callback when the URL changes.\n* formatURL(url): formats `url` to be placed into `href` attribute.\n* detect() (optional): instructs the location to do any feature detection\n    necessary. If the location needs to redirect to a different URL, it\n    can cancel routing by setting the `cancelRouterSetup` property on itself\n    to `false`.\n\nCalling setURL or replaceURL will not trigger onUpdateURL callbacks.\n\n## Custom implementation\n\nEmber scans `app/locations/*` for extending the Location API.\n\nExample:\n\n```javascript\nimport Ember from 'ember';\n\nexport default Ember.HistoryLocation.extend({\n  implementation: 'history-url-logging',\n\n  pushState: function (path) {\n    console.log(path);\n    this._super.apply(this, arguments);\n  }\n});\n```"
        },
        "ember-runtime": {
            "name": "ember-runtime",
            "submodules": {},
            "elements": {},
            "classes": {
                "Ember.String": 1,
                "Ember.Controller": 1,
                "Ember.inject": 1,
                "Function": 1,
                "String": 1,
                "Ember.ProxyMixin": 1,
                "Ember.ActionHandler": 1,
                "Ember.Array": 1,
                "Ember.Comparable": 1,
                "ContainerProxyMixin": 1,
                "Ember.Copyable": 1,
                "Ember.Enumerable": 1,
                "Ember.Evented": 1,
                "Ember.Freezable": 1,
                "Ember.MutableArray": 1,
                "Ember.MutableEnumerable": 1,
                "Ember.Observable": 1,
                "Ember.PromiseProxyMixin": 1,
                "RegistryProxyMixin": 1,
                "Ember.TargetActionSupport": 1,
                "Ember.ArrayProxy": 1,
                "Ember.CoreObject": 1,
                "Ember.Namespace": 1,
                "Ember.NativeArray": 1,
                "Ember.Object": 1
            },
            "fors": {
                "Ember.computed": 1,
                "Ember.inject": 1,
                "Function": 1,
                "String": 1,
                "Ember": 1
            },
            "is_submodule": 1,
            "namespaces": {
                "Ember": 1
            },
            "module": "ember",
            "namespace": "",
            "file": "packages/ember-runtime/lib/system/object.js",
            "line": 11,
            "description": "Defines string helper methods including string formatting and localization.\nUnless `EmberENV.EXTEND_PROTOTYPES.String` is `false` these methods will also be\nadded to the `String.prototype` as well."
        },
        "ember-testing": {
            "name": "ember-testing",
            "submodules": {},
            "elements": {},
            "classes": {
                "Ember.Test.Adapter": 1,
                "Ember.Test": 1
            },
            "fors": {
                "Ember.Test": 1
            },
            "is_submodule": 1,
            "namespaces": {
                "Ember.Test": 1,
                "Ember": 1
            },
            "module": "ember",
            "namespace": "",
            "file": "packages/ember-testing/lib/test.js",
            "line": 29,
            "description": "The primary purpose of this class is to create hooks that can be implemented\nby an adapter for various test frameworks."
        }
    },
    "classes": {
        "Container": {
            "name": "Container",
            "shortname": "Container",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "file": "packages/container/lib/container.js",
            "line": 7,
            "description": "A container used to instantiate and cache objects.\n\nEvery `Container` must be associated with a `Registry`, which is referenced\nto determine the factory and options that should be used to instantiate\nobjects.\n\nThe public API for `Container` is still in flux and should not be considered\nstable.",
            "access": "private",
            "tagname": ""
        },
        "Registry": {
            "name": "Registry",
            "shortname": "Registry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "file": "packages/container/lib/registry.js",
            "line": 7,
            "description": "A registry used to store factory and option information keyed\nby type.\n\nA `Registry` stores the factory and option information needed by a\n`Container` to instantiate and cache objects.\n\nThe API for `Registry` is still in flux and should not be considered stable.",
            "access": "private",
            "tagname": "",
            "since": "1.11.0"
        },
        "Ember.ApplicationInstance": {
            "name": "Ember.ApplicationInstance",
            "shortname": "Ember.ApplicationInstance",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "",
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 18,
            "description": "The `ApplicationInstance` encapsulates all of the stateful aspects of a\nrunning `Application`.\n\nAt a high-level, we break application boot into two distinct phases:\n\n* Definition time, where all of the classes, templates, and other\n  dependencies are loaded (typically in the browser).\n* Run time, where we begin executing the application once everything\n  has loaded.\n\nDefinition time can be expensive and only needs to happen once since it is\nan idempotent operation. For example, between test runs and FastBoot\nrequests, the application stays the same. It is only the state that we want\nto reset.\n\nThat state is what the `ApplicationInstance` manages: it is responsible for\ncreating the container that contains all application state, and disposing of\nit once the particular test run or FastBoot request has finished.",
            "access": "public",
            "tagname": "",
            "extends": "Ember.EngineInstance"
        },
        "Ember.ApplicationInstance.BootOptions": {
            "name": "Ember.ApplicationInstance.BootOptions",
            "shortname": "Ember.ApplicationInstance.BootOptions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember.ApplicationInstance",
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 303,
            "description": "A list of boot-time configuration options for customizing the behavior of\nan `Ember.ApplicationInstance`.\n\nThis is an interface class that exists purely to document the available\noptions; you do not need to construct it manually. Simply pass a regular\nJavaScript object containing the desired options into methods that require\none of these options object:\n\n```javascript\nMyApp.visit(\"/\", { location: \"none\", rootElement: \"#container\" });\n```\n\nNot all combinations of the supported options are valid. See the documentation\non `Ember.Application#visit` for the supported configurations.\n\nInternal, experimental or otherwise unstable flags are marked as private.",
            "access": "public",
            "tagname": ""
        },
        "Ember.Application": {
            "name": "Ember.Application",
            "shortname": "Ember.Application",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember",
            "file": "packages/ember-application/lib/system/application.js",
            "line": 40,
            "description": "An instance of `Ember.Application` is the starting point for every Ember\napplication. It helps to instantiate, initialize and coordinate the many\nobjects that make up your app.\n\nEach Ember app has one and only one `Ember.Application` object. In fact, the\nvery first thing you should do in your application is create the instance:\n\n```javascript\nwindow.App = Ember.Application.create();\n```\n\nTypically, the application object is the only global variable. All other\nclasses in your app should be properties on the `Ember.Application` instance,\nwhich highlights its first role: a global namespace.\n\nFor example, if you define a view class, it might look like this:\n\n```javascript\nApp.MyView = Ember.View.extend();\n```\n\nBy default, calling `Ember.Application.create()` will automatically initialize\nyour application by calling the `Ember.Application.initialize()` method. If\nyou need to delay initialization, you can call your app's `deferReadiness()`\nmethod. When you are ready for your app to be initialized, call its\n`advanceReadiness()` method.\n\nYou can define a `ready` method on the `Ember.Application` instance, which\nwill be run by Ember when the application is initialized.\n\nBecause `Ember.Application` inherits from `Ember.Namespace`, any classes\nyou create will have useful string representations when calling `toString()`.\nSee the `Ember.Namespace` documentation for more information.\n\nWhile you can think of your `Ember.Application` as a container that holds the\nother classes in your application, there are several other responsibilities\ngoing on under-the-hood that you may want to understand.\n\n### Event Delegation\n\nEmber uses a technique called _event delegation_. This allows the framework\nto set up a global, shared event listener instead of requiring each view to\ndo it manually. For example, instead of each view registering its own\n`mousedown` listener on its associated element, Ember sets up a `mousedown`\nlistener on the `body`.\n\nIf a `mousedown` event occurs, Ember will look at the target of the event and\nstart walking up the DOM node tree, finding corresponding views and invoking\ntheir `mouseDown` method as it goes.\n\n`Ember.Application` has a number of default events that it listens for, as\nwell as a mapping from lowercase events to camel-cased view method names. For\nexample, the `keypress` event causes the `keyPress` method on the view to be\ncalled, the `dblclick` event causes `doubleClick` to be called, and so on.\n\nIf there is a bubbling browser event that Ember does not listen for by\ndefault, you can specify custom events and their corresponding view method\nnames by setting the application's `customEvents` property:\n\n```javascript\nlet App = Ember.Application.create({\n  customEvents: {\n    // add support for the paste event\n    paste: 'paste'\n  }\n});\n```\n\nTo prevent Ember from setting up a listener for a default event,\nspecify the event name with a `null` value in the `customEvents`\nproperty:\n\n```javascript\nlet App = Ember.Application.create({\n  customEvents: {\n    // prevent listeners for mouseenter/mouseleave events\n    mouseenter: null,\n    mouseleave: null\n  }\n});\n```\n\nBy default, the application sets up these event listeners on the document\nbody. However, in cases where you are embedding an Ember application inside\nan existing page, you may want it to set up the listeners on an element\ninside the body.\n\nFor example, if only events inside a DOM element with the ID of `ember-app`\nshould be delegated, set your application's `rootElement` property:\n\n```javascript\nlet App = Ember.Application.create({\n  rootElement: '#ember-app'\n});\n```\n\nThe `rootElement` can be either a DOM element or a jQuery-compatible selector\nstring. Note that *views appended to the DOM outside the root element will\nnot receive events.* If you specify a custom root element, make sure you only\nappend views inside it!\n\nTo learn more about the events Ember components use, see\n[components/handling-events](https://guides.emberjs.com/v2.6.0/components/handling-events/#toc_event-names).\n\n### Initializers\n\nLibraries on top of Ember can add initializers, like so:\n\n```javascript\nEmber.Application.initializer({\n  name: 'api-adapter',\n\n  initialize: function(application) {\n    application.register('api-adapter:main', ApiAdapter);\n  }\n});\n```\n\nInitializers provide an opportunity to access the internal registry, which\norganizes the different components of an Ember application. Additionally\nthey provide a chance to access the instantiated application. Beyond\nbeing used for libraries, initializers are also a great way to organize\ndependency injection or setup in your own application.\n\n### Routing\n\nIn addition to creating your application's router, `Ember.Application` is\nalso responsible for telling the router when to start routing. Transitions\nbetween routes can be logged with the `LOG_TRANSITIONS` flag, and more\ndetailed intra-transition logging can be logged with\nthe `LOG_TRANSITIONS_INTERNAL` flag:\n\n```javascript\nlet App = Ember.Application.create({\n  LOG_TRANSITIONS: true, // basic logging of successful transitions\n  LOG_TRANSITIONS_INTERNAL: true // detailed logging of all routing steps\n});\n```\n\nBy default, the router will begin trying to translate the current URL into\napplication state once the browser emits the `DOMContentReady` event. If you\nneed to defer routing, you can call the application's `deferReadiness()`\nmethod. Once routing can begin, call the `advanceReadiness()` method.\n\nIf there is any setup required before routing begins, you can implement a\n`ready()` method on your app that will be invoked immediately before routing\nbegins.",
            "extends": "Ember.Engine",
            "uses": [
                "RegistryProxyMixin"
            ],
            "access": "public",
            "tagname": ""
        },
        "Ember.EngineInstance": {
            "name": "Ember.EngineInstance",
            "shortname": "Ember.EngineInstance",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "",
            "file": "packages/ember-application/lib/system/engine-instance.js",
            "line": 17,
            "description": "The `EngineInstance` encapsulates all of the stateful aspects of a\nrunning `Engine`.",
            "access": "public",
            "tagname": "",
            "extends": "Ember.Object",
            "uses": [
                "RegistryProxyMixin",
                "ContainerProxyMixin"
            ]
        },
        "Ember": {
            "name": "Ember",
            "shortname": "Ember",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "namespace": "",
            "file": "packages/ember-metal/lib/core.js",
            "line": 8,
            "submodule": "ember-metal",
            "access": "public",
            "tagname": "",
            "description": "This namespace contains all Ember methods and functions. Future versions of\nEmber may overwrite this namespace and therefore, you should avoid adding any\nnew properties.\n\nAt the heart of Ember is Ember-Runtime, a set of core functions that provide\ncross-platform compatibility and object property observing.  Ember-Runtime is\nsmall and performance-focused so you can use it alongside other\ncross-platform libraries such as jQuery. For more details, see\n[Ember-Runtime](http://emberjs.com/api/modules/ember-runtime.html).",
            "static": 1
        },
        "Ember.Engine": {
            "name": "Ember.Engine",
            "shortname": "Ember.Engine",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember",
            "file": "packages/ember-application/lib/system/engine.js",
            "line": 34,
            "description": "The `Engine` class contains core functionality for both applications and\nengines.\n\nEach engine manages a registry that's used for dependency injection and\nexposed through `RegistryProxy`.\n\nEngines also manage initializers and instance initializers.\n\nEngines can spawn `EngineInstance` instances via `buildInstance()`.",
            "extends": "Ember.Namespace",
            "uses": [
                "RegistryProxy"
            ],
            "access": "public",
            "tagname": ""
        },
        "Ember.DefaultResolver": {
            "name": "Ember.DefaultResolver",
            "shortname": "Ember.DefaultResolver",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember",
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 33,
            "description": "The DefaultResolver defines the default lookup rules to resolve\ncontainer lookups before consulting the container for registered\nitems:\n\n* templates are looked up on `Ember.TEMPLATES`\n* other names are looked up on the application after converting\n  the name. For example, `controller:post` looks up\n  `App.PostController` by default.\n* there are some nuances (see examples below)\n\n### How Resolving Works\n\nThe container calls this object's `resolve` method with the\n`fullName` argument.\n\nIt first parses the fullName into an object using `parseName`.\n\nThen it checks for the presence of a type-specific instance\nmethod of the form `resolve[Type]` and calls it if it exists.\nFor example if it was resolving 'template:post', it would call\nthe `resolveTemplate` method.\n\nIts last resort is to call the `resolveOther` method.\n\nThe methods of this object are designed to be easy to override\nin a subclass. For example, you could enhance how a template\nis resolved like so:\n\n```javascript\nApp = Ember.Application.create({\n  Resolver: Ember.DefaultResolver.extend({\n    resolveTemplate: function(parsedName) {\n      let resolvedTemplate = this._super(parsedName);\n      if (resolvedTemplate) { return resolvedTemplate; }\n      return Ember.TEMPLATES['not_found'];\n    }\n  })\n});\n```\n\nSome examples of how names are resolved:\n\n```\n'template:post'           //=> Ember.TEMPLATES['post']\n'template:posts/byline'   //=> Ember.TEMPLATES['posts/byline']\n'template:posts.byline'   //=> Ember.TEMPLATES['posts/byline']\n'template:blogPost'       //=> Ember.TEMPLATES['blogPost']\n                          //   OR\n                          //   Ember.TEMPLATES['blog_post']\n'controller:post'         //=> App.PostController\n'controller:posts.index'  //=> App.PostsIndexController\n'controller:blog/post'    //=> Blog.PostController\n'controller:basic'        //=> Ember.Controller\n'route:post'              //=> App.PostRoute\n'route:posts.index'       //=> App.PostsIndexRoute\n'route:blog/post'         //=> Blog.PostRoute\n'route:basic'             //=> Ember.Route\n'view:post'               //=> App.PostView\n'view:posts.index'        //=> App.PostsIndexView\n'view:blog/post'          //=> Blog.PostView\n'view:basic'              //=> Ember.View\n'foo:post'                //=> App.PostFoo\n'model:post'              //=> App.Post\n```",
            "extends": "Ember.Object",
            "access": "public",
            "tagname": ""
        },
        "Ember.Debug": {
            "name": "Ember.Debug",
            "shortname": "Ember.Debug",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-debug",
            "namespace": "",
            "file": "packages/ember-debug/lib/index.js",
            "line": 223,
            "access": "public",
            "tagname": ""
        },
        "Ember.ContainerDebugAdapter": {
            "name": "Ember.ContainerDebugAdapter",
            "shortname": "Ember.ContainerDebugAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember",
            "file": "packages/ember-extension-support/lib/container_debug_adapter.js",
            "line": 15,
            "description": "The `ContainerDebugAdapter` helps the container and resolver interface\nwith tools that debug Ember such as the\n[Ember Extension](https://github.com/tildeio/ember-extension)\nfor Chrome and Firefox.\n\nThis class can be extended by a custom resolver implementer\nto override some of the methods with library-specific code.\n\nThe methods likely to be overridden are:\n\n* `canCatalogEntriesByType`\n* `catalogEntriesByType`\n\nThe adapter will need to be registered\nin the application's container as `container-debug-adapter:main`.\n\nExample:\n\n```javascript\nApplication.initializer({\n  name: \"containerDebugAdapter\",\n\n  initialize(application) {\n    application.register('container-debug-adapter:main', require('app/container-debug-adapter'));\n  }\n});\n```",
            "extends": "Ember.Object",
            "since": "1.5.0",
            "access": "public",
            "tagname": ""
        },
        "Ember.DataAdapter": {
            "name": "Ember.DataAdapter",
            "shortname": "Ember.DataAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember",
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 19,
            "description": "The `DataAdapter` helps a data persistence library\ninterface with tools that debug Ember such\nas the [Ember Extension](https://github.com/tildeio/ember-extension)\nfor Chrome and Firefox.\n\nThis class will be extended by a persistence library\nwhich will override some of the methods with\nlibrary-specific code.\n\nThe methods likely to be overridden are:\n\n* `getFilters`\n* `detect`\n* `columnsForType`\n* `getRecords`\n* `getRecordColumnValues`\n* `getRecordKeywords`\n* `getRecordFilterValues`\n* `getRecordColor`\n* `observeRecord`\n\nThe adapter will need to be registered\nin the application's container as `dataAdapter:main`.\n\nExample:\n\n```javascript\nApplication.initializer({\n  name: \"data-adapter\",\n\n  initialize: function(application) {\n    application.register('data-adapter:main', DS.DataAdapter);\n  }\n});\n```",
            "extends": "EmberObject",
            "access": "public",
            "tagname": ""
        },
        "Ember.Checkbox": {
            "name": "Ember.Checkbox",
            "shortname": "Ember.Checkbox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember",
            "file": "packages/ember-glimmer/lib/components/checkbox.js",
            "line": 10,
            "description": "The internal class used to create text inputs when the `{{input}}`\nhelper is used with `type` of `checkbox`.\n\nSee [Ember.Templates.helpers.input](/api/classes/Ember.Templates.helpers.html#method_input)  for usage details.\n\n## Direct manipulation of `checked`\n\nThe `checked` attribute of an `Ember.Checkbox` object should always be set\nthrough the Ember object or by interacting with its rendered element\nrepresentation via the mouse, keyboard, or touch. Updating the value of the\ncheckbox via jQuery will result in the checked value of the object and its\nelement losing synchronization.\n\n## Layout and LayoutName properties\n\nBecause HTML `input` elements are self closing `layout` and `layoutName`\nproperties will not be applied. See [Ember.View](/api/classes/Ember.View.html)'s\nlayout section for more information.",
            "extends": "Ember.Component",
            "access": "public",
            "tagname": ""
        },
        "Ember.Templates.helpers": {
            "name": "Ember.Templates.helpers",
            "shortname": "Ember.Templates.helpers",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": ""
        },
        "Ember.LinkComponent": {
            "name": "Ember.LinkComponent",
            "shortname": "Ember.LinkComponent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember",
            "file": "packages/ember-glimmer/lib/components/link-to.js",
            "line": 329,
            "description": "`Ember.LinkComponent` renders an element whose `click` event triggers a\ntransition of the application's instance of `Ember.Router` to\na supplied route by name.\n\n`Ember.LinkComponent` components are invoked with {{#link-to}}. Properties\nof this class can be overridden with `reopen` to customize application-wide\nbehavior.",
            "extends": "Ember.Component",
            "see": [
                "{Ember.Templates.helpers.link-to}"
            ],
            "access": "public",
            "tagname": ""
        },
        "Ember.TextArea": {
            "name": "Ember.TextArea",
            "shortname": "Ember.TextArea",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember",
            "file": "packages/ember-glimmer/lib/components/text_area.js",
            "line": 190,
            "description": "The internal class used to create textarea element when the `{{textarea}}`\nhelper is used.\n\nSee [Ember.Templates.helpers.textarea](/api/classes/Ember.Templates.helpers.html#method_textarea)  for usage details.\n\n## Layout and LayoutName properties\n\nBecause HTML `textarea` elements do not contain inner HTML the `layout` and\n`layoutName` properties will not be applied. See [Ember.View](/api/classes/Ember.View.html)'s\nlayout section for more information.",
            "extends": "Ember.Component",
            "uses": [
                "Ember.TextSupport"
            ],
            "access": "public",
            "tagname": ""
        },
        "Ember.TextField": {
            "name": "Ember.TextField",
            "shortname": "Ember.TextField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember",
            "file": "packages/ember-glimmer/lib/components/text_field.js",
            "line": 38,
            "description": "The internal class used to create text inputs when the `{{input}}`\n  helper is used with `type` of `text`.\nSee [Ember.Templates.helpers.input](/api/classes/Ember.Templates.helpers.html#method_input)  for usage details.\n## Layout and LayoutName properties\nBecause HTML `input` elements are self closing `layout` and `layoutName`\n  properties will not be applied. See [Ember.View](/api/classes/Ember.View.html)'s\n  layout section for more information.",
            "extends": "Ember.Component",
            "uses": [
                "Ember.TextSupport"
            ],
            "access": "public",
            "tagname": ""
        },
        "Ember.String": {
            "name": "Ember.String",
            "shortname": "Ember.String",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/system/string.js",
            "line": 143,
            "description": "Defines string helper methods including string formatting and localization.\nUnless `EmberENV.EXTEND_PROTOTYPES.String` is `false` these methods will also be\nadded to the `String.prototype` as well.",
            "static": 1,
            "access": "public",
            "tagname": ""
        },
        "Ember.Component": {
            "name": "Ember.Component",
            "shortname": "Ember.Component",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember",
            "file": "packages/ember-glimmer/lib/component.js",
            "line": 34,
            "description": "An `Ember.Component` is a view that is completely\nisolated. Properties accessed in its templates go\nto the view object and actions are targeted at\nthe view object. There is no access to the\nsurrounding context or outer controller; all\ncontextual information must be passed in.\n\nThe easiest way to create an `Ember.Component` is via\na template. If you name a template\n`app/components/my-foo.hbs`, you will be able to use\n`{{my-foo}}` in other templates, which will make\nan instance of the isolated component.\n\n```app/components/my-foo.hbs\n{{person-profile person=currentUser}}\n```\n\n```app/components/person-profile.hbs\n<h1>{{person.title}}</h1>\n<img src={{person.avatar}}>\n<p class='signature'>{{person.signature}}</p>\n```\n\nYou can use `yield` inside a template to\ninclude the **contents** of any block attached to\nthe component. The block will be executed in the\ncontext of the surrounding context or outer controller:\n\n```handlebars\n{{#person-profile person=currentUser}}\n  <p>Admin mode</p>\n  {{! Executed in the controller's context. }}\n{{/person-profile}}\n```\n\n```app/components/person-profile.hbs\n<h1>{{person.title}}</h1>\n{{! Executed in the component's context. }}\n{{yield}} {{! block contents }}\n```\n\nIf you want to customize the component, in order to\nhandle events or actions, you implement a subclass\nof `Ember.Component` named after the name of the\ncomponent.\n\nFor example, you could implement the action\n`hello` for the `person-profile` component:\n\n```app/components/person-profile.js\nimport Ember from 'ember';\n\nexport default Ember.Component.extend({\n  actions: {\n    hello(name) {\n      console.log(\"Hello\", name);\n    }\n  }\n});\n```\n\nAnd then use it in the component's template:\n\n```app/templates/components/person-profile.hbs\n<h1>{{person.title}}</h1>\n{{yield}} <!-- block contents -->\n<button {{action 'hello' person.name}}>\n  Say Hello to {{person.name}}\n</button>\n```\n\nComponents must have a `-` in their name to avoid\nconflicts with built-in controls that wrap HTML\nelements. This is consistent with the same\nrequirement in web components.\n\n\n## HTML Tag\n\nThe default HTML tag name used for a component's DOM representation is `div`.\nThis can be customized by setting the `tagName` property.\nThe following component class:\n\n```app/components/emphasized-paragraph.js\nimport Ember from 'ember';\n\nexport default Ember.Component.extend({\n  tagName: 'em'\n});\n```\n\nWould result in instances with the following HTML:\n\n```html\n<em id=\"ember1\" class=\"ember-view\"></em>\n```\n\n\n## HTML `class` Attribute\n\nThe HTML `class` attribute of a component's tag can be set by providing a\n`classNames` property that is set to an array of strings:\n\n```app/components/my-widget.js\nimport Ember from 'ember';\n\nexport default Ember.Component.extend({\n  classNames: ['my-class', 'my-other-class']\n});\n```\n\nWill result in component instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view my-class my-other-class\"></div>\n```\n\n`class` attribute values can also be set by providing a `classNameBindings`\nproperty set to an array of properties names for the component. The return value\nof these properties will be added as part of the value for the components's `class`\nattribute. These properties can be computed properties:\n\n```app/components/my-widget.js\nimport Ember from 'ember';\n\nexport default Ember.Component.extend({\n  classNameBindings: ['propertyA', 'propertyB'],\n  propertyA: 'from-a',\n  propertyB: Ember.computed(function() {\n    if (someLogic) { return 'from-b'; }\n  })\n});\n```\n\nWill result in component instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view from-a from-b\"></div>\n```\n\nIf the value of a class name binding returns a boolean the property name\nitself will be used as the class name if the property is true.\nThe class name will not be added if the value is `false` or `undefined`.\n\n```app/components/my-widget.js\nimport Ember from 'ember';\n\nexport default Ember.Component.extend({\n  classNameBindings: ['hovered'],\n  hovered: true\n});\n```\n\nWill result in component instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view hovered\"></div>\n```\n\nWhen using boolean class name bindings you can supply a string value other\nthan the property name for use as the `class` HTML attribute by appending the\npreferred value after a \":\" character when defining the binding:\n\n```app/components/my-widget.js\nimport Ember from 'ember';\n\nexport default Ember.Component.extend({\n  classNameBindings: ['awesome:so-very-cool'],\n  awesome: true\n});\n```\n\nWill result in component instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view so-very-cool\"></div>\n```\n\nBoolean value class name bindings whose property names are in a\ncamelCase-style format will be converted to a dasherized format:\n\n```app/components/my-widget.js\nimport Ember from 'ember';\n\nexport default Ember.Component.extend({\n  classNameBindings: ['isUrgent'],\n  isUrgent: true\n});\n```\n\nWill result in component instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view is-urgent\"></div>\n```\n\nClass name bindings can also refer to object values that are found by\ntraversing a path relative to the component itself:\n\n```app/components/my-widget.js\nimport Ember from 'ember';\n\nexport default Ember.Component.extend({\n  classNameBindings: ['messages.empty'],\n  messages: Ember.Object.create({\n    empty: true\n  })\n});\n```\n\nWill result in component instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view empty\"></div>\n```\n\nIf you want to add a class name for a property which evaluates to true and\nand a different class name if it evaluates to false, you can pass a binding\nlike this:\n\n```app/components/my-widget.js\nimport Ember from 'ember';\n\nexport default Ember.Component.extend({\n  classNameBindings: ['isEnabled:enabled:disabled'],\n  isEnabled: true\n});\n```\n\nWill result in component instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view enabled\"></div>\n```\n\nWhen isEnabled is `false`, the resulting HTML representation looks like\nthis:\n\n```html\n<div id=\"ember1\" class=\"ember-view disabled\"></div>\n```\n\nThis syntax offers the convenience to add a class if a property is `false`:\n\n```app/components/my-widget.js\nimport Ember from 'ember';\n\n// Applies no class when isEnabled is true and class 'disabled' when isEnabled is false\nexport default Ember.Component.extend({\n  classNameBindings: ['isEnabled::disabled'],\n  isEnabled: true\n});\n```\n\nWill result in component instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view\"></div>\n```\n\nWhen the `isEnabled` property on the component is set to `false`, it will result\nin component instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view disabled\"></div>\n```\n\nUpdates to the value of a class name binding will result in automatic\nupdate of the  HTML `class` attribute in the component's rendered HTML\nrepresentation. If the value becomes `false` or `undefined` the class name\nwill be removed.\nBoth `classNames` and `classNameBindings` are concatenated properties. See\n[Ember.Object](/api/classes/Ember.Object.html) documentation for more\ninformation about concatenated properties.\n\n\n## HTML Attributes\n\nThe HTML attribute section of a component's tag can be set by providing an\n`attributeBindings` property set to an array of property names on the component.\nThe return value of these properties will be used as the value of the component's\nHTML associated attribute:\n\n```app/components/my-anchor.js\nimport Ember from 'ember';\n\nexport default Ember.Component.extend({\n  tagName: 'a',\n  attributeBindings: ['href'],\n  href: 'http://google.com'\n});\n```\n\nWill result in component instances with an HTML representation of:\n\n```html\n<a id=\"ember1\" class=\"ember-view\" href=\"http://google.com\"></a>\n```\n\nOne property can be mapped on to another by placing a \":\" between\nthe source property and the destination property:\n\n```app/components/my-anchor.js\nimport Ember from 'ember';\n\nexport default Ember.Component.extend({\n  tagName: 'a',\n  attributeBindings: ['url:href'],\n  url: 'http://google.com'\n});\n```\n\nWill result in component instances with an HTML representation of:\n\n```html\n<a id=\"ember1\" class=\"ember-view\" href=\"http://google.com\"></a>\n```\n\nNamespaced attributes (e.g. `xlink:href`) are supported, but have to be\nmapped, since `:` is not a valid character for properties in Javascript:\n\n```app/components/my-use.js\nimport Ember from 'ember';\n\nexport default Ember.Component.extend({\n  tagName: 'use',\n  attributeBindings: ['xlinkHref:xlink:href'],\n  xlinkHref: '#triangle'\n});\n```\n\nWill result in component instances with an HTML representation of:\n\n```html\n<use xlink:href=\"#triangle\"></use>\n```\n\nIf the return value of an `attributeBindings` monitored property is a boolean\nthe attribute will be present or absent depending on the value:\n\n```app/components/my-text-input.js\nimport Ember from 'ember';\n\nexport default Ember.Component.extend({\n  tagName: 'input',\n  attributeBindings: ['disabled'],\n  disabled: false\n});\n```\n\nWill result in a component instance with an HTML representation of:\n\n```html\n<input id=\"ember1\" class=\"ember-view\" />\n```\n\n`attributeBindings` can refer to computed properties:\n\n```app/components/my-text-input.js\nimport Ember from 'ember';\n\nexport default Ember.Component.extend({\n  tagName: 'input',\n  attributeBindings: ['disabled'],\n  disabled: Ember.computed(function() {\n    if (someLogic) {\n      return true;\n    } else {\n      return false;\n    }\n  })\n});\n```\n\nTo prevent setting an attribute altogether, use `null` or `undefined` as the\nreturn value of the `attributeBindings` monitored property:\n\n```app/components/my-text-input.js\nimport Ember from 'ember';\n\nexport default Ember.Component.extend({\n  tagName: 'form',\n  attributeBindings: ['novalidate'],\n  novalidate: null\n});\n```\n\nUpdates to the property of an attribute binding will result in automatic\nupdate of the  HTML attribute in the component's rendered HTML representation.\n`attributeBindings` is a concatenated property. See [Ember.Object](/api/classes/Ember.Object.html)\ndocumentation for more information about concatenated properties.\n\n\n## Layouts\n\nSee [Ember.Templates.helpers.yield](/api/classes/Ember.Templates.helpers.html#method_yield)\nfor more information.\n\n\n## Responding to Browser Events\n\nComponents can respond to user-initiated events in one of three ways: method\nimplementation, through an event manager, and through `{{action}}` helper use\nin their template or layout.\n\n\n### Method Implementation\n\nComponents can respond to user-initiated events by implementing a method that\nmatches the event name. A `jQuery.Event` object will be passed as the\nargument to this method.\n\n```app/components/my-widget.js\nimport Ember from 'ember';\n\nexport default Ember.Component.extend({\n  click(event) {\n    // will be called when an instance's\n    // rendered element is clicked\n  }\n});\n```\n\n\n### `{{action}}` Helper\n\nSee [Ember.Templates.helpers.action](/api/classes/Ember.Templates.helpers.html#method_action).\n\n\n### Event Names\n\nAll of the event handling approaches described above respond to the same set\nof events. The names of the built-in events are listed below. (The hash of\nbuilt-in events exists in `Ember.EventDispatcher`.) Additional, custom events\ncan be registered by using `Ember.Application.customEvents`.\n\nTouch events:\n\n* `touchStart`\n* `touchMove`\n* `touchEnd`\n* `touchCancel`\n\nKeyboard events:\n\n* `keyDown`\n* `keyUp`\n* `keyPress`\n\nMouse events:\n\n* `mouseDown`\n* `mouseUp`\n* `contextMenu`\n* `click`\n* `doubleClick`\n* `mouseMove`\n* `focusIn`\n* `focusOut`\n* `mouseEnter`\n* `mouseLeave`\n\nForm events:\n\n* `submit`\n* `change`\n* `focusIn`\n* `focusOut`\n* `input`\n\nHTML5 drag and drop events:\n\n* `dragStart`\n* `drag`\n* `dragEnter`\n* `dragLeave`\n* `dragOver`\n* `dragEnd`\n* `drop`",
            "extends": "Ember.CoreView",
            "uses": [
                "Ember.TargetActionSupport",
                "Ember.ClassNamesSupport",
                "Ember.ActionSupport",
                "Ember.ViewMixin",
                "Ember.ViewStateSupport"
            ],
            "access": "public",
            "tagname": ""
        },
        "Ember.Helper": {
            "name": "Ember.Helper",
            "shortname": "Ember.Helper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "",
            "file": "packages/ember-glimmer/lib/helper.js",
            "line": 12,
            "description": "Ember Helpers are functions that can compute values, and are used in templates.\nFor example, this code calls a helper named `format-currency`:\n\n```handlebars\n<div>{{format-currency cents currency=\"$\"}}</div>\n```\n\nAdditionally a helper can be called as a nested helper (sometimes called a\nsubexpression). In this example, the computed value of a helper is passed\nto a component named `show-money`:\n\n```handlebars\n{{show-money amount=(format-currency cents currency=\"$\")}}\n```\n\nHelpers defined using a class must provide a `compute` function. For example:\n\n```js\nexport default Ember.Helper.extend({\n  compute(params, hash) {\n    let cents = params[0];\n    let currency = hash.currency;\n    return `${currency}${cents * 0.01}`;\n  }\n});\n```\n\nEach time the input to a helper changes, the `compute` function will be\ncalled again.\n\nAs instances, these helpers also have access to the container an will accept\ninjected dependencies.\n\nAdditionally, class helpers can call `recompute` to force a new computation.",
            "access": "public",
            "tagname": "",
            "since": "1.13.0"
        },
        "Ember.HTMLBars": {
            "name": "Ember.HTMLBars",
            "shortname": "Ember.HTMLBars",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": ""
        },
        "Ember.Binding": {
            "name": "Ember.Binding",
            "shortname": "Ember.Binding",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember",
            "file": "packages/ember-metal/lib/binding.js",
            "line": 353,
            "deprecated": true,
            "deprecationMessage": "See http://emberjs.com/deprecations/v2.x#toc_ember-binding",
            "access": "public",
            "tagname": "",
            "description": "An `Ember.Binding` connects the properties of two objects so that whenever\nthe value of one property changes, the other property will be changed also.\n\n## Automatic Creation of Bindings with `/^*Binding/`-named Properties.\n\nYou do not usually create Binding objects directly but instead describe\nbindings in your class or object definition using automatic binding\ndetection.\n\nProperties ending in a `Binding` suffix will be converted to `Ember.Binding`\ninstances. The value of this property should be a string representing a path\nto another object or a custom binding instance created using Binding helpers\n(see \"One Way Bindings\"):\n\n```\nvalueBinding: \"MyApp.someController.title\"\n```\n\nThis will create a binding from `MyApp.someController.title` to the `value`\nproperty of your object instance automatically. Now the two values will be\nkept in sync.\n\n## One Way Bindings\n\nOne especially useful binding customization you can use is the `oneWay()`\nhelper. This helper tells Ember that you are only interested in\nreceiving changes on the object you are binding from. For example, if you\nare binding to a preference and you want to be notified if the preference\nhas changed, but your object will not be changing the preference itself, you\ncould do:\n\n```\nbigTitlesBinding: Ember.Binding.oneWay(\"MyApp.preferencesController.bigTitles\")\n```\n\nThis way if the value of `MyApp.preferencesController.bigTitles` changes the\n`bigTitles` property of your object will change also. However, if you\nchange the value of your `bigTitles` property, it will not update the\n`preferencesController`.\n\nOne way bindings are almost twice as fast to setup and twice as fast to\nexecute because the binding only has to worry about changes to one side.\n\nYou should consider using one way bindings anytime you have an object that\nmay be created frequently and you do not intend to change a property; only\nto monitor it for changes (such as in the example above).\n\n## Adding Bindings Manually\n\nAll of the examples above show you how to configure a custom binding, but the\nresult of these customizations will be a binding template, not a fully active\nBinding instance. The binding will actually become active only when you\ninstantiate the object the binding belongs to. It is useful, however, to\nunderstand what actually happens when the binding is activated.\n\nFor a binding to function it must have at least a `from` property and a `to`\nproperty. The `from` property path points to the object/key that you want to\nbind from while the `to` path points to the object/key you want to bind to.\n\nWhen you define a custom binding, you are usually describing the property\nyou want to bind from (such as `MyApp.someController.value` in the examples\nabove). When your object is created, it will automatically assign the value\nyou want to bind `to` based on the name of your binding key. In the\nexamples above, during init, Ember objects will effectively call\nsomething like this on your binding:\n\n```javascript\nbinding = Ember.Binding.from(\"valueBinding\").to(\"value\");\n```\n\nThis creates a new binding instance based on the template you provide, and\nsets the to path to the `value` property of the new object. Now that the\nbinding is fully configured with a `from` and a `to`, it simply needs to be\nconnected to become active. This is done through the `connect()` method:\n\n```javascript\nbinding.connect(this);\n```\n\nNote that when you connect a binding you pass the object you want it to be\nconnected to. This object will be used as the root for both the from and\nto side of the binding when inspecting relative paths. This allows the\nbinding to be automatically inherited by subclassed objects as well.\n\nThis also allows you to bind between objects using the paths you declare in\n`from` and `to`:\n\n```javascript\n// Example 1\nbinding = Ember.Binding.from(\"App.someObject.value\").to(\"value\");\nbinding.connect(this);\n\n// Example 2\nbinding = Ember.Binding.from(\"parentView.value\").to(\"App.someObject.value\");\nbinding.connect(this);\n```\n\nNow that the binding is connected, it will observe both the from and to side\nand relay changes.\n\nIf you ever needed to do so (you almost never will, but it is useful to\nunderstand this anyway), you could manually create an active binding by\nusing the `Ember.bind()` helper method. (This is the same method used by\nto setup your bindings on objects):\n\n```javascript\nEmber.bind(MyApp.anotherObject, \"value\", \"MyApp.someController.value\");\n```\n\nBoth of these code fragments have the same effect as doing the most friendly\nform of binding creation like so:\n\n```javascript\nMyApp.anotherObject = Ember.Object.create({\n  valueBinding: \"MyApp.someController.value\",\n\n  // OTHER CODE FOR THIS OBJECT...\n});\n```\n\nEmber's built in binding creation method makes it easy to automatically\ncreate bindings for you. You should always use the highest-level APIs\navailable, even if you understand how it works underneath.",
            "since": "Ember 0.9"
        },
        "Ember.ComputedProperty": {
            "name": "Ember.ComputedProperty",
            "shortname": "Ember.ComputedProperty",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember",
            "file": "packages/ember-metal/lib/computed.js",
            "line": 27,
            "description": "A computed property transforms an object literal with object's accessor function(s) into a property.\n\nBy default the function backing the computed property will only be called\nonce and the result will be cached. You can specify various properties\nthat your computed property depends on. This will force the cached\nresult to be recomputed if the dependencies are modified.\n\nIn the following example we declare a computed property - `fullName` - by calling\n`.Ember.computed()` with property dependencies (`firstName` and `lastName`) as leading arguments and getter accessor function. The `fullName` getter function\nwill be called once (regardless of how many times it is accessed) as long\nas its dependencies have not changed. Once `firstName` or `lastName` are updated\nany future calls (or anything bound) to `fullName` will incorporate the new\nvalues.\n\n```javascript\nlet Person = Ember.Object.extend({\n  // these will be supplied by `create`\n  firstName: null,\n  lastName: null,\n\n  fullName: Ember.computed('firstName', 'lastName', function() {\n    let firstName = this.get('firstName'),\n        lastName  = this.get('lastName');\n\n    return firstName + ' ' + lastName;\n  })\n});\n\nlet tom = Person.create({\n  firstName: 'Tom',\n  lastName: 'Dale'\n});\n\ntom.get('fullName') // 'Tom Dale'\n```\n\nYou can also define what Ember should do when setting a computed property by providing additional function (`set`) in hash argument.\nIf you try to set a computed property, it will try to invoke setter accessor function with the key and\nvalue you want to set it to as arguments.\n\n```javascript\nlet Person = Ember.Object.extend({\n  // these will be supplied by `create`\n  firstName: null,\n  lastName: null,\n\n  fullName: Ember.computed('firstName', 'lastName', {\n    get(key) {\n      let firstName = this.get('firstName'),\n          lastName  = this.get('lastName');\n\n      return firstName + ' ' + lastName;\n    },\n    set(key, value) {\n      let [firstName, lastName] = value.split(' ');\n\n      this.set('firstName', firstName);\n      this.set('lastName', lastName);\n\n      return value;\n    }\n  })\n});\n\nlet person = Person.create();\n\nperson.set('fullName', 'Peter Wagenet');\nperson.get('firstName'); // 'Peter'\nperson.get('lastName');  // 'Wagenet'\n```\n\nYou can overwrite computed property with normal property (no longer computed), that won't change if dependencies change, if you set computed property and it won't have setter accessor function defined.\n\nYou can also mark computed property as `.readOnly()` and block all attempts to set it.\n\n```javascript\nlet Person = Ember.Object.extend({\n  // these will be supplied by `create`\n  firstName: null,\n  lastName: null,\n\n  fullName: Ember.computed('firstName', 'lastName', {\n    get(key) {\n      let firstName = this.get('firstName');\n      let lastName  = this.get('lastName');\n\n      return firstName + ' ' + lastName;\n    }\n  }).readOnly()\n});\n\nlet person = Person.create();\nperson.set('fullName', 'Peter Wagenet'); // Uncaught Error: Cannot set read-only property \"fullName\" on object: <(...):emberXXX>\n```\n\nAdditional resources:\n- [New CP syntax RFC](https://github.com/emberjs/rfcs/blob/master/text/0011-improved-cp-syntax.md)\n- [New computed syntax explained in \"Ember 1.12 released\" ](http://emberjs.com/blog/2015/05/13/ember-1-12-released.html#toc_new-computed-syntax)",
            "access": "public",
            "tagname": ""
        },
        "Ember.computed": {
            "name": "Ember.computed",
            "shortname": "Ember.computed",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember",
            "file": "packages/ember-metal/lib/computed.js",
            "line": 450,
            "description": "This helper returns a new property descriptor that wraps the passed\ncomputed property function. You can use this helper to define properties\nwith mixins or via `Ember.defineProperty()`.\n\nIf you pass a function as an argument, it will be used as a getter. A computed\nproperty defined in this way might look like this:\n\n```js\nlet Person = Ember.Object.extend({\n  init() {\n    this._super(...arguments);\n\n    this.firstName = 'Betty';\n    this.lastName = 'Jones';\n  },\n\n  fullName: Ember.computed('firstName', 'lastName', function() {\n    return `${this.get('firstName')} ${this.get('lastName')}`;\n  })\n});\n\nlet client = Person.create();\n\nclient.get('fullName'); // 'Betty Jones'\n\nclient.set('lastName', 'Fuller');\nclient.get('fullName'); // 'Betty Fuller'\n```\n\nYou can pass a hash with two functions, `get` and `set`, as an\nargument to provide both a getter and setter:\n\n```js\nlet Person = Ember.Object.extend({\n  init() {\n    this._super(...arguments);\n\n    this.firstName = 'Betty';\n    this.lastName = 'Jones';\n  },\n\n  fullName: Ember.computed('firstName', 'lastName', {\n    get(key) {\n      return `${this.get('firstName')} ${this.get('lastName')}`;\n    },\n    set(key, value) {\n      let [firstName, lastName] = value.split(/\\s+/);\n      this.setProperties({ firstName, lastName });\n      return value;\n    }\n  });\n})\n\nlet client = Person.create();\nclient.get('firstName'); // 'Betty'\n\nclient.set('fullName', 'Carroll Fuller');\nclient.get('firstName'); // 'Carroll'\n```\n\nThe `set` function should accept two parameters, `key` and `value`. The value\nreturned from `set` will be the new value of the property.\n\n_Note: This is the preferred way to define computed properties when writing third-party\nlibraries that depend on or use Ember, since there is no guarantee that the user\nwill have [prototype Extensions](http://emberjs.com/guides/configuring-ember/disabling-prototype-extensions/) enabled._\n\nThe alternative syntax, with prototype extensions, might look like:\n\n```js\nfullName: function() {\n  return this.get('firstName') + ' ' + this.get('lastName');\n}.property('firstName', 'lastName')\n```",
            "is_constructor": 1,
            "static": 1,
            "params": [
                {
                    "name": "dependentKeys*",
                    "description": "Optional dependent keys that trigger this computed property.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "func",
                    "description": "The computed property function.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "property descriptor instance",
                "type": "Ember.ComputedProperty"
            },
            "access": "public",
            "tagname": ""
        },
        "Descriptor": {
            "name": "Descriptor",
            "shortname": "Descriptor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-metal",
            "namespace": "",
            "file": "packages/ember-metal/lib/properties.js",
            "line": 13,
            "description": "Objects of this type can implement an interface to respond to requests to\nget and set. The default implementation handles simple properties.",
            "access": "private",
            "tagname": ""
        },
        "Ember.Error": {
            "name": "Ember.Error",
            "shortname": "Ember.Error",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "namespace": "Ember",
            "file": "packages/ember-metal/lib/error.js",
            "line": 3,
            "description": "A subclass of the JavaScript Error object for use in Ember.",
            "extends": "Error",
            "is_constructor": 1,
            "access": "public",
            "tagname": ""
        },
        "Ember.FEATURES": {
            "name": "Ember.FEATURES",
            "shortname": "Ember.FEATURES",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "namespace": "Ember",
            "file": "packages/ember-metal/lib/features.js",
            "line": 5,
            "description": "The hash of enabled Canary features. Add to this, any canary features\nbefore creating your application.\n\nAlternatively (and recommended), you can also define `EmberENV.FEATURES`\nif you need to enable features flagged at runtime.",
            "static": 1,
            "since": "1.1.0",
            "access": "public",
            "tagname": ""
        },
        "Ember.InjectedProperty": {
            "name": "Ember.InjectedProperty",
            "shortname": "Ember.InjectedProperty",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "namespace": "Ember",
            "file": "packages/ember-metal/lib/injected_property.js",
            "line": 7,
            "description": "Read-only property that returns the result of a container lookup.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The container type the property will lookup",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "(optional) The name the property will lookup, defaults\n       to the property's name",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": ""
        },
        "Ember.Instrumentation": {
            "name": "Ember.Instrumentation",
            "shortname": "Ember.Instrumentation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "namespace": "Ember.Instrumentation",
            "file": "packages/ember-metal/lib/instrumentation.js",
            "line": 4,
            "description": "The purpose of the Ember Instrumentation module is\nto provide efficient, general-purpose instrumentation\nfor Ember.\n\nSubscribe to a listener by using `Ember.subscribe`:\n\n```javascript\nEmber.subscribe(\"render\", {\n  before(name, timestamp, payload) {\n\n  },\n\n  after(name, timestamp, payload) {\n\n  }\n});\n```\n\nIf you return a value from the `before` callback, that same\nvalue will be passed as a fourth parameter to the `after`\ncallback.\n\nInstrument a block of code by using `Ember.instrument`:\n\n```javascript\nEmber.instrument(\"render.handlebars\", payload, function() {\n  // rendering logic\n}, binding);\n```\n\nEvent names passed to `Ember.instrument` are namespaced\nby periods, from more general to more specific. Subscribers\ncan listen for events by whatever level of granularity they\nare interested in.\n\nIn the above example, the event is `render.handlebars`,\nand the subscriber listened for all events beginning with\n`render`. It would receive callbacks for events named\n`render`, `render.handlebars`, `render.container`, or\neven `render.handlebars.layout`.",
            "static": 1,
            "access": "private",
            "tagname": ""
        },
        "Libraries": {
            "name": "Libraries",
            "shortname": "Libraries",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "namespace": "",
            "file": "packages/ember-metal/lib/libraries.js",
            "line": 4,
            "description": "Helper class that allows you to register your library with Ember.\n\nSingleton created at `Ember.libraries`.",
            "is_constructor": 1,
            "access": "private",
            "tagname": ""
        },
        "Ember.OrderedSet": {
            "name": "Ember.OrderedSet",
            "shortname": "Ember.OrderedSet",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember",
            "file": "packages/ember-metal/lib/map.js",
            "line": 55,
            "description": "This class is used internally by Ember and Ember Data.\nPlease do not use it at this time. We plan to clean it up\nand add many tests soon.",
            "is_constructor": 1,
            "access": "private",
            "tagname": ""
        },
        "Ember.Map": {
            "name": "Ember.Map",
            "shortname": "Ember.Map",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember",
            "file": "packages/ember-metal/lib/map.js",
            "line": 221,
            "description": "A Map stores values indexed by keys. Unlike JavaScript's\ndefault Objects, the keys of a Map can be any JavaScript\nobject.\n\nInternally, a Map has two data structures:\n\n1. `keys`: an OrderedSet of all of the existing keys\n2. `values`: a JavaScript Object indexed by the `Ember.guidFor(key)`\n\nWhen a key/value pair is added for the first time, we\nadd the key to the `keys` OrderedSet, and create or\nreplace an entry in `values`. When an entry is deleted,\nwe delete its entry in `keys` and `values`.",
            "access": "private",
            "tagname": "",
            "is_constructor": 1
        },
        "Ember.MapWithDefault": {
            "name": "Ember.MapWithDefault",
            "shortname": "Ember.MapWithDefault",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember",
            "file": "packages/ember-metal/lib/map.js",
            "line": 411,
            "extends": "Ember.Map",
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "optional": true,
                    "props": [
                        {
                            "name": "defaultValue",
                            "description": "",
                            "type": "*",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Ember.Mixin": {
            "name": "Ember.Mixin",
            "shortname": "Ember.Mixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember",
            "file": "packages/ember-metal/lib/mixin.js",
            "line": 416,
            "description": "The `Ember.Mixin` class allows you to create mixins, whose properties can be\nadded to other classes. For instance,\n\n```javascript\nconst EditableMixin = Ember.Mixin.create({\n  edit() {\n    console.log('starting to edit');\n    this.set('isEditing', true);\n  },\n  isEditing: false\n});\n\n// Mix mixins into classes by passing them as the first arguments to\n// `.extend.`\nconst Comment = Ember.Object.extend(EditableMixin, {\n  post: null\n});\n\nlet comment = Comment.create(post: somePost);\ncomment.edit(); // outputs 'starting to edit'\n```\n\nNote that Mixins are created with `Ember.Mixin.create`, not\n`Ember.Mixin.extend`.\n\nNote that mixins extend a constructor's prototype so arrays and object literals\ndefined as properties will be shared amongst objects that implement the mixin.\nIf you want to define a property in a mixin that is not shared, you can define\nit either as a computed property or have it be created on initialization of the object.\n\n```javascript\n// filters array will be shared amongst any object implementing mixin\nconst FilterableMixin = Ember.Mixin.create({\n  filters: Ember.A()\n});\n\n// filters will be a separate array for every object implementing the mixin\nconst FilterableMixin = Ember.Mixin.create({\n  filters: Ember.computed(function() {\n    return Ember.A();\n  })\n});\n\n// filters will be created as a separate array during the object's initialization\nconst Filterable = Ember.Mixin.create({\n  init() {\n    this._super(...arguments);\n    this.set(\"filters\", Ember.A());\n  }\n});\n```",
            "access": "public",
            "tagname": ""
        },
        "Ember.run": {
            "name": "Ember.run",
            "shortname": "Ember.run",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-metal",
            "namespace": "Ember",
            "file": "packages/ember-metal/lib/run_loop.js",
            "line": 48,
            "description": "Runs the passed target and method inside of a RunLoop, ensuring any\ndeferred actions including bindings and views updates are flushed at the\nend.\n\nNormally you should not need to invoke this method yourself. However if\nyou are implementing raw event handlers when interfacing with other\nlibraries or plugins, you should probably wrap all of your code inside this\ncall.\n\n```javascript\nrun(function() {\n  // code to be executed within a RunLoop\n});\n```",
            "static": 1,
            "is_constructor": 1,
            "params": [
                {
                    "name": "target",
                    "description": "target of method to call",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "method",
                    "description": "Method to invoke.\n  May be a function or a string. If you pass a string\n  then it will be looked up on the passed target.",
                    "type": "Function|String"
                },
                {
                    "name": "args*",
                    "description": "Any additional arguments you wish to pass to the method.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "return value from invoking the passed function.",
                "type": "Object"
            },
            "access": "public",
            "tagname": ""
        },
        "Ember.ControllerMixin": {
            "name": "Ember.ControllerMixin",
            "shortname": "Ember.ControllerMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.Controller"
            ],
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/mixins/controller.js",
            "line": 5,
            "uses": [
                "Ember.ActionHandler"
            ],
            "access": "private",
            "tagname": ""
        },
        "Ember.Location": {
            "name": "Ember.Location",
            "shortname": "Ember.Location",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember",
            "file": "packages/ember-routing/lib/location/api.js",
            "line": 10,
            "description": "Ember.Location returns an instance of the correct implementation of\nthe `location` API.\n\n## Implementations\n\nYou can pass an implementation name (`hash`, `history`, `none`) to force a\nparticular implementation to be used in your application.\n\n### HashLocation\n\nUsing `HashLocation` results in URLs with a `#` (hash sign) separating the\nserver side URL portion of the URL from the portion that is used by Ember.\nThis relies upon the `hashchange` event existing in the browser.\n\nExample:\n\n```javascript\nApp.Router.map(function() {\n  this.route('posts', function() {\n    this.route('new');\n  });\n});\n\nApp.Router.reopen({\n  location: 'hash'\n});\n```\n\nThis will result in a posts.new url of `/#/posts/new`.\n\n### HistoryLocation\n\nUsing `HistoryLocation` results in URLs that are indistinguishable from a\nstandard URL. This relies upon the browser's `history` API.\n\nExample:\n\n```javascript\nApp.Router.map(function() {\n  this.route('posts', function() {\n    this.route('new');\n  });\n});\n\nApp.Router.reopen({\n  location: 'history'\n});\n```\n\nThis will result in a posts.new url of `/posts/new`.\n\nKeep in mind that your server must serve the Ember app at all the routes you\ndefine.\n\n### AutoLocation\n\nUsing `AutoLocation`, the router will use the best Location class supported by\nthe browser it is running in.\n\nBrowsers that support the `history` API will use `HistoryLocation`, those that\ndo not, but still support the `hashchange` event will use `HashLocation`, and\nin the rare case neither is supported will use `NoneLocation`.\n\nExample:\n\n```javascript\nApp.Router.map(function() {\n  this.route('posts', function() {\n    this.route('new');\n  });\n});\n\nApp.Router.reopen({\n  location: 'auto'\n});\n```\n\nThis will result in a posts.new url of `/posts/new` for modern browsers that\nsupport the `history` api or `/#/posts/new` for older ones, like Internet\nExplorer 9 and below.\n\nWhen a user visits a link to your application, they will be automatically\nupgraded or downgraded to the appropriate `Location` class, with the URL\ntransformed accordingly, if needed.\n\nKeep in mind that since some of your users will use `HistoryLocation`, your\nserver must serve the Ember app at all the routes you define.\n\n### NoneLocation\n\nUsing `NoneLocation` causes Ember to not store the applications URL state\nin the actual URL. This is generally used for testing purposes, and is one\nof the changes made when calling `App.setupForTesting()`.\n\n## Location API\n\nEach location implementation must provide the following methods:\n\n* implementation: returns the string name used to reference the implementation.\n* getURL: returns the current URL.\n* setURL(path): sets the current URL.\n* replaceURL(path): replace the current URL (optional).\n* onUpdateURL(callback): triggers the callback when the URL changes.\n* formatURL(url): formats `url` to be placed into `href` attribute.\n* detect() (optional): instructs the location to do any feature detection\n    necessary. If the location needs to redirect to a different URL, it\n    can cancel routing by setting the `cancelRouterSetup` property on itself\n    to `false`.\n\nCalling setURL or replaceURL will not trigger onUpdateURL callbacks.\n\n## Custom implementation\n\nEmber scans `app/locations/*` for extending the Location API.\n\nExample:\n\n```javascript\nimport Ember from 'ember';\n\nexport default Ember.HistoryLocation.extend({\n  implementation: 'history-url-logging',\n\n  pushState: function (path) {\n    console.log(path);\n    this._super.apply(this, arguments);\n  }\n});\n```",
            "static": 1,
            "access": "private",
            "tagname": ""
        },
        "Ember.AutoLocation": {
            "name": "Ember.AutoLocation",
            "shortname": "Ember.AutoLocation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember",
            "file": "packages/ember-routing/lib/location/auto_location.js",
            "line": 22,
            "description": "Ember.AutoLocation will select the best location option based off browser\nsupport with the priority order: history, hash, none.\n\nClean pushState paths accessed by hashchange-only browsers will be redirected\nto the hash-equivalent and vice versa so future transitions are consistent.\n\nKeep in mind that since some of your users will use `HistoryLocation`, your\nserver must serve the Ember app at all the routes you define.",
            "static": 1,
            "access": "private",
            "tagname": ""
        },
        "Ember.HashLocation": {
            "name": "Ember.HashLocation",
            "shortname": "Ember.HashLocation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember",
            "file": "packages/ember-routing/lib/location/hash_location.js",
            "line": 15,
            "description": "`Ember.HashLocation` implements the location API using the browser's\nhash. At present, it relies on a `hashchange` event existing in the\nbrowser.",
            "extends": "Ember.Object",
            "access": "private",
            "tagname": ""
        },
        "Ember.HistoryLocation": {
            "name": "Ember.HistoryLocation",
            "shortname": "Ember.HistoryLocation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember",
            "file": "packages/ember-routing/lib/location/history_location.js",
            "line": 16,
            "description": "Ember.HistoryLocation implements the location API using the browser's\nhistory.pushState API.",
            "extends": "Ember.Object",
            "access": "private",
            "tagname": ""
        },
        "Ember.NoneLocation": {
            "name": "Ember.NoneLocation",
            "shortname": "Ember.NoneLocation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember",
            "file": "packages/ember-routing/lib/location/none_location.js",
            "line": 13,
            "description": "Ember.NoneLocation does not interact with the browser. It is useful for\ntesting, or when you need to manage state with your Router, but temporarily\ndon't want it to muck with the URL (for example when you embed your\napplication in a larger page).",
            "extends": "Ember.Object",
            "access": "private",
            "tagname": ""
        },
        "RoutingService": {
            "name": "RoutingService",
            "shortname": "RoutingService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "",
            "file": "packages/ember-routing/lib/services/routing.js",
            "line": 15,
            "description": "The Routing service is used by LinkComponent, and provides facilities for\nthe component/view layer to interact with the router.\n\nWhile still private, this service can eventually be opened up, and provides\nthe set of API needed for components to control routing without interacting\nwith router internals.",
            "access": "private",
            "tagname": ""
        },
        "BucketCache": {
            "name": "BucketCache",
            "shortname": "BucketCache",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "namespace": "",
            "file": "packages/ember-routing/lib/system/cache.js",
            "line": 4,
            "description": "A two-tiered cache with support for fallback values when doing lookups.\nUses \"buckets\" and then \"keys\" to cache values.",
            "access": "private",
            "tagname": ""
        },
        "Ember.Route": {
            "name": "Ember.Route",
            "shortname": "Ember.Route",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember",
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 72,
            "description": "The `Ember.Route` class is used to define individual routes. Refer to\nthe [routing guide](http://emberjs.com/guides/routing/) for documentation.",
            "extends": "Ember.Object",
            "uses": [
                "Ember.ActionHandler",
                "Ember.Evented"
            ],
            "since": "1.0.0",
            "access": "public",
            "tagname": ""
        },
        "Ember.Router": {
            "name": "Ember.Router",
            "shortname": "Ember.Router",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember",
            "file": "packages/ember-routing/lib/system/router.js",
            "line": 51,
            "description": "The `Ember.Router` class manages the application state and URLs. Refer to\nthe [routing guide](http://emberjs.com/guides/routing/) for documentation.",
            "extends": "Ember.Object",
            "uses": [
                "Ember.Evented"
            ],
            "access": "public",
            "tagname": ""
        },
        "Ember.Controller": {
            "name": "Ember.Controller",
            "shortname": "Ember.Controller",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/controllers/controller.js",
            "line": 12,
            "extends": "Ember.Object",
            "uses": [
                "Ember.ControllerMixin"
            ],
            "access": "public",
            "tagname": ""
        },
        "Ember.inject": {
            "name": "Ember.inject",
            "shortname": "Ember.inject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/inject.js",
            "line": 6,
            "description": "Namespace for injection helper methods.",
            "static": 1,
            "access": "public",
            "tagname": ""
        },
        "Function": {
            "name": "Function",
            "shortname": "Function",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": ""
        },
        "String": {
            "name": "String",
            "shortname": "String",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": ""
        },
        "Ember.ProxyMixin": {
            "name": "Ember.ProxyMixin",
            "shortname": "Ember.ProxyMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/mixins/-proxy.js",
            "line": 64,
            "description": "`Ember.ProxyMixin` forwards all properties not defined by the proxy itself\nto a proxied `content` object.  See Ember.ObjectProxy for more details.",
            "access": "private",
            "tagname": ""
        },
        "Ember.ActionHandler": {
            "name": "Ember.ActionHandler",
            "shortname": "Ember.ActionHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.ControllerMixin",
                "Ember.Route",
                "Ember.CoreView"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/mixins/action_handler.js",
            "line": 13,
            "description": "`Ember.ActionHandler` is available on some familiar classes including\n`Ember.Route`, `Ember.Component`, and `Ember.Controller`.\n(Internally the mixin is used by `Ember.CoreView`, `Ember.ControllerMixin`,\nand `Ember.Route` and available to the above classes through\ninheritance.)",
            "access": "private",
            "tagname": ""
        },
        "Ember.Array": {
            "name": "Ember.Array",
            "shortname": "Ember.Array",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.MutableArray"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/mixins/array.js",
            "line": 167,
            "description": "This mixin implements Observer-friendly Array-like behavior. It is not a\nconcrete implementation, but it can be used up by other classes that want\nto appear like arrays.\n\nFor example, ArrayProxy is a concrete classes that can\nbe instantiated to implement array-like behavior. Both of these classes use\nthe Array Mixin by way of the MutableArray mixin, which allows observable\nchanges to be made to the underlying array.\n\nUnlike `Ember.Enumerable,` this mixin defines methods specifically for\ncollections that provide index-ordered access to their contents. When you\nare designing code that needs to accept any kind of Array-like object, you\nshould use these methods instead of Array primitives because these will\nproperly notify observers of changes to the array.\n\nAlthough these methods are efficient, they do add a layer of indirection to\nyour application so it is a good idea to use them only when you need the\nflexibility of using both true JavaScript arrays and \"virtual\" arrays such\nas controllers and collections.\n\nYou can use the methods defined in this module to access and modify array\ncontents in a KVO-friendly way. You can also be notified whenever the\nmembership of an array changes by using `.observes('myArray.[]')`.\n\nTo support `Ember.Array` in your own class, you must override two\nprimitives to use it: `length()` and `objectAt()`.\n\nNote that the Ember.Array mixin also incorporates the `Ember.Enumerable`\nmixin. All `Ember.Array`-like objects are also enumerable.",
            "uses": [
                "Ember.Enumerable"
            ],
            "since": "Ember 0.9.0",
            "access": "public",
            "tagname": ""
        },
        "Ember.Comparable": {
            "name": "Ember.Comparable",
            "shortname": "Ember.Comparable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/mixins/comparable.js",
            "line": 8,
            "description": "Implements some standard methods for comparing objects. Add this mixin to\nany class you create that can compare its instances.\n\nYou should implement the `compare()` method.",
            "since": "Ember 0.9",
            "access": "private",
            "tagname": ""
        },
        "ContainerProxyMixin": {
            "name": "ContainerProxyMixin",
            "shortname": "ContainerProxyMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.EngineInstance"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "",
            "file": "packages/ember-runtime/lib/mixins/container_proxy.js",
            "line": 10,
            "description": "ContainerProxyMixin is used to provide public access to specific\ncontainer functionality.",
            "access": "private",
            "tagname": ""
        },
        "Ember.Copyable": {
            "name": "Ember.Copyable",
            "shortname": "Ember.Copyable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.NativeArray"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/mixins/copyable.js",
            "line": 14,
            "description": "Implements some standard methods for copying an object. Add this mixin to\nany object you create that can create a copy of itself. This mixin is\nadded automatically to the built-in array.\n\nYou should generally implement the `copy()` method to return a copy of the\nreceiver.\n\nNote that `frozenCopy()` will only work if you also implement\n`Ember.Freezable`.",
            "since": "Ember 0.9",
            "access": "private",
            "tagname": ""
        },
        "Ember.Enumerable": {
            "name": "Ember.Enumerable",
            "shortname": "Ember.Enumerable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.Array",
                "Ember.MutableEnumerable"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 58,
            "description": "This mixin defines the common interface implemented by enumerable objects\nin Ember. Most of these methods follow the standard Array iteration\nAPI defined up to JavaScript 1.8 (excluding language-specific features that\ncannot be emulated in older versions of JavaScript).\n\nThis mixin is applied automatically to the Array class on page load, so you\ncan use any of these methods on simple arrays. If Array already implements\none of these methods, the mixin will not override them.\n\n## Writing Your Own Enumerable\n\nTo make your own custom class enumerable, you need two items:\n\n1. You must have a length property. This property should change whenever\n   the number of items in your enumerable object changes. If you use this\n   with an `Ember.Object` subclass, you should be sure to change the length\n   property using `set().`\n\n2. You must implement `nextObject().` See documentation.\n\nOnce you have these two methods implemented, apply the `Ember.Enumerable` mixin\nto your class and you will be able to enumerate the contents of your object\nlike any other collection.\n\n## Using Ember Enumeration with Other Libraries\n\nMany other libraries provide some kind of iterator or enumeration like\nfacility. This is often where the most common API conflicts occur.\nEmber's API is designed to be as friendly as possible with other\nlibraries by implementing only methods that mostly correspond to the\nJavaScript 1.8 API.",
            "since": "Ember 0.9",
            "access": "private",
            "tagname": ""
        },
        "Ember.Evented": {
            "name": "Ember.Evented",
            "shortname": "Ember.Evented",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.Route",
                "Ember.Router",
                "Ember.CoreView"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/mixins/evented.js",
            "line": 14,
            "description": "This mixin allows for Ember objects to subscribe to and emit events.\n\n```javascript\nApp.Person = Ember.Object.extend(Ember.Evented, {\n  greet: function() {\n    // ...\n    this.trigger('greet');\n  }\n});\n\nvar person = App.Person.create();\n\nperson.on('greet', function() {\n  console.log('Our person has greeted');\n});\n\nperson.greet();\n\n// outputs: 'Our person has greeted'\n```\n\nYou can also chain multiple event subscriptions:\n\n```javascript\nperson.on('greet', function() {\n  console.log('Our person has greeted');\n}).one('greet', function() {\n  console.log('Offer one-time special');\n}).off('event', this, forgetThis);\n```",
            "access": "public",
            "tagname": ""
        },
        "Ember.Freezable": {
            "name": "Ember.Freezable",
            "shortname": "Ember.Freezable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/mixins/freezable.js",
            "line": 13,
            "description": "The `Ember.Freezable` mixin implements some basic methods for marking an\nobject as frozen. Once an object is frozen it should be read only. No changes\nmay be made the internal state of the object.\n\n## Enforcement\n\nTo fully support freezing in your subclass, you must include this mixin and\noverride any method that might alter any property on the object to instead\nraise an exception. You can check the state of an object by checking the\n`isFrozen` property.\n\nAlthough future versions of JavaScript may support language-level freezing\nobject objects, that is not the case today. Even if an object is freezable,\nit is still technically possible to modify the object, even though it could\nbreak other parts of your application that do not expect a frozen object to\nchange. It is, therefore, very important that you always respect the\n`isFrozen` property on all freezable objects.\n\n## Example Usage\n\nThe example below shows a simple object that implement the `Ember.Freezable`\nprotocol.\n\n```javascript\nContact = Ember.Object.extend(Ember.Freezable, {\n  firstName: null,\n  lastName: null,\n\n  // swaps the names\n  swapNames: function() {\n    if (this.get('isFrozen')) throw Ember.FROZEN_ERROR;\n    var tmp = this.get('firstName');\n    this.set('firstName', this.get('lastName'));\n    this.set('lastName', tmp);\n    return this;\n  }\n\n});\n\nc = Contact.create({ firstName: \"John\", lastName: \"Doe\" });\nc.swapNames();  // returns c\nc.freeze();\nc.swapNames();  // EXCEPTION\n```\n\n## Copying\n\nUsually the `Ember.Freezable` protocol is implemented in cooperation with the\n`Ember.Copyable` protocol, which defines a `frozenCopy()` method that will\nreturn a frozen object, if the object implements this method as well.",
            "since": "Ember 0.9",
            "deprecated": true,
            "deprecationMessage": "Use `Object.freeze` instead.",
            "access": "private",
            "tagname": ""
        },
        "Ember.MutableArray": {
            "name": "Ember.MutableArray",
            "shortname": "Ember.MutableArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.ArrayProxy",
                "Ember.NativeArray"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
            "line": 41,
            "description": "This mixin defines the API for modifying array-like objects. These methods\ncan be applied only to a collection that keeps its items in an ordered set.\nIt builds upon the Array mixin and adds methods to modify the array.\nOne concrete implementations of this class include ArrayProxy.\n\nIt is important to use the methods in this class to modify arrays so that\nchanges are observable. This allows the binding system in Ember to function\ncorrectly.\n\n\nNote that an Array can change even if it does not implement this mixin.\nFor example, one might implement a SparseArray that cannot be directly\nmodified, but if its underlying enumerable changes, it will change also.",
            "uses": [
                "Ember.Array",
                "Ember.MutableEnumerable"
            ],
            "access": "public",
            "tagname": ""
        },
        "Ember.MutableEnumerable": {
            "name": "Ember.MutableEnumerable",
            "shortname": "Ember.MutableEnumerable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.MutableArray"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/mixins/mutable_enumerable.js",
            "line": 13,
            "description": "This mixin defines the API for modifying generic enumerables. These methods\ncan be applied to an object regardless of whether it is ordered or\nunordered.\n\nNote that an Enumerable can change even if it does not implement this mixin.\nFor example, a MappedEnumerable cannot be directly modified but if its\nunderlying enumerable changes, it will change also.\n\n## Adding Objects\n\nTo add an object to an enumerable, use the `addObject()` method. This\nmethod will only add the object to the enumerable if the object is not\nalready present and is of a type supported by the enumerable.\n\n```javascript\nset.addObject(contact);\n```\n\n## Removing Objects\n\nTo remove an object from an enumerable, use the `removeObject()` method. This\nwill only remove the object if it is present in the enumerable, otherwise\nthis method has no effect.\n\n```javascript\nset.removeObject(contact);\n```\n\n## Implementing In Your Own Code\n\nIf you are implementing an object and want to support this API, just include\nthis mixin in your class and implement the required methods. In your unit\ntests, be sure to apply the Ember.MutableEnumerableTests to your object.",
            "uses": [
                "Ember.Enumerable"
            ],
            "access": "public",
            "tagname": ""
        },
        "Ember.Observable": {
            "name": "Ember.Observable",
            "shortname": "Ember.Observable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.NativeArray",
                "Ember.Object"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/mixins/observable.js",
            "line": 26,
            "description": "## Overview\n\nThis mixin provides properties and property observing functionality, core\nfeatures of the Ember object model.\n\nProperties and observers allow one object to observe changes to a\nproperty on another object. This is one of the fundamental ways that\nmodels, controllers and views communicate with each other in an Ember\napplication.\n\nAny object that has this mixin applied can be used in observer\noperations. That includes `Ember.Object` and most objects you will\ninteract with as you write your Ember application.\n\nNote that you will not generally apply this mixin to classes yourself,\nbut you will use the features provided by this module frequently, so it\nis important to understand how to use it.\n\n## Using `get()` and `set()`\n\nBecause of Ember's support for bindings and observers, you will always\naccess properties using the get method, and set properties using the\nset method. This allows the observing objects to be notified and\ncomputed properties to be handled properly.\n\nMore documentation about `get` and `set` are below.\n\n## Observing Property Changes\n\nYou typically observe property changes simply by using the `Ember.observer`\nfunction in classes that you write.\n\nFor example:\n\n```javascript\nEmber.Object.extend({\n  valueObserver: Ember.observer('value', function(sender, key, value, rev) {\n    // Executes whenever the \"value\" property changes\n    // See the addObserver method for more information about the callback arguments\n  })\n});\n```\n\nAlthough this is the most common way to add an observer, this capability\nis actually built into the `Ember.Object` class on top of two methods\ndefined in this mixin: `addObserver` and `removeObserver`. You can use\nthese two methods to add and remove observers yourself if you need to\ndo so at runtime.\n\nTo add an observer for a property, call:\n\n```javascript\nobject.addObserver('propertyKey', targetObject, targetAction)\n```\n\nThis will call the `targetAction` method on the `targetObject` whenever\nthe value of the `propertyKey` changes.\n\nNote that if `propertyKey` is a computed property, the observer will be\ncalled when any of the property dependencies are changed, even if the\nresulting value of the computed property is unchanged. This is necessary\nbecause computed properties are not computed until `get` is called.",
            "access": "public",
            "tagname": ""
        },
        "Ember.PromiseProxyMixin": {
            "name": "Ember.PromiseProxyMixin",
            "shortname": "Ember.PromiseProxyMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "",
            "file": "packages/ember-runtime/lib/mixins/promise_proxy.js",
            "line": 40,
            "description": "A low level mixin making ObjectProxy promise-aware.\n\n```javascript\nlet ObjectPromiseProxy = Ember.ObjectProxy.extend(Ember.PromiseProxyMixin);\n\nlet proxy = ObjectPromiseProxy.create({\n  promise: Ember.RSVP.cast($.getJSON('/some/remote/data.json'))\n});\n\nproxy.then(function(json){\n   // the json\n}, function(reason) {\n   // the reason why you have no json\n});\n```\n\nthe proxy has bindable attributes which\ntrack the promises life cycle\n\n```javascript\nproxy.get('isPending')   //=> true\nproxy.get('isSettled')  //=> false\nproxy.get('isRejected')  //=> false\nproxy.get('isFulfilled') //=> false\n```\n\nWhen the $.getJSON completes, and the promise is fulfilled\nwith json, the life cycle attributes will update accordingly.\nNote that $.getJSON doesn't return an ECMA specified promise,\nit is useful to wrap this with an `RSVP.cast` so that it behaves\nas a spec compliant promise.\n\n```javascript\nproxy.get('isPending')   //=> false\nproxy.get('isSettled')   //=> true\nproxy.get('isRejected')  //=> false\nproxy.get('isFulfilled') //=> true\n```\n\nAs the proxy is an ObjectProxy, and the json now its content,\nall the json properties will be available directly from the proxy.\n\n```javascript\n// Assuming the following json:\n{\n  firstName: 'Stefan',\n  lastName: 'Penner'\n}\n\n// both properties will accessible on the proxy\nproxy.get('firstName') //=> 'Stefan'\nproxy.get('lastName')  //=> 'Penner'\n```",
            "access": "public",
            "tagname": ""
        },
        "RegistryProxyMixin": {
            "name": "RegistryProxyMixin",
            "shortname": "RegistryProxyMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.Application",
                "Ember.EngineInstance"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "",
            "file": "packages/ember-runtime/lib/mixins/registry_proxy.js",
            "line": 11,
            "description": "RegistryProxyMixin is used to provide public access to specific\nregistry functionality.",
            "access": "private",
            "tagname": ""
        },
        "Ember.TargetActionSupport": {
            "name": "Ember.TargetActionSupport",
            "shortname": "Ember.TargetActionSupport",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.Component",
                "Ember.TextSupport"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/mixins/target_action_support.js",
            "line": 14,
            "description": "`Ember.TargetActionSupport` is a mixin that can be included in a class\nto add a `triggerAction` method with semantics similar to the Handlebars\n`{{action}}` helper. In normal Ember usage, the `{{action}}` helper is\nusually the best choice. This mixin is most often useful when you are\ndoing more complex event handling in Components.",
            "extends": "Ember.Mixin",
            "access": "private",
            "tagname": ""
        },
        "Ember.ArrayProxy": {
            "name": "Ember.ArrayProxy",
            "shortname": "Ember.ArrayProxy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/system/array_proxy.js",
            "line": 35,
            "description": "An ArrayProxy wraps any other object that implements `Ember.Array` and/or\n`Ember.MutableArray,` forwarding all requests. This makes it very useful for\na number of binding use cases or other cases where being able to swap\nout the underlying array is useful.\n\nA simple example of usage:\n\n```javascript\nlet pets = ['dog', 'cat', 'fish'];\nlet ap = Ember.ArrayProxy.create({ content: Ember.A(pets) });\n\nap.get('firstObject');                        // 'dog'\nap.set('content', ['amoeba', 'paramecium']);\nap.get('firstObject');                        // 'amoeba'\n```\n\nThis class can also be useful as a layer to transform the contents of\nan array, as they are accessed. This can be done by overriding\n`objectAtContent`:\n\n```javascript\nlet pets = ['dog', 'cat', 'fish'];\nlet ap = Ember.ArrayProxy.create({\n    content: Ember.A(pets),\n    objectAtContent: function(idx) {\n        return this.get('content').objectAt(idx).toUpperCase();\n    }\n});\n\nap.get('firstObject'); // . 'DOG'\n```",
            "extends": "Ember.Object",
            "uses": [
                "Ember.MutableArray"
            ],
            "access": "public",
            "tagname": ""
        },
        "Ember.CoreObject": {
            "name": "Ember.CoreObject",
            "shortname": "Ember.CoreObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/system/core_object.js",
            "line": 205,
            "access": "public",
            "tagname": ""
        },
        "Ember.EachProxy": {
            "name": "Ember.EachProxy",
            "shortname": "EachProxy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/system/each_proxy.js",
            "line": 14,
            "description": "This is the object instance returned when you get the `@each` property on an\narray. It uses the unknownProperty handler to automatically create\nEachArray instances for property names.",
            "access": "private",
            "tagname": ""
        },
        "Ember.Namespace": {
            "name": "Ember.Namespace",
            "shortname": "Ember.Namespace",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/system/namespace.js",
            "line": 26,
            "description": "A Namespace is an object usually used to contain other objects or methods\nsuch as an application or framework. Create a namespace anytime you want\nto define one of these new containers.\n\n# Example Usage\n\n```javascript\nMyFramework = Ember.Namespace.create({\n  VERSION: '1.0.0'\n});\n```",
            "extends": "Ember.Object",
            "access": "public",
            "tagname": ""
        },
        "Ember.NativeArray": {
            "name": "Ember.NativeArray",
            "shortname": "Ember.NativeArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/system/native_array.js",
            "line": 25,
            "description": "The NativeArray mixin contains the properties needed to make the native\nArray support Ember.MutableArray and all of its dependent APIs. Unless you\nhave `EmberENV.EXTEND_PROTOTYPES` or `EmberENV.EXTEND_PROTOTYPES.Array` set to\nfalse, this will be applied automatically. Otherwise you can apply the mixin\nat anytime by calling `Ember.NativeArray.apply(Array.prototype)`.",
            "uses": [
                "Ember.MutableArray",
                "Ember.Observable",
                "Ember.Copyable"
            ],
            "access": "public",
            "tagname": ""
        },
        "Ember.Object": {
            "name": "Ember.Object",
            "shortname": "Ember.Object",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/system/object.js",
            "line": 11,
            "description": "`Ember.Object` is the main base class for all Ember objects. It is a subclass\nof `Ember.CoreObject` with the `Ember.Observable` mixin applied. For details,\nsee the documentation for each of these.",
            "extends": "Ember.CoreObject",
            "uses": [
                "Ember.Observable"
            ],
            "access": "public",
            "tagname": ""
        },
        "Ember.ObjectProxy": {
            "name": "Ember.ObjectProxy",
            "shortname": "Ember.ObjectProxy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/system/object_proxy.js",
            "line": 4,
            "description": "`Ember.ObjectProxy` forwards all properties not defined by the proxy itself\nto a proxied `content` object.\n\n```javascript\nobject = Ember.Object.create({\n  name: 'Foo'\n});\n\nproxy = Ember.ObjectProxy.create({\n  content: object\n});\n\n// Access and change existing properties\nproxy.get('name')          // 'Foo'\nproxy.set('name', 'Bar');\nobject.get('name')         // 'Bar'\n\n// Create new 'description' property on `object`\nproxy.set('description', 'Foo is a whizboo baz');\nobject.get('description')  // 'Foo is a whizboo baz'\n```\n\nWhile `content` is unset, setting a property to be delegated will throw an\nError.\n\n```javascript\nproxy = Ember.ObjectProxy.create({\n  content: null,\n  flag: null\n});\nproxy.set('flag', true);\nproxy.get('flag');         // true\nproxy.get('foo');          // undefined\nproxy.set('foo', 'data');  // throws Error\n```\n\nDelegated properties can be bound to and will change when content is updated.\n\nComputed properties on the proxy itself can depend on delegated properties.\n\n```javascript\nProxyWithComputedProperty = Ember.ObjectProxy.extend({\n  fullName: Ember.computed('firstName', 'lastName', function() {\n    var firstName = this.get('firstName'),\n        lastName = this.get('lastName');\n    if (firstName && lastName) {\n      return firstName + ' ' + lastName;\n    }\n    return firstName || lastName;\n  })\n});\n\nproxy = ProxyWithComputedProperty.create();\n\nproxy.get('fullName');  // undefined\nproxy.set('content', {\n  firstName: 'Tom', lastName: 'Dale'\n}); // triggers property change for fullName on proxy\n\nproxy.get('fullName');  // 'Tom Dale'\n```",
            "extends": "Ember._ProxyMixin",
            "access": "public",
            "tagname": ""
        },
        "Ember.Service": {
            "name": "Ember.Service",
            "shortname": "Ember.Service",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/system/service.js",
            "line": 35,
            "extends": "Ember.Object",
            "since": "1.10.0",
            "access": "public",
            "tagname": ""
        },
        "Ember.Test.Adapter": {
            "name": "Ember.Test.Adapter",
            "shortname": "Ember.Test.Adapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember.Test",
            "file": "packages/ember-testing/lib/adapters/adapter.js",
            "line": 10,
            "description": "The primary purpose of this class is to create hooks that can be implemented\nby an adapter for various test frameworks.",
            "access": "public",
            "tagname": ""
        },
        "Ember.Test.QUnitAdapter": {
            "name": "Ember.Test.QUnitAdapter",
            "shortname": "Ember.Test.QUnitAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "namespace": "Ember.Test",
            "file": "packages/ember-testing/lib/adapters/qunit.js",
            "line": 4,
            "description": "This class implements the methods defined by Ember.Test.Adapter for the\nQUnit testing framework.",
            "extends": "Ember.Test.Adapter",
            "access": "public",
            "tagname": ""
        },
        "Ember.Test": {
            "name": "Ember.Test",
            "shortname": "Ember.Test",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "namespace": "Ember",
            "file": "packages/ember-testing/lib/test.js",
            "line": 29,
            "description": "This is a container for an assortment of testing related functionality:\n\n* Choose your default test adapter (for your framework of choice).\n* Register/Unregister additional test helpers.\n* Setup callbacks to be fired when the test helpers are injected into\n  your application.",
            "submodule": "ember-testing",
            "access": "public",
            "tagname": ""
        },
        "Ember.ActionSupport": {
            "name": "Ember.ActionSupport",
            "shortname": "Ember.ActionSupport",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.Component"
            ],
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember",
            "file": "packages/ember-views/lib/mixins/action_support.js",
            "line": 22,
            "access": "private",
            "tagname": ""
        },
        "Ember.ClassNamesSupport": {
            "name": "Ember.ClassNamesSupport",
            "shortname": "Ember.ClassNamesSupport",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.Component",
                "Ember.View"
            ],
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember",
            "file": "packages/ember-views/lib/mixins/class_names_support.js",
            "line": 13,
            "access": "private",
            "tagname": ""
        },
        "Ember.TextSupport": {
            "name": "Ember.TextSupport",
            "shortname": "Ember.TextSupport",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.TextArea",
                "Ember.TextField"
            ],
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember",
            "file": "packages/ember-views/lib/mixins/text_support.js",
            "line": 18,
            "description": "`TextSupport` is a shared mixin used by both `Ember.TextField` and\n`Ember.TextArea`. `TextSupport` adds a number of methods that allow you to\nspecify a controller action to invoke when a certain event is fired on your\ntext field or textarea. The specifed controller action would get the current\nvalue of the field passed in as the only argument unless the value of\nthe field is empty. In that case, the instance of the field itself is passed\nin as the only argument.\n\nLet's use the pressing of the escape key as an example. If you wanted to\ninvoke a controller action when a user presses the escape key while on your\nfield, you would use the `escape-press` attribute on your field like so:\n\n```handlebars\n  {{! application.hbs}}\n\n  {{input escape-press='alertUser'}}\n```\n\n```javascript\n    App = Ember.Application.create();\n\n    App.ApplicationController = Ember.Controller.extend({\n      actions: {\n        alertUser: function ( currentValue ) {\n          alert( 'escape pressed, current value: ' + currentValue );\n        }\n      }\n    });\n```\n\nThe following chart is a visual representation of what takes place when the\nescape key is pressed in this scenario:\n\n```\nThe Template\n+---------------------------+\n|                           |\n| escape-press='alertUser'  |\n|                           |          TextSupport Mixin\n+----+----------------------+          +-------------------------------+\n     |                                 | cancel method                 |\n     |      escape button pressed      |                               |\n     +-------------------------------> | checks for the `escape-press` |\n                                       | attribute and pulls out the   |\n     +-------------------------------+ | `alertUser` value             |\n     |     action name 'alertUser'     +-------------------------------+\n     |     sent to controller\n     v\nController\n+------------------------------------------ +\n|                                           |\n|  actions: {                               |\n|     alertUser: function( currentValue ){  |\n|       alert( 'the esc key was pressed!' ) |\n|     }                                     |\n|  }                                        |\n|                                           |\n+-------------------------------------------+\n```\n\nHere are the events that we currently support along with the name of the\nattribute you would need to use on your field. To reiterate, you would use the\nattribute name like so:\n\n```handlebars\n  {{input attribute-name='controllerAction'}}\n```\n\n```\n+--------------------+----------------+\n|                    |                |\n| event              | attribute name |\n+--------------------+----------------+\n| new line inserted  | insert-newline |\n|                    |                |\n| enter key pressed  | insert-newline |\n|                    |                |\n| cancel key pressed | escape-press   |\n|                    |                |\n| focusin            | focus-in       |\n|                    |                |\n| focusout           | focus-out      |\n|                    |                |\n| keypress           | key-press      |\n|                    |                |\n| keyup              | key-up         |\n|                    |                |\n| keydown            | key-down       |\n+--------------------+----------------+\n```",
            "uses": [
                "Ember.TargetActionSupport"
            ],
            "extends": "Ember.Mixin",
            "access": "private",
            "tagname": ""
        },
        "Ember.ViewMixin": {
            "name": "Ember.ViewMixin",
            "shortname": "Ember.ViewMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.Component"
            ],
            "module": "ember",
            "namespace": "Ember",
            "file": "packages/ember-views/lib/mixins/view_support.js",
            "line": 12,
            "access": "private",
            "tagname": ""
        },
        "Ember.EventDispatcher": {
            "name": "Ember.EventDispatcher",
            "shortname": "Ember.EventDispatcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember",
            "file": "packages/ember-views/lib/system/event_dispatcher.js",
            "line": 17,
            "description": "`Ember.EventDispatcher` handles delegating browser events to their\ncorresponding `Ember.Views.` For example, when you click on a view,\n`Ember.EventDispatcher` ensures that that view's `mouseDown` method gets\ncalled.",
            "access": "private",
            "tagname": "",
            "extends": "Ember.Object"
        },
        "Ember.CoreView": {
            "name": "Ember.CoreView",
            "shortname": "Ember.CoreView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "namespace": "Ember",
            "file": "packages/ember-views/lib/views/core_view.js",
            "line": 11,
            "description": "`Ember.CoreView` is an abstract class that exists to give view-like behavior\nto both Ember's main view class `Ember.Component` and other classes that don't need\nthe full functionality of `Ember.Component`.\n\nUnless you have specific needs for `CoreView`, you will use `Ember.Component`\nin your applications.",
            "extends": "Ember.Object",
            "deprecated": true,
            "deprecationMessage": "Use `Ember.Component` instead.",
            "uses": [
                "Ember.Evented",
                "Ember.ActionHandler"
            ],
            "access": "private",
            "tagname": ""
        },
        "Ember.View": {
            "name": "Ember.View",
            "shortname": "Ember.View",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember",
            "file": "packages/ember-views/lib/views/view.js",
            "line": 6,
            "extends": "Ember.CoreView",
            "deprecated": true,
            "deprecationMessage": "See http://emberjs.com/deprecations/v1.x/#toc_ember-view",
            "uses": [
                "Ember.ViewSupport",
                "Ember.ChildViewsSupport",
                "Ember.ClassNamesSupport",
                "Ember.AttributeBindingsSupport"
            ],
            "access": "private",
            "tagname": ""
        },
        "Backburner": {
            "name": "Backburner",
            "shortname": "Backburner",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "namespace": "",
            "file": "packages/ember/lib/index.js",
            "line": 232,
            "access": "private",
            "tagname": ""
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "packages/container/lib/container.js",
            "line": 32,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "owner",
            "type": "Object",
            "class": "Container"
        },
        {
            "file": "packages/container/lib/container.js",
            "line": 39,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "registry",
            "type": "Registry",
            "since": "1.11.0",
            "class": "Container"
        },
        {
            "file": "packages/container/lib/container.js",
            "line": 47,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "cache",
            "type": "InheritingDict",
            "class": "Container"
        },
        {
            "file": "packages/container/lib/container.js",
            "line": 54,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "factoryCache",
            "type": "InheritingDict",
            "class": "Container"
        },
        {
            "file": "packages/container/lib/container.js",
            "line": 61,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "validationCache",
            "type": "InheritingDict",
            "class": "Container"
        },
        {
            "file": "packages/container/lib/container.js",
            "line": 68,
            "description": "Given a fullName return a corresponding instance.\n\nThe default behaviour is for lookup to return a singleton instance.\nThe singleton is scoped to the container, allowing multiple containers\nto all have their own locally scoped singletons.\n\n```javascript\nlet registry = new Registry();\nlet container = registry.container();\n\nregistry.register('api:twitter', Twitter);\n\nlet twitter = container.lookup('api:twitter');\n\ntwitter instanceof Twitter; // => true\n\n// by default the container will return singletons\nlet twitter2 = container.lookup('api:twitter');\ntwitter2 instanceof Twitter; // => true\n\ntwitter === twitter2; //=> true\n```\n\nIf singletons are not wanted, an optional flag can be provided at lookup.\n\n```javascript\nlet registry = new Registry();\nlet container = registry.container();\n\nregistry.register('api:twitter', Twitter);\n\nlet twitter = container.lookup('api:twitter', { singleton: false });\nlet twitter2 = container.lookup('api:twitter', { singleton: false });\n\ntwitter === twitter2; //=> false\n```",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "lookup",
            "params": [
                {
                    "name": "fullName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "source",
                            "description": "The fullname of the request source (used for local lookup)",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "Container"
        },
        {
            "file": "packages/container/lib/container.js",
            "line": 118,
            "description": "Given a fullName, return the corresponding factory.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "lookupFactory",
            "params": [
                {
                    "name": "fullName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "source",
                            "description": "The fullname of the request source (used for local lookup)",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "Container"
        },
        {
            "file": "packages/container/lib/container.js",
            "line": 133,
            "description": "A depth first traversal, destroying the container, its descendant containers and all\ntheir managed objects.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "destroy",
            "class": "Container"
        },
        {
            "file": "packages/container/lib/container.js",
            "line": 150,
            "description": "Clear either the entire cache or just the cache for a particular key.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "fullName",
                    "description": "optional key to reset; if missing, resets everything",
                    "type": "String"
                }
            ],
            "class": "Container"
        },
        {
            "file": "packages/container/lib/container.js",
            "line": 165,
            "description": "Returns an object that can be used to provide an owner to a\nmanually created instance.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "ownerInjection",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Container"
        },
        {
            "file": "packages/container/lib/registry.js",
            "line": 48,
            "description": "A backup registry for resolving registrations when no matches can be found.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "fallback",
            "type": "Registry",
            "class": "Registry"
        },
        {
            "file": "packages/container/lib/registry.js",
            "line": 57,
            "description": "An object that has a `resolve` method that resolves a name.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "resolver",
            "type": "Resolver",
            "class": "Registry"
        },
        {
            "file": "packages/container/lib/registry.js",
            "line": 66,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "registrations",
            "type": "InheritingDict",
            "class": "Registry"
        },
        {
            "file": "packages/container/lib/registry.js",
            "line": 73,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_typeInjections",
            "type": "InheritingDict",
            "class": "Registry"
        },
        {
            "file": "packages/container/lib/registry.js",
            "line": 81,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_injections",
            "type": "InheritingDict",
            "class": "Registry"
        },
        {
            "file": "packages/container/lib/registry.js",
            "line": 89,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_factoryTypeInjections",
            "type": "InheritingDict",
            "class": "Registry"
        },
        {
            "file": "packages/container/lib/registry.js",
            "line": 97,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_factoryInjections",
            "type": "InheritingDict",
            "class": "Registry"
        },
        {
            "file": "packages/container/lib/registry.js",
            "line": 105,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_normalizeCache",
            "type": "InheritingDict",
            "class": "Registry"
        },
        {
            "file": "packages/container/lib/registry.js",
            "line": 113,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_resolveCache",
            "type": "InheritingDict",
            "class": "Registry"
        },
        {
            "file": "packages/container/lib/registry.js",
            "line": 121,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_options",
            "type": "InheritingDict",
            "class": "Registry"
        },
        {
            "file": "packages/container/lib/registry.js",
            "line": 129,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_typeOptions",
            "type": "InheritingDict",
            "class": "Registry"
        },
        {
            "file": "packages/container/lib/registry.js",
            "line": 137,
            "description": "Creates a container based on this registry.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "container",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "created container",
                "type": "Container"
            },
            "class": "Registry"
        },
        {
            "file": "packages/container/lib/registry.js",
            "line": 149,
            "description": "Registers a factory for later injection.\n\nExample:\n\n```javascript\nlet registry = new Registry();\n\nregistry.register('model:user', Person, {singleton: false });\nregistry.register('fruit:favorite', Orange);\nregistry.register('communication:main', Email, {singleton: false});\n```",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "fullName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "factory",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Registry"
        },
        {
            "file": "packages/container/lib/registry.js",
            "line": 186,
            "description": "Unregister a fullName\n\n```javascript\nlet registry = new Registry();\nregistry.register('model:user', User);\n\nregistry.resolve('model:user').create() instanceof User //=> true\n\nregistry.unregister('model:user')\nregistry.resolve('model:user') === undefined //=> true\n```",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "unregister",
            "params": [
                {
                    "name": "fullName",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Registry"
        },
        {
            "file": "packages/container/lib/registry.js",
            "line": 216,
            "description": "Given a fullName return the corresponding factory.\n\nBy default `resolve` will retrieve the factory from\nthe registry.\n\n```javascript\nlet registry = new Registry();\nregistry.register('api:twitter', Twitter);\n\nregistry.resolve('api:twitter') // => Twitter\n```\n\nOptionally the registry can be provided with a custom resolver.\nIf provided, `resolve` will first provide the custom resolver\nthe opportunity to resolve the fullName, otherwise it will fallback\nto the registry.\n\n```javascript\nlet registry = new Registry();\nregistry.resolver = function(fullName) {\n   // lookup via the module system of choice\n };\n\n// the twitter factory is added to the module system\nregistry.resolve('api:twitter') // => Twitter\n```",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "resolve",
            "params": [
                {
                    "name": "fullName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "source",
                            "description": "the fullname of the request source (used for local lookups)",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "fullName's factory",
                "type": "Function"
            },
            "class": "Registry"
        },
        {
            "file": "packages/container/lib/registry.js",
            "line": 260,
            "description": "A hook that can be used to describe how the resolver will\nattempt to find the factory.\n\nFor example, the default Ember `.describe` returns the full\nclass name (including namespace) where Ember's resolver expects\nto find the `fullName`.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "describe",
            "params": [
                {
                    "name": "fullName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "described fullName",
                "type": "String"
            },
            "class": "Registry"
        },
        {
            "file": "packages/container/lib/registry.js",
            "line": 283,
            "description": "A hook to enable custom fullName normalization behaviour",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "normalizeFullName",
            "params": [
                {
                    "name": "fullName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "normalized fullName",
                "type": "String"
            },
            "class": "Registry"
        },
        {
            "file": "packages/container/lib/registry.js",
            "line": 301,
            "description": "Normalize a fullName based on the application's conventions",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "normalize",
            "params": [
                {
                    "name": "fullName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "normalized fullName",
                "type": "String"
            },
            "class": "Registry"
        },
        {
            "file": "packages/container/lib/registry.js",
            "line": 315,
            "itemtype": "method",
            "name": "makeToString",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "factory",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "fullName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "toString function",
                "type": "Function"
            },
            "class": "Registry"
        },
        {
            "file": "packages/container/lib/registry.js",
            "line": 333,
            "description": "Given a fullName check if the container is aware of its factory\nor singleton instance.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "fullName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "source",
                            "description": "the fullname of the request source (used for local lookups)",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Registry"
        },
        {
            "file": "packages/container/lib/registry.js",
            "line": 354,
            "description": "Allow registering options for all factories of a type.\n\n```javascript\nlet registry = new Registry();\nlet container = registry.container();\n\n// if all of type `connection` must not be singletons\nregistry.optionsForType('connection', { singleton: false });\n\nregistry.register('connection:twitter', TwitterConnection);\nregistry.register('connection:facebook', FacebookConnection);\n\nlet twitter = container.lookup('connection:twitter');\nlet twitter2 = container.lookup('connection:twitter');\n\ntwitter === twitter2; // => false\n\nlet facebook = container.lookup('connection:facebook');\nlet facebook2 = container.lookup('connection:facebook');\n\nfacebook === facebook2; // => false\n```",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "optionsForType",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Registry"
        },
        {
            "file": "packages/container/lib/registry.js",
            "line": 395,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "options",
            "params": [
                {
                    "name": "fullName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Registry"
        },
        {
            "file": "packages/container/lib/registry.js",
            "line": 433,
            "description": "Used only via `injection`.\n\nProvides a specialized form of injection, specifically enabling\nall objects of one type to be injected with a reference to another\nobject.\n\nFor example, provided each object of type `controller` needed a `router`.\none would do the following:\n\n```javascript\nlet registry = new Registry();\nlet container = registry.container();\n\nregistry.register('router:main', Router);\nregistry.register('controller:user', UserController);\nregistry.register('controller:post', PostController);\n\nregistry.typeInjection('controller', 'router', 'router:main');\n\nlet user = container.lookup('controller:user');\nlet post = container.lookup('controller:post');\n\nuser.router instanceof Router; //=> true\npost.router instanceof Router; //=> true\n\n// both controllers share the same router\nuser.router === post.router; //=> true\n```",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "typeInjection",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fullName",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Registry"
        },
        {
            "file": "packages/container/lib/registry.js",
            "line": 486,
            "description": "Defines injection rules.\n\nThese rules are used to inject dependencies onto objects when they\nare instantiated.\n\nTwo forms of injections are possible:\n\n* Injecting one fullName on another fullName\n* Injecting one fullName on a type\n\nExample:\n\n```javascript\nlet registry = new Registry();\nlet container = registry.container();\n\nregistry.register('source:main', Source);\nregistry.register('model:user', User);\nregistry.register('model:post', Post);\n\n// injecting one fullName on another fullName\n// eg. each user model gets a post model\nregistry.injection('model:user', 'post', 'model:post');\n\n// injecting one fullName on another type\nregistry.injection('model', 'source', 'source:main');\n\nlet user = container.lookup('model:user');\nlet post = container.lookup('model:post');\n\nuser.source instanceof Source; //=> true\npost.source instanceof Source; //=> true\n\nuser.post instanceof Post; //=> true\n\n// and both models share the same source\nuser.source === post.source; //=> true\n```",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "injection",
            "params": [
                {
                    "name": "factoryName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "injectionName",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Registry"
        },
        {
            "file": "packages/container/lib/registry.js",
            "line": 553,
            "description": "Used only via `factoryInjection`.\n\nProvides a specialized form of injection, specifically enabling\nall factory of one type to be injected with a reference to another\nobject.\n\nFor example, provided each factory of type `model` needed a `store`.\none would do the following:\n\n```javascript\nlet registry = new Registry();\n\nregistry.register('store:main', SomeStore);\n\nregistry.factoryTypeInjection('model', 'store', 'store:main');\n\nlet store = registry.lookup('store:main');\nlet UserFactory = registry.lookupFactory('model:user');\n\nUserFactory.store instanceof SomeStore; //=> true\n```",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "factoryTypeInjection",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fullName",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Registry"
        },
        {
            "file": "packages/container/lib/registry.js",
            "line": 592,
            "description": "Defines factory injection rules.\n\nSimilar to regular injection rules, but are run against factories, via\n`Registry#lookupFactory`.\n\nThese rules are used to inject objects onto factories when they\nare looked up.\n\nTwo forms of injections are possible:\n\n* Injecting one fullName on another fullName\n* Injecting one fullName on a type\n\nExample:\n\n```javascript\nlet registry = new Registry();\nlet container = registry.container();\n\nregistry.register('store:main', Store);\nregistry.register('store:secondary', OtherStore);\nregistry.register('model:user', User);\nregistry.register('model:post', Post);\n\n// injecting one fullName on another type\nregistry.factoryInjection('model', 'store', 'store:main');\n\n// injecting one fullName on another fullName\nregistry.factoryInjection('model:post', 'secondaryStore', 'store:secondary');\n\nlet UserFactory = container.lookupFactory('model:user');\nlet PostFactory = container.lookupFactory('model:post');\nlet store = container.lookup('store:main');\n\nUserFactory.store instanceof Store; //=> true\nUserFactory.secondaryStore instanceof OtherStore; //=> false\n\nPostFactory.store instanceof Store; //=> true\nPostFactory.secondaryStore instanceof OtherStore; //=> true\n\n// and both models share the same source instance\nUserFactory.store === PostFactory.store; //=> true\n```",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "factoryInjection",
            "params": [
                {
                    "name": "factoryName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "injectionName",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Registry"
        },
        {
            "file": "packages/container/lib/registry.js",
            "line": 661,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "knownForType",
            "params": [
                {
                    "name": "type",
                    "description": "the type to iterate over",
                    "type": "String"
                }
            ],
            "class": "Registry"
        },
        {
            "file": "packages/container/lib/registry.js",
            "line": 776,
            "description": "Given a fullName and a source fullName returns the fully resolved\nfullName. Used to allow for local lookup.\n\n```javascript\nlet registry = new Registry();\n\n// the twitter factory is added to the module system\nregistry.expandLocalLookup('component:post-title', { source: 'template:post' }) // => component:post/post-title\n```",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "expandLocalLookup",
            "params": [
                {
                    "name": "fullName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "source",
                            "description": "the fullname of the request source (used for local lookups)",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "fullName",
                "type": "String"
            },
            "class": "Registry"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 44,
            "description": "The `Application` for which this is an instance.",
            "itemtype": "property",
            "name": "application",
            "type": "Ember.Application",
            "access": "private",
            "tagname": "",
            "class": "Ember.ApplicationInstance",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 52,
            "description": "The DOM events for which the event dispatcher should listen.\n\nBy default, the application's `Ember.EventDispatcher` listens\nfor a set of standard DOM events, such as `mousedown` and\n`keyup`, and delegates them to your application's `Ember.View`\ninstances.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "customEvents",
            "type": "Object",
            "class": "Ember.ApplicationInstance",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 65,
            "description": "The root DOM element of the Application as an element or a\n[jQuery-compatible selector\nstring](http://api.jquery.com/category/selectors/).",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "rootElement",
            "type": "String|DOMElement",
            "class": "Ember.ApplicationInstance",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 88,
            "description": "Overrides the base `EngineInstance._bootSync` method with concerns relevant\nto booting application (instead of engine) instances.\n\nThis method should only contain synchronous boot concerns. Asynchronous\nboot concerns should eventually be moved to the `boot` method, which\nreturns a promise.\n\nUntil all boot code has been made asynchronous, we need to continue to\nexpose this method for use *internally* in places where we need to boot an\ninstance synchronously.",
            "access": "private",
            "tagname": "",
            "class": "Ember.ApplicationInstance",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 139,
            "description": "This hook is called by the root-most Route (a.k.a. the ApplicationRoute)\nwhen it has finished creating the root View. By default, we simply take the\nview and append it to the `rootElement` specified on the Application.\n\nIn cases like FastBoot and testing, we can override this hook and implement\ncustom behavior, such as serializing to a string and sending over an HTTP\nsocket rather than appending to DOM.",
            "params": [
                {
                    "name": "view",
                    "description": "the root-most view",
                    "type": "Ember.View"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember.ApplicationInstance",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 155,
            "description": "Tells the router to start routing. The router will ask the location for the\ncurrent URL of the page to determine the initial URL to start routing to.\nTo start the app at a specific URL, call `handleURL` instead.",
            "access": "private",
            "tagname": "",
            "class": "Ember.ApplicationInstance",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 168,
            "access": "private",
            "tagname": "Sets up the router, initializing the child router and configuring the\nlocation before routing begins.\n\nBecause setup should only occur once, multiple calls to `setupRouter`\nbeyond the first call have no effect.",
            "class": "Ember.ApplicationInstance",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 185,
            "description": "Directs the router to route to a particular URL. This is useful in tests,\nfor example, to tell the app to start at a particular URL.",
            "params": [
                {
                    "name": "url",
                    "description": "the URL the router should route to",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember.ApplicationInstance",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 199,
            "access": "private",
            "tagname": "",
            "class": "Ember.ApplicationInstance",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 213,
            "description": "Returns the current URL of the app instance. This is useful when your\napp does not update the browsers URL bar (i.e. it uses the `'none'`\nlocation adapter).",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "the current URL",
                "type": "String"
            },
            "class": "Ember.ApplicationInstance",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 229,
            "description": "Navigate the instance to a particular URL. This is useful in tests, for\nexample, or to tell the app to start at a particular URL. This method\nreturns a promise that resolves with the app instance when the transition\nis complete, or rejects if the transion was aborted due to an error.",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "url",
                    "description": "the destination URL",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Ember.ApplicationInstance",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 285,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "setupRegistry",
            "params": [
                {
                    "name": "registry",
                    "description": "",
                    "type": "Registry"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "BootOptions"
                }
            ],
            "class": "Ember.ApplicationInstance",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 326,
            "description": "Provide a specific instance of jQuery. This is useful in conjunction with\nthe `document` option, as it allows you to use a copy of `jQuery` that is\nappropriately bound to the foreign `document` (e.g. a jsdom).\n\nThis is highly experimental and support very incomplete at the moment.",
            "itemtype": "property",
            "name": "jQuery",
            "type": "Object",
            "default": "auto-detected",
            "access": "private",
            "tagname": "",
            "class": "Ember.ApplicationInstance.BootOptions",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember.ApplicationInstance"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 340,
            "description": "Interactive mode: whether we need to set up event delegation and invoke\nlifecycle callbacks on Components.",
            "itemtype": "property",
            "name": "isInteractive",
            "type": "boolean",
            "default": "auto-detected",
            "access": "private",
            "tagname": "",
            "class": "Ember.ApplicationInstance.BootOptions",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember.ApplicationInstance"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 351,
            "description": "Run in a full browser environment.\n\nWhen this flag is set to `false`, it will disable most browser-specific\nand interactive features. Specifically:\n\n* It does not use `jQuery` to append the root view; the `rootElement`\n  (either specified as a subsequent option or on the application itself)\n  must already be an `Element` in the given `document` (as opposed to a\n  string selector).\n\n* It does not set up an `EventDispatcher`.\n\n* It does not run any `Component` lifecycle hooks (such as `didInsertElement`).\n\n* It sets the `location` option to `\"none\"`. (If you would like to use\n  the location adapter specified in the app's router instead, you can also\n  specify `{ location: null }` to specifically opt-out.)",
            "itemtype": "property",
            "name": "isBrowser",
            "type": "boolean",
            "default": "auto-detected",
            "access": "public",
            "tagname": "",
            "class": "Ember.ApplicationInstance.BootOptions",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember.ApplicationInstance"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 387,
            "description": "Disable rendering completely.\n\nWhen this flag is set to `true`, it will disable the entire rendering\npipeline. Essentially, this puts the app into \"routing-only\" mode. No\ntemplates will be rendered, and no Components will be created.",
            "itemtype": "property",
            "name": "shouldRender",
            "type": "boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "Ember.ApplicationInstance.BootOptions",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember.ApplicationInstance"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 410,
            "description": "If present, render into the given `Document` object instead of the\nglobal `window.document` object.\n\nIn practice, this is only useful in non-browser environment or in\nnon-interactive mode, because Ember's `jQuery` dependency is\nimplicitly bound to the current document, causing event delegation\nto not work properly when the app is rendered into a foreign\ndocument object (such as an iframe's `contentDocument`).\n\nIn non-browser mode, this could be a \"`Document`-like\" object as\nEmber only interact with a small subset of the DOM API in non-\ninteractive mode. While the exact requirements have not yet been\nformalized, the `SimpleDOM` library's implementation is known to\nwork.",
            "itemtype": "property",
            "name": "document",
            "type": "Document",
            "default": "the global `document` object",
            "access": "public",
            "tagname": "",
            "class": "Ember.ApplicationInstance.BootOptions",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember.ApplicationInstance"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 437,
            "description": "If present, overrides the application's `rootElement` property on\nthe instance. This is useful for testing environment, where you\nmight want to append the root view to a fixture area.\n\nIn non-browser mode, because Ember does not have access to jQuery,\nthis options must be specified as a DOM `Element` object instead of\na selector string.\n\nSee the documentation on `Ember.Applications`'s `rootElement` for\ndetails.",
            "itemtype": "property",
            "name": "rootElement",
            "type": "String|Element",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Ember.ApplicationInstance.BootOptions",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember.ApplicationInstance"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 462,
            "description": "If present, overrides the router's `location` property with this\nvalue. This is useful for environments where trying to modify the\nURL would be inappropriate.",
            "itemtype": "property",
            "name": "location",
            "type": "string",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Ember.ApplicationInstance.BootOptions",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember.ApplicationInstance"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 199,
            "description": "The root DOM element of the Application. This can be specified as an\nelement or a\n[jQuery-compatible selector string](http://api.jquery.com/category/selectors/).\n\nThis is the element that will be passed to the Application's,\n`eventDispatcher`, which sets up the listeners for event delegation. Every\nview in your application should be a child of the element you specify here.",
            "itemtype": "property",
            "name": "rootElement",
            "type": "DOMElement",
            "default": "'body'",
            "access": "public",
            "tagname": "",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 215,
            "description": "The `Ember.EventDispatcher` responsible for delegating events to this\napplication's views.\n\nThe event dispatcher is created by the application at initialization time\nand sets up event listeners on the DOM element described by the\napplication's `rootElement` property.\n\nSee the documentation for `Ember.EventDispatcher` for more information.",
            "itemtype": "property",
            "name": "eventDispatcher",
            "type": "Ember.EventDispatcher",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 232,
            "description": "The DOM events for which the event dispatcher should listen.\n\nBy default, the application's `Ember.EventDispatcher` listens\nfor a set of standard DOM events, such as `mousedown` and\n`keyup`, and delegates them to your application's `Ember.View`\ninstances.\n\nIf you would like additional bubbling events to be delegated to your\nviews, set your `Ember.Application`'s `customEvents` property\nto a hash containing the DOM event name as the key and the\ncorresponding view method name as the value. Setting an event to\na value of `null` will prevent a default event listener from being\nadded for that event.\n\nTo add new events to be listened to:\n\n```javascript\nlet App = Ember.Application.create({\n  customEvents: {\n    // add support for the paste event\n    paste: 'paste'\n  }\n});\n```\n\nTo prevent default events from being listened to:\n\n```javascript\nlet App = Ember.Application.create({\n  customEvents: {\n    // remove support for mouseenter / mouseleave events\n    mouseenter: null,\n    mouseleave: null\n  }\n});\n```",
            "itemtype": "property",
            "name": "customEvents",
            "type": "Object",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 276,
            "description": "Whether the application should automatically start routing and render\ntemplates to the `rootElement` on DOM ready. While default by true,\nother environments such as FastBoot or a testing harness can set this\nproperty to `false` and control the precise timing and behavior of the boot\nprocess.",
            "itemtype": "property",
            "name": "autoboot",
            "type": "Boolean",
            "default": "true",
            "access": "private",
            "tagname": "",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 290,
            "description": "Whether the application should be configured for the legacy \"globals mode\".\nUnder this mode, the Application object serves as a global namespace for all\nclasses.\n\n```javascript\nlet App = Ember.Application.create({\n  ...\n});\n\nApp.Router.reopen({\n  location: 'none'\n});\n\nApp.Router.map({\n  ...\n});\n\nApp.MyComponent = Ember.Component.extend({\n  ...\n});\n```\n\nThis flag also exposes other internal APIs that assumes the existence of\na special \"default instance\", like `App.__container__.lookup(...)`.\n\nThis option is currently not configurable, its value is derived from\nthe `autoboot` flag – disabling `autoboot` also implies opting-out of\nglobals mode support, although they are ultimately orthogonal concerns.\n\nSome of the global modes features are already deprecated in 1.x. The\nexistence of this flag is to untangle the globals mode code paths from\nthe autoboot code paths, so that these legacy features can be reviewed\nfor deprecation/removal separately.\n\nForcing the (autoboot=true, _globalsMode=false) here and running the tests\nwould reveal all the places where we are still relying on these legacy\nbehavior internally (mostly just tests).",
            "itemtype": "property",
            "name": "_globalsMode",
            "type": "Boolean",
            "default": "true",
            "access": "private",
            "tagname": "",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 362,
            "description": "Create an ApplicationInstance for this application.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "buildInstance",
            "return": {
                "description": "the application instance",
                "type": "Ember.ApplicationInstance"
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 375,
            "description": "Enable the legacy globals mode by allowing this application to act\nas a global namespace. See the docs on the `_globalsMode` property\nfor details.\n\nMost of these features are already deprecated in 1.x, so we can\nstop using them internally and try to remove them.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_prepareForGlobalsMode",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 419,
            "description": "Automatically kick-off the boot process for the application once the\nDOM has become ready.\n\nThe initialization itself is scheduled on the actions queue which\nensures that code-loading finishes before booting.\n\nIf you are asynchronously loading code, you should call `deferReadiness()`\nto defer booting, and then call `advanceReadiness()` once all of your code\nhas finished loading.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "waitForDOMReady",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 441,
            "description": "This is the autoboot flow:\n\n1. Boot the app by calling `this.boot()`\n2. Create an instance (or use the `__deprecatedInstance__` in globals mode)\n3. Boot the instance by calling `instance.boot()`\n4. Invoke the `App.ready()` callback\n5. Kick-off routing on the instance\n\nIdeally, this is all we would need to do:\n\n```javascript\n_autoBoot() {\n  this.boot().then(() => {\n    let instance = (this._globalsMode) ? this.__deprecatedInstance__ : this.buildInstance();\n    return instance.boot();\n  }).then((instance) => {\n    App.ready();\n    instance.startRouting();\n  });\n}\n```\n\nUnfortunately, we cannot actually write this because we need to participate\nin the \"synchronous\" boot process. While the code above would work fine on\nthe initial boot (i.e. DOM ready), when `App.reset()` is called, we need to\nboot a new instance synchronously (see the documentation on `_bootSync()`\nfor details).\n\nBecause of this restriction, the actual logic of this method is located\ninside `didBecomeReady()`.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "domReady",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 486,
            "description": "Use this to defer readiness until some condition is true.\n\nExample:\n\n```javascript\nlet App = Ember.Application.create();\n\nApp.deferReadiness();\n\n// Ember.$ is a reference to the jQuery object/function\nEmber.$.getJSON('/auth-token', function(token) {\n  App.token = token;\n  App.advanceReadiness();\n});\n```\n\nThis allows you to perform asynchronous setup logic and defer\nbooting your application until the setup has finished.\n\nHowever, if the setup requires a loading UI, it might be better\nto use the router for this purpose.",
            "itemtype": "method",
            "name": "deferReadiness",
            "access": "public",
            "tagname": "",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 518,
            "description": "Call `advanceReadiness` after any asynchronous setup logic has completed.\nEach call to `deferReadiness` must be matched by a call to `advanceReadiness`\nor the application will never become ready and routing will not begin.",
            "itemtype": "method",
            "name": "advanceReadiness",
            "see": [
                "{Ember.Application#deferReadiness}"
            ],
            "access": "public",
            "tagname": "",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 536,
            "description": "Initialize the application and return a promise that resolves with the `Ember.Application`\nobject when the boot process is complete.\n\nRun any application initializers and run the application load hook. These hooks may\nchoose to defer readiness. For example, an authentication hook might want to defer\nreadiness until the auth token has been retrieved.\n\nBy default, this method is called automatically on \"DOM ready\"; however, if autoboot\nis disabled, this is automatically called when the first application instance is\ncreated via `visit`.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "boot",
            "return": {
                "description": "",
                "type": "Promise<Ember.Application,Error>"
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 565,
            "description": "Unfortunately, a lot of existing code assumes the booting process is\n\"synchronous\". Specifically, a lot of tests assumes the last call to\n`app.advanceReadiness()` or `app.reset()` will result in the app being\nfully-booted when the current runloop completes.\n\nWe would like new code (like the `visit` API) to stop making this assumption,\nso we created the asynchronous version above that returns a promise. But until\nwe have migrated all the code, we would have to expose this method for use\n*internally* in places where we need to boot an app \"synchronously\".",
            "access": "private",
            "tagname": "",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 604,
            "description": "Reset the application. This is typically used only in tests. It cleans up\nthe application in the following order:\n\n1. Deactivate existing routes\n2. Destroy all objects in the container\n3. Create a new application container\n4. Re-route to the existing url\n\nTypical Example:\n\n```javascript\nlet App;\n\nrun(function() {\n  App = Ember.Application.create();\n});\n\nmodule('acceptance test', {\n  setup: function() {\n    App.reset();\n  }\n});\n\ntest('first test', function() {\n  // App is freshly reset\n});\n\ntest('second test', function() {\n  // App is again freshly reset\n});\n```\n\nAdvanced Example:\n\nOccasionally you may want to prevent the app from initializing during\nsetup. This could enable extra configuration, or enable asserting prior\nto the app becoming ready.\n\n```javascript\nlet App;\n\nrun(function() {\n  App = Ember.Application.create();\n});\n\nmodule('acceptance test', {\n  setup: function() {\n    run(function() {\n      App.reset();\n      App.deferReadiness();\n    });\n  }\n});\n\ntest('first test', function() {\n  ok(true, 'something before app is initialized');\n\n  run(function() {\n    App.advanceReadiness();\n  });\n\n  ok(true, 'something after app is initialized');\n});\n```",
            "itemtype": "method",
            "name": "reset",
            "access": "public",
            "tagname": "",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 695,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "didBecomeReady",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 746,
            "description": "Called when the Application has become ready, immediately before routing\nbegins. The call will be delayed until the DOM has become ready.",
            "itemtype": "event",
            "name": "ready",
            "access": "public",
            "tagname": "",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 772,
            "description": "Boot a new instance of `Ember.ApplicationInstance` for the current\napplication and navigate it to the given `url`. Returns a `Promise` that\nresolves with the instance when the initial routing and rendering is\ncomplete, or rejects with any error that occured during the boot process.\n\nWhen `autoboot` is disabled, calling `visit` would first cause the\napplication to boot, which runs the application initializers.\n\nThis method also takes a hash of boot-time configuration options for\ncustomizing the instance's behavior. See the documentation on\n`Ember.ApplicationInstance.BootOptions` for details.\n\n`Ember.ApplicationInstance.BootOptions` is an interface class that exists\npurely to document the available options; you do not need to construct it\nmanually. Simply pass a regular JavaScript object containing of the\ndesired options:\n\n```javascript\nMyApp.visit(\"/\", { location: \"none\", rootElement: \"#container\" });\n```\n\n### Supported Scenarios\n\nWhile the `BootOptions` class exposes a large number of knobs, not all\ncombinations of them are valid; certain incompatible combinations might\nresult in unexpected behavior.\n\nFor example, booting the instance in the full browser environment\nwhile specifying a foriegn `document` object (e.g. `{ isBrowser: true,\ndocument: iframe.contentDocument }`) does not work correctly today,\nlargely due to Ember's jQuery dependency.\n\nCurrently, there are three officially supported scenarios/configurations.\nUsages outside of these scenarios are not guaranteed to work, but please\nfeel free to file bug reports documenting your experience and any issues\nyou encountered to help expand support.\n\n#### Browser Applications (Manual Boot)\n\nThe setup is largely similar to how Ember works out-of-the-box. Normally,\nEmber will boot a default instance for your Application on \"DOM ready\".\nHowever, you can customize this behavior by disabling `autoboot`.\n\nFor example, this allows you to render a miniture demo of your application\ninto a specific area on your marketing website:\n\n```javascript\nimport MyApp from 'my-app';\n\n$(function() {\n  let App = MyApp.create({ autoboot: false });\n\n  let options = {\n    // Override the router's location adapter to prevent it from updating\n    // the URL in the address bar\n    location: 'none',\n\n    // Override the default `rootElement` on the app to render into a\n    // specific `div` on the page\n    rootElement: '#demo'\n  };\n\n  // Start the app at the special demo URL\n  App.visit('/demo', options);\n});\n````\n\nOr perhaps you might want to boot two instances of your app on the same\npage for a split-screen multiplayer experience:\n\n```javascript\nimport MyApp from 'my-app';\n\n$(function() {\n  let App = MyApp.create({ autoboot: false });\n\n  let sessionId = MyApp.generateSessionID();\n\n  let player1 = App.visit(`/matches/join?name=Player+1&session=${sessionId}`, { rootElement: '#left', location: 'none' });\n  let player2 = App.visit(`/matches/join?name=Player+2&session=${sessionId}`, { rootElement: '#right', location: 'none' });\n\n  Promise.all([player1, player2]).then(() => {\n    // Both apps have completed the initial render\n    $('#loading').fadeOut();\n  });\n});\n```\n\nDo note that each app instance maintains their own registry/container, so\nthey will run in complete isolation by default.\n\n#### Server-Side Rendering (also known as FastBoot)\n\nThis setup allows you to run your Ember app in a server environment using\nNode.js and render its content into static HTML for SEO purposes.\n\n```javascript\nconst HTMLSerializer = new SimpleDOM.HTMLSerializer(SimpleDOM.voidMap);\n\nfunction renderURL(url) {\n  let dom = new SimpleDOM.Document();\n  let rootElement = dom.body;\n  let options = { isBrowser: false, document: dom, rootElement: rootElement };\n\n  return MyApp.visit(options).then(instance => {\n    try {\n      return HTMLSerializer.serialize(rootElement.firstChild);\n    } finally {\n      instance.destroy();\n    }\n  });\n}\n```\n\nIn this scenario, because Ember does not have access to a global `document`\nobject in the Node.js environment, you must provide one explicitly. In practice,\nin the non-browser environment, the stand-in `document` object only need to\nimplement a limited subset of the full DOM API. The `SimpleDOM` library is known\nto work.\n\nSince there is no access to jQuery in the non-browser environment, you must also\nspecify a DOM `Element` object in the same `document` for the `rootElement` option\n(as opposed to a selector string like `\"body\"`).\n\nSee the documentation on the `isBrowser`, `document` and `rootElement` properties\non `Ember.ApplicationInstance.BootOptions` for details.\n\n#### Server-Side Resource Discovery\n\nThis setup allows you to run the routing layer of your Ember app in a server\nenvironment using Node.js and completely disable rendering. This allows you\nto simulate and discover the resources (i.e. AJAX requests) needed to fufill\na given request and eagerly \"push\" these resources to the client.\n\n```app/initializers/network-service.js\nimport BrowserNetworkService from 'app/services/network/browser';\nimport NodeNetworkService from 'app/services/network/node';\n\n// Inject a (hypothetical) service for abstracting all AJAX calls and use\n// the appropiate implementaion on the client/server. This also allows the\n// server to log all the AJAX calls made during a particular request and use\n// that for resource-discovery purpose.\n\nexport function initialize(application) {\n  if (window) { // browser\n    application.register('service:network', BrowserNetworkService);\n  } else { // node\n    application.register('service:network', NodeNetworkService);\n  }\n\n  application.inject('route', 'network', 'service:network');\n};\n\nexport default {\n  name: 'network-service',\n  initialize: initialize\n};\n```\n\n```app/routes/post.js\nimport Ember from 'ember';\n\n// An example of how the (hypothetical) service is used in routes.\n\nexport default Ember.Route.extend({\n  model(params) {\n    return this.network.fetch(`/api/posts/${params.post_id}.json`);\n  },\n\n  afterModel(post) {\n    if (post.isExternalContent) {\n      return this.network.fetch(`/api/external/?url=${post.externalURL}`);\n    } else {\n      return post;\n    }\n  }\n});\n```\n\n```javascript\n// Finally, put all the pieces together\n\nfunction discoverResourcesFor(url) {\n  return MyApp.visit(url, { isBrowser: false, shouldRender: false }).then(instance => {\n    let networkService = instance.lookup('service:network');\n    return networkService.requests; // => { \"/api/posts/123.json\": \"...\" }\n  });\n}\n```",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "visit",
            "params": [
                {
                    "name": "url",
                    "description": "The initial URL to navigate to",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Ember.ApplicationInstance.BootOptions"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<Ember.ApplicationInstance, Error>"
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 992,
            "description": "This creates a registry with the default Ember naming conventions.\n\nIt also configures the registry:\n\n* registered views are created every time they are looked up (they are\n  not singletons)\n* registered templates are not factories; the registered value is\n  returned directly.\n* the router receives the application as its `namespace` property\n* all controllers receive the router as their `target` and `controllers`\n  properties\n* all controllers receive the application as their `namespace` property\n* the application view receives the application controller as its\n  `controller` property\n* the application view receives the application template as its\n  `defaultTemplate` property",
            "itemtype": "method",
            "name": "buildRegistry",
            "static": 1,
            "params": [
                {
                    "name": "namespace",
                    "description": "the application for which to\n  build the registry",
                    "type": "Ember.Application"
                }
            ],
            "return": {
                "description": "the built registry",
                "type": "Ember.Registry"
            },
            "access": "private",
            "tagname": "",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/engine-instance.js",
            "line": 29,
            "description": "The base `Engine` for which this is an instance.",
            "itemtype": "property",
            "name": "engine",
            "type": "Ember.Engine",
            "access": "private",
            "tagname": "",
            "class": "Ember.EngineInstance",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/engine-instance.js",
            "line": 61,
            "description": "Initialize the `Ember.EngineInstance` and return a promise that resolves\nwith the instance itself when the boot process is complete.\n\nThe primary task here is to run any registered instance initializers.\n\nSee the documentation on `BootOptions` for the options it takes.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "boot",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<Ember.EngineInstance,Error>"
            },
            "class": "Ember.EngineInstance",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/engine-instance.js",
            "line": 82,
            "description": "Unfortunately, a lot of existing code assumes booting an instance is\nsynchronous – specifically, a lot of tests assume the last call to\n`app.advanceReadiness()` or `app.reset()` will result in a new instance\nbeing fully-booted when the current runloop completes.\n\nWe would like new code (like the `visit` API) to stop making this\nassumption, so we created the asynchronous version above that returns a\npromise. But until we have migrated all the code, we would have to expose\nthis method for use *internally* in places where we need to boot an instance\nsynchronously.",
            "access": "private",
            "tagname": "",
            "class": "Ember.EngineInstance",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/engine-instance.js",
            "line": 116,
            "description": "Unregister a factory.\n\nOverrides `RegistryProxy#unregister` in order to clear any cached instances\nof the unregistered factory.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "unregister",
            "params": [
                {
                    "name": "fullName",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Ember.EngineInstance",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/engine-instance.js",
            "line": 131,
            "access": "private",
            "tagname": "",
            "class": "Ember.EngineInstance",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/engine-instance.js",
            "line": 139,
            "description": "Build a new `Ember.EngineInstance` that's a child of this instance.\n\nEngines must be registered by name with their parent engine\n(or application).",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "buildChildEngineInstance",
            "params": [
                {
                    "name": "name",
                    "description": "the registered name of the engine.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "options provided to the engine instance.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Ember.EngineInstance,Error"
            },
            "class": "Ember.EngineInstance",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/engine-instance.js",
            "line": 165,
            "description": "Clone dependencies shared between an engine instance and its parent.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "cloneParentDependencies",
            "class": "Ember.EngineInstance",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/engine-instance.js",
            "line": 201,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "setupRegistry",
            "params": [
                {
                    "name": "registry",
                    "description": "",
                    "type": "Registry"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "BootOptions"
                }
            ],
            "class": "Ember.EngineInstance",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/engine-parent.js",
            "line": 5,
            "description": "`getEngineParent` retrieves an engine instance's parent instance.",
            "itemtype": "method",
            "name": "getEngineParent",
            "params": [
                {
                    "name": "engine",
                    "description": "An engine instance.",
                    "type": "EngineInstance"
                }
            ],
            "return": {
                "description": "The parent engine instance.",
                "type": "EngineInstance"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember",
            "module": "ember"
        },
        {
            "file": "packages/ember-application/lib/system/engine-parent.js",
            "line": 18,
            "description": "`setEngineParent` sets an engine instance's parent instance.",
            "itemtype": "method",
            "name": "setEngineParent",
            "params": [
                {
                    "name": "engine",
                    "description": "An engine instance.",
                    "type": "EngineInstance"
                },
                {
                    "name": "parent",
                    "description": "The parent engine instance.",
                    "type": "EngineInstance"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember",
            "module": "ember"
        },
        {
            "file": "packages/ember-application/lib/system/engine.js",
            "line": 58,
            "description": "A private flag indicating whether an engine's initializers have run yet.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_initializersRan",
            "class": "Ember.Engine",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/engine.js",
            "line": 66,
            "description": "Ensure that initializers are run once, and only once, per engine.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "ensureInitializers",
            "class": "Ember.Engine",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/engine.js",
            "line": 79,
            "description": "Create an EngineInstance for this engine.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "buildInstance",
            "return": {
                "description": "the engine instance",
                "type": "Ember.EngineInstance"
            },
            "class": "Ember.Engine",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/engine.js",
            "line": 92,
            "description": "Build and configure the registry for the current engine.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "buildRegistry",
            "return": {
                "description": "the configured registry",
                "type": "Ember.Registry"
            },
            "class": "Ember.Engine",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/engine.js",
            "line": 105,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "initializer",
            "class": "Ember.Engine",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/engine.js",
            "line": 113,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "instanceInitializer",
            "class": "Ember.Engine",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/engine.js",
            "line": 121,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "runInitializers",
            "class": "Ember.Engine",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/engine.js",
            "line": 143,
            "access": "private",
            "tagname": "",
            "since": "1.12.0",
            "itemtype": "method",
            "name": "runInstanceInitializers",
            "class": "Ember.Engine",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/engine.js",
            "line": 174,
            "description": "The goal of initializers should be to register dependencies and injections.\nThis phase runs once. Because these initializers may load code, they are\nallowed to defer application readiness and advance it. If you need to access\nthe container or store you should use an InstanceInitializer that will be run\nafter all initializers and therefore after all code is loaded and the app is\nready.\n\nInitializer receives an object which has the following attributes:\n`name`, `before`, `after`, `initialize`. The only required attribute is\n`initialize`, all others are optional.\n\n* `name` allows you to specify under which name the initializer is registered.\nThis must be a unique name, as trying to register two initializers with the\nsame name will result in an error.\n\n```javascript\nEmber.Application.initializer({\n  name: 'namedInitializer',\n\n  initialize: function(application) {\n    Ember.debug('Running namedInitializer!');\n  }\n});\n```\n\n* `before` and `after` are used to ensure that this initializer is ran prior\nor after the one identified by the value. This value can be a single string\nor an array of strings, referencing the `name` of other initializers.\n\nAn example of ordering initializers, we create an initializer named `first`:\n\n```javascript\nEmber.Application.initializer({\n  name: 'first',\n\n  initialize: function(application) {\n    Ember.debug('First initializer!');\n  }\n});\n\n// DEBUG: First initializer!\n```\n\nWe add another initializer named `second`, specifying that it should run\nafter the initializer named `first`:\n\n```javascript\nEmber.Application.initializer({\n  name: 'second',\n  after: 'first',\n\n  initialize: function(application) {\n    Ember.debug('Second initializer!');\n  }\n});\n\n// DEBUG: First initializer!\n// DEBUG: Second initializer!\n```\n\nAfterwards we add a further initializer named `pre`, this time specifying\nthat it should run before the initializer named `first`:\n\n```javascript\nEmber.Application.initializer({\n  name: 'pre',\n  before: 'first',\n\n  initialize: function(application) {\n    Ember.debug('Pre initializer!');\n  }\n});\n\n// DEBUG: Pre initializer!\n// DEBUG: First initializer!\n// DEBUG: Second initializer!\n```\n\nFinally we add an initializer named `post`, specifying it should run after\nboth the `first` and the `second` initializers:\n\n```javascript\nEmber.Application.initializer({\n  name: 'post',\n  after: ['first', 'second'],\n\n  initialize: function(application) {\n    Ember.debug('Post initializer!');\n  }\n});\n\n// DEBUG: Pre initializer!\n// DEBUG: First initializer!\n// DEBUG: Second initializer!\n// DEBUG: Post initializer!\n```\n\n* `initialize` is a callback function that receives one argument,\n  `application`, on which you can operate.\n\nExample of using `application` to register an adapter:\n\n```javascript\nEmber.Application.initializer({\n  name: 'api-adapter',\n\n  initialize: function(application) {\n    application.register('api-adapter:main', ApiAdapter);\n  }\n});\n```",
            "itemtype": "method",
            "name": "initializer",
            "params": [
                {
                    "name": "initializer",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Ember.Engine",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/engine.js",
            "line": 294,
            "description": "Instance initializers run after all initializers have run. Because\ninstance initializers run after the app is fully set up. We have access\nto the store, container, and other items. However, these initializers run\nafter code has loaded and are not allowed to defer readiness.\n\nInstance initializer receives an object which has the following attributes:\n`name`, `before`, `after`, `initialize`. The only required attribute is\n`initialize`, all others are optional.\n\n* `name` allows you to specify under which name the instanceInitializer is\nregistered. This must be a unique name, as trying to register two\ninstanceInitializer with the same name will result in an error.\n\n```javascript\nEmber.Application.instanceInitializer({\n  name: 'namedinstanceInitializer',\n\n  initialize: function(application) {\n    Ember.debug('Running namedInitializer!');\n  }\n});\n```\n\n* `before` and `after` are used to ensure that this initializer is ran prior\nor after the one identified by the value. This value can be a single string\nor an array of strings, referencing the `name` of other initializers.\n\n* See Ember.Application.initializer for discussion on the usage of before\nand after.\n\nExample instanceInitializer to preload data into the store.\n\n```javascript\nEmber.Application.initializer({\n  name: 'preload-data',\n\n  initialize: function(application) {\n    var userConfig, userConfigEncoded, store;\n    // We have a HTML escaped JSON representation of the user's basic\n    // configuration generated server side and stored in the DOM of the main\n    // index.html file. This allows the app to have access to a set of data\n    // without making any additional remote calls. Good for basic data that is\n    // needed for immediate rendering of the page. Keep in mind, this data,\n    // like all local models and data can be manipulated by the user, so it\n    // should not be relied upon for security or authorization.\n    //\n    // Grab the encoded data from the meta tag\n    userConfigEncoded = Ember.$('head meta[name=app-user-config]').attr('content');\n    // Unescape the text, then parse the resulting JSON into a real object\n    userConfig = JSON.parse(unescape(userConfigEncoded));\n    // Lookup the store\n    store = application.lookup('service:store');\n    // Push the encoded JSON into the store\n    store.pushPayload(userConfig);\n  }\n});\n```",
            "itemtype": "method",
            "name": "instanceInitializer",
            "params": [
                {
                    "name": "instanceInitializer",
                    "description": ""
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Ember.Engine",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/engine.js",
            "line": 359,
            "description": "This creates a registry with the default Ember naming conventions.\n\nIt also configures the registry:\n\n* registered views are created every time they are looked up (they are\n  not singletons)\n* registered templates are not factories; the registered value is\n  returned directly.\n* the router receives the application as its `namespace` property\n* all controllers receive the router as their `target` and `controllers`\n  properties\n* all controllers receive the application as their `namespace` property\n* the application view receives the application controller as its\n  `controller` property\n* the application view receives the application template as its\n  `defaultTemplate` property",
            "itemtype": "method",
            "name": "buildRegistry",
            "static": 1,
            "params": [
                {
                    "name": "namespace",
                    "description": "the application for which to\n  build the registry",
                    "type": "Ember.Application"
                }
            ],
            "return": {
                "description": "the built registry",
                "type": "Ember.Registry"
            },
            "access": "private",
            "tagname": "",
            "class": "Ember.Engine",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/engine.js",
            "line": 399,
            "description": "Set this to provide an alternate class to `Ember.DefaultResolver`",
            "deprecated": true,
            "deprecationMessage": "Use 'Resolver' instead",
            "itemtype": "property",
            "name": "resolver",
            "access": "public",
            "tagname": "",
            "class": "Ember.Engine",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/engine.js",
            "line": 409,
            "description": "Set this to provide an alternate class to `Ember.DefaultResolver`",
            "itemtype": "property",
            "name": "resolver",
            "access": "public",
            "tagname": "",
            "class": "Ember.Engine",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/engine.js",
            "line": 418,
            "description": "This function defines the default lookup rules for container lookups:\n\n* templates are looked up on `Ember.TEMPLATES`\n* other names are looked up on the application after classifying the name.\n  For example, `controller:post` looks up `App.PostController` by default.\n* if the default lookup fails, look for registered classes on the container\n\nThis allows the application to register default injections in the container\nthat could be overridden by the normal naming convention.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "resolverFor",
            "params": [
                {
                    "name": "namespace",
                    "description": "the namespace to look for classes",
                    "type": "Ember.Namespace"
                }
            ],
            "return": {
                "description": "the resolved value for a given lookup",
                "type": "*"
            },
            "class": "Ember.Engine",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 106,
            "description": "This will be set to the Application instance when it is\ncreated.",
            "itemtype": "property",
            "name": "namespace",
            "access": "public",
            "tagname": "",
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 159,
            "description": "This method is called via the container's resolver method.\nIt parses the provided `fullName` and then looks up and\nreturns the appropriate template or class.",
            "itemtype": "method",
            "name": "resolve",
            "params": [
                {
                    "name": "fullName",
                    "description": "the lookup string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the resolved factory",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 191,
            "description": "Convert the string name of the form 'type:name' to\na Javascript object with the parsed aspects of the name\nbroken out.",
            "params": [
                {
                    "name": "fullName",
                    "description": "the lookup string",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "parseName",
            "access": "protected",
            "tagname": "",
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 249,
            "description": "Returns a human-readable description for a fullName. Used by the\nApplication namespace in assertions to describe the\nprecise name of the class that Ember is looking for, rather than\ncontainer keys.",
            "params": [
                {
                    "name": "fullName",
                    "description": "the lookup string",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "lookupDescription",
            "access": "protected",
            "tagname": "",
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 280,
            "description": "Given a parseName object (output from `parseName`), apply\nthe conventions expected by `Ember.Router`",
            "params": [
                {
                    "name": "parsedName",
                    "description": "a parseName object with the parsed\n  fullName lookup string",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "useRouterNaming",
            "access": "protected",
            "tagname": "",
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 295,
            "description": "Look up the template in Ember.TEMPLATES",
            "params": [
                {
                    "name": "parsedName",
                    "description": "a parseName object with the parsed\n  fullName lookup string",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "resolveTemplate",
            "access": "protected",
            "tagname": "",
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 309,
            "description": "Lookup the view using `resolveOther`",
            "params": [
                {
                    "name": "parsedName",
                    "description": "a parseName object with the parsed\n  fullName lookup string",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "resolveView",
            "access": "protected",
            "tagname": "",
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 322,
            "description": "Lookup the controller using `resolveOther`",
            "params": [
                {
                    "name": "parsedName",
                    "description": "a parseName object with the parsed\n  fullName lookup string",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "resolveController",
            "access": "protected",
            "tagname": "",
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 334,
            "description": "Lookup the route using `resolveOther`",
            "params": [
                {
                    "name": "parsedName",
                    "description": "a parseName object with the parsed\n  fullName lookup string",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "resolveRoute",
            "access": "protected",
            "tagname": "",
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 347,
            "description": "Lookup the model on the Application namespace",
            "params": [
                {
                    "name": "parsedName",
                    "description": "a parseName object with the parsed\n  fullName lookup string",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "resolveModel",
            "access": "protected",
            "tagname": "",
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 361,
            "description": "Look up the specified object (from parsedName) on the appropriate\nnamespace (usually on the Application)",
            "params": [
                {
                    "name": "parsedName",
                    "description": "a parseName object with the parsed\n  fullName lookup string",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "resolveHelper",
            "access": "protected",
            "tagname": "",
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 373,
            "description": "Look up the specified object (from parsedName) on the appropriate\nnamespace (usually on the Application)",
            "params": [
                {
                    "name": "parsedName",
                    "description": "a parseName object with the parsed\n  fullName lookup string",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "resolveOther",
            "access": "protected",
            "tagname": "",
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 393,
            "itemtype": "method",
            "name": "_logLookup",
            "params": [
                {
                    "name": "found",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "parsedName",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 417,
            "description": "Used to iterate all items of a given type.",
            "itemtype": "method",
            "name": "knownForType",
            "params": [
                {
                    "name": "type",
                    "description": "the type to search for",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 444,
            "description": "Converts provided name from the backing namespace into a container lookup name.\n\nExamples:\n\nApp.FooBarHelper -> helper:foo-bar\nApp.THelper -> helper:t",
            "itemtype": "method",
            "name": "translateToContainerFullname",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-debug/lib/deprecate.js",
            "line": 97,
            "description": "Display a deprecation warning with the provided message and a stack trace\n(Chrome and Firefox only).\n\n* In a production build, this method is defined as an empty function (NOP).\nUses of this method in Ember itself are stripped from the ember.prod.js build.",
            "itemtype": "method",
            "name": "deprecate",
            "params": [
                {
                    "name": "message",
                    "description": "A description of the deprecation.",
                    "type": "String"
                },
                {
                    "name": "test",
                    "description": "A boolean. If falsy, the deprecation will be displayed.",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "A unique id for this deprecation. The id can be\n  used by Ember debugging tools to change the behavior (raise, log or silence)\n  for that specific deprecation. The id should be namespaced by dots, e.g.\n  \"view.helper.select\".",
                            "type": "String"
                        },
                        {
                            "name": "until",
                            "description": "The version of Ember when this deprecation\n  warning will be removed.",
                            "type": "String"
                        },
                        {
                            "name": "url",
                            "description": "An optional url to the transition guide on the\n  emberjs.com website.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "access": "public",
            "tagname": "",
            "since": "1.0.0",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-debug"
        },
        {
            "file": "packages/ember-debug/lib/index.js",
            "line": 33,
            "description": "Define an assertion that will throw an exception if the condition is not met.\n\n* In a production build, this method is defined as an empty function (NOP).\nUses of this method in Ember itself are stripped from the ember.prod.js build.\n\n```javascript\n// Test for truthiness\nEmber.assert('Must pass a valid object', obj);\n\n// Fail unconditionally\nEmber.assert('This code path should never be run');\n```",
            "itemtype": "method",
            "name": "assert",
            "params": [
                {
                    "name": "desc",
                    "description": "A description of the assertion. This will become\n  the text of the Error thrown if the assertion fails.",
                    "type": "String"
                },
                {
                    "name": "test",
                    "description": "Must be truthy for the assertion to pass. If\n  falsy, an exception will be thrown.",
                    "type": "Boolean"
                }
            ],
            "access": "public",
            "tagname": "",
            "since": "1.0.0",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-debug"
        },
        {
            "file": "packages/ember-debug/lib/index.js",
            "line": 61,
            "description": "Display a debug notice.\n\n* In a production build, this method is defined as an empty function (NOP).\nUses of this method in Ember itself are stripped from the ember.prod.js build.\n\n```javascript\nEmber.debug('I\\'m a debug notice!');\n```",
            "itemtype": "method",
            "name": "debug",
            "params": [
                {
                    "name": "message",
                    "description": "A debug message to display.",
                    "type": "String"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-debug"
        },
        {
            "file": "packages/ember-debug/lib/index.js",
            "line": 79,
            "description": "Display an info notice.\n\n* In a production build, this method is defined as an empty function (NOP).\nUses of this method in Ember itself are stripped from the ember.prod.js build.",
            "itemtype": "method",
            "name": "info",
            "access": "private",
            "tagname": "",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-debug"
        },
        {
            "file": "packages/ember-debug/lib/index.js",
            "line": 92,
            "description": "Alias an old, deprecated method with its new counterpart.\n\nDisplay a deprecation warning with the provided message and a stack trace\n(Chrome and Firefox only) when the assigned method is called.\n\n* In a production build, this method is defined as an empty function (NOP).\n\n```javascript\nEmber.oldMethod = Ember.deprecateFunc('Please use the new, updated method', Ember.newMethod);\n```",
            "itemtype": "method",
            "name": "deprecateFunc",
            "params": [
                {
                    "name": "message",
                    "description": "A description of the deprecation.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The options object for Ember.deprecate.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "func",
                    "description": "The new function called to replace its deprecated counterpart.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A new function that wraps the original function with a deprecation warning",
                "type": "Function"
            },
            "access": "private",
            "tagname": "",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-debug"
        },
        {
            "file": "packages/ember-debug/lib/index.js",
            "line": 128,
            "description": "Run a function meant for debugging.\n\n* In a production build, this method is defined as an empty function (NOP).\nUses of this method in Ember itself are stripped from the ember.prod.js build.\n\n```javascript\nEmber.runInDebug(() => {\n  Ember.Component.reopen({\n    didInsertElement() {\n      console.log(\"I'm happy\");\n    }\n  });\n});\n```",
            "itemtype": "method",
            "name": "runInDebug",
            "params": [
                {
                    "name": "func",
                    "description": "The function to be executed.",
                    "type": "Function"
                }
            ],
            "since": "1.5.0",
            "access": "public",
            "tagname": "",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-debug"
        },
        {
            "file": "packages/ember-debug/lib/index.js",
            "line": 165,
            "description": "Will call `Ember.warn()` if ENABLE_OPTIONAL_FEATURES or\nany specific FEATURES flag is truthy.\n\nThis method is called automatically in debug canary builds.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_warnIfUsingStrippedFeatureFlags",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-debug"
        },
        {
            "file": "packages/ember-debug/lib/index.js",
            "line": 229,
            "description": "Allows for runtime registration of handler functions that override the default deprecation behavior.\nDeprecations are invoked by calls to [Ember.deprecate](http://emberjs.com/api/classes/Ember.html#method_deprecate).\nThe following example demonstrates its usage by registering a handler that throws an error if the\nmessage contains the word \"should\", otherwise defers to the default handler.\n\n```javascript\nEmber.Debug.registerDeprecationHandler((message, options, next) => {\n  if (message.indexOf('should') !== -1) {\n    throw new Error(`Deprecation message with should: ${message}`);\n  } else {\n    // defer to whatever handler was registered before this one\n    next(message, options);\n  }\n});\n```\n\nThe handler function takes the following arguments:\n\n<ul>\n  <li> <code>message</code> - The message received from the deprecation call.</li>\n  <li> <code>options</code> - An object passed in with the deprecation call containing additional information including:</li>\n    <ul>\n      <li> <code>id</code> - An id of the deprecation in the form of <code>package-name.specific-deprecation</code>.</li>\n      <li> <code>until</code> - The Ember version number the feature and deprecation will be removed in.</li>\n    </ul>\n  <li> <code>next</code> - A function that calls into the previously registered handler.</li>\n</ul>",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "registerDeprecationHandler",
            "params": [
                {
                    "name": "handler",
                    "description": "A function to handle deprecation calls.",
                    "type": "Function"
                }
            ],
            "since": "2.1.0",
            "class": "Ember.Debug",
            "module": "ember",
            "submodule": "ember-debug"
        },
        {
            "file": "packages/ember-debug/lib/index.js",
            "line": 265,
            "description": "Allows for runtime registration of handler functions that override the default warning behavior.\nWarnings are invoked by calls made to [Ember.warn](http://emberjs.com/api/classes/Ember.html#method_warn).\nThe following example demonstrates its usage by registering a handler that does nothing overriding Ember's\ndefault warning behavior.\n\n```javascript\n// next is not called, so no warnings get the default behavior\nEmber.Debug.registerWarnHandler(() => {});\n```\n\nThe handler function takes the following arguments:\n\n<ul>\n  <li> <code>message</code> - The message received from the warn call. </li>\n  <li> <code>options</code> - An object passed in with the warn call containing additional information including:</li>\n    <ul>\n      <li> <code>id</code> - An id of the warning in the form of <code>package-name.specific-warning</code>.</li>\n    </ul>\n  <li> <code>next</code> - A function that calls into the previously registered handler.</li>\n</ul>",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "registerWarnHandler",
            "params": [
                {
                    "name": "handler",
                    "description": "A function to handle warnings.",
                    "type": "Function"
                }
            ],
            "since": "2.1.0",
            "class": "Ember.Debug",
            "module": "ember",
            "submodule": "ember-debug"
        },
        {
            "file": "packages/ember-debug/lib/warn.js",
            "line": 26,
            "description": "Display a warning with the provided message.\n\n* In a production build, this method is defined as an empty function (NOP).\nUses of this method in Ember itself are stripped from the ember.prod.js build.",
            "itemtype": "method",
            "name": "warn",
            "params": [
                {
                    "name": "message",
                    "description": "A warning to display.",
                    "type": "String"
                },
                {
                    "name": "test",
                    "description": "An optional boolean. If falsy, the warning\n  will be displayed.",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "An object that can be used to pass a unique\n  `id` for this warning.  The `id` can be used by Ember debugging tools\n  to change the behavior (raise, log, or silence) for that specific warning.\n  The `id` should be namespaced by dots, e.g. \"ember-debug.feature-flag-with-features-stripped\"",
                    "type": "Object"
                }
            ],
            "access": "public",
            "tagname": "",
            "since": "1.0.0",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-debug"
        },
        {
            "file": "packages/ember-extension-support/lib/container_debug_adapter.js",
            "line": 51,
            "description": "The resolver instance of the application\nbeing debugged. This property will be injected\non creation.",
            "itemtype": "property",
            "name": "resolver",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Ember.ContainerDebugAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/container_debug_adapter.js",
            "line": 62,
            "description": "Returns true if it is possible to catalog a list of available\nclasses in the resolver for a given type.",
            "itemtype": "method",
            "name": "canCatalogEntriesByType",
            "params": [
                {
                    "name": "type",
                    "description": "The type. e.g. \"model\", \"controller\", \"route\".",
                    "type": "String"
                }
            ],
            "return": {
                "description": "whether a list is available for this type.",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember.ContainerDebugAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/container_debug_adapter.js",
            "line": 79,
            "description": "Returns the available classes a given type.",
            "itemtype": "method",
            "name": "catalogEntriesByType",
            "params": [
                {
                    "name": "type",
                    "description": "The type. e.g. \"model\", \"controller\", \"route\".",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An array of strings.",
                "type": "Array"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember.ContainerDebugAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 67,
            "description": "The container-debug-adapter which is used\nto list all models.",
            "itemtype": "property",
            "name": "containerDebugAdapter",
            "default": "undefined",
            "since": "1.5.0",
            "access": "public",
            "tagname": "",
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 78,
            "description": "The number of attributes to send\nas columns. (Enough to make the record\nidentifiable).",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "attributeLimit",
            "default": "3",
            "since": "1.3.0",
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 90,
            "description": "Ember Data > v1.0.0-beta.18\nrequires string model names to be passed\naround instead of the actual factories.\n\nThis is a stamp for the Ember Inspector\nto differentiate between the versions\nto be able to support older versions too.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "acceptsModelName",
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 104,
            "description": "Stores all methods that clear observers.\nThese methods will be called on destruction.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "releaseMethods",
            "since": "1.3.0",
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 114,
            "description": "Specifies how records can be filtered.\nRecords returned will need to have a `filterValues`\nproperty with a key for every name in the returned array.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getFilters",
            "return": {
                "description": "List of objects defining filters.\n The object should have a `name` and `desc` property.",
                "type": "Array"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 128,
            "description": "Fetch the model types and observe them for changes.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "watchModelTypes",
            "params": [
                {
                    "name": "typesAdded",
                    "description": "Callback to call to add types.\nTakes an array of objects containing wrapped types (returned from `wrapModelType`).",
                    "type": "Function"
                },
                {
                    "name": "typesUpdated",
                    "description": "Callback to call when a type has changed.\nTakes an array of objects containing wrapped types.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Method to call to remove all observers",
                "type": "Function"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 171,
            "description": "Fetch the records of a given type and observe them for changes.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "watchRecords",
            "params": [
                {
                    "name": "modelName",
                    "description": "The model name.",
                    "type": "String"
                },
                {
                    "name": "recordsAdded",
                    "description": "Callback to call to add records.\nTakes an array of objects containing wrapped records.\nThe object should have the following properties:\n  columnValues: {Object} The key and value of a table cell.\n  object: {Object} The actual record object.",
                    "type": "Function"
                },
                {
                    "name": "recordsUpdated",
                    "description": "Callback to call when a record has changed.\nTakes an array of objects containing wrapped records.",
                    "type": "Function"
                },
                {
                    "name": "recordsRemoved",
                    "description": "Callback to call when a record has removed.\nTakes the following parameters:\n  index: The array index where the records were removed.\n  count: The number of records removed.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Method to call to remove all observers.",
                "type": "Function"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 238,
            "description": "Clear all observers before destruction",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "willDestroy",
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 248,
            "description": "Detect whether a class is a model.\n\nTest that against the model class\nof your persistence library.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "detect",
            "params": [
                {
                    "name": "klass",
                    "description": "The class to test.",
                    "type": "Class"
                }
            ],
            "return": {
                "description": "boolean Whether the class is a model class or not."
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 263,
            "description": "Get the columns for a given model type.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "columnsForType",
            "params": [
                {
                    "name": "type",
                    "description": "The model type.",
                    "type": "Class"
                }
            ],
            "return": {
                "description": "An array of columns of the following format:\n name: {String} The name of the column.\n desc: {String} Humanized description (what would show in a table column name).",
                "type": "Array"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 277,
            "description": "Adds observers to a model type class.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "observeModelType",
            "params": [
                {
                    "name": "modelName",
                    "description": "The model type name.",
                    "type": "String"
                },
                {
                    "name": "typesUpdated",
                    "description": "Called when a type is modified.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The function to call to remove observers.",
                "type": "Function"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 310,
            "description": "Wraps a given model type and observes changes to it.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "wrapModelType",
            "params": [
                {
                    "name": "klass",
                    "description": "A model class.",
                    "type": "Class"
                },
                {
                    "name": "modelName",
                    "description": "Name of the class.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Contains the wrapped type and the function to remove observers\nFormat:\n  type: {Object} The wrapped type.\n    The wrapped type has the following format:\n      name: {String} The name of the type.\n      count: {Integer} The number of records available.\n      columns: {Columns} An array of columns to describe the record.\n      object: {Class} The actual Model type class.\n  release: {Function} The function to remove observers.",
                "type": "Object"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 342,
            "description": "Fetches all models defined in the application.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getModelTypes",
            "return": {
                "description": "Array of model types.",
                "type": "Array"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 371,
            "description": "Loops over all namespaces and all objects\nattached to them.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_getObjectsOnNamespaces",
            "return": {
                "description": "Array of model type strings.",
                "type": "Array"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 400,
            "description": "Fetches all loaded records for a given type.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getRecords",
            "return": {
                "description": "An array of records.\n This array will be observed for changes,\n so it should update when new records are added/removed.",
                "type": "Array"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 413,
            "description": "Wraps a record and observers changes to it.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "wrapRecord",
            "params": [
                {
                    "name": "record",
                    "description": "The record instance.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The wrapped record. Format:\ncolumnValues: {Array}\nsearchKeywords: {Array}",
                "type": "Object"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 434,
            "description": "Gets the values for each column.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getRecordColumnValues",
            "return": {
                "description": "Keys should match column names defined\nby the model type.",
                "type": "Object"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 446,
            "description": "Returns keywords to match when searching records.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getRecordKeywords",
            "return": {
                "description": "Relevant keywords for search.",
                "type": "Array"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 457,
            "description": "Returns the values of filters defined by `getFilters`.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getRecordFilterValues",
            "params": [
                {
                    "name": "record",
                    "description": "The record instance.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The filter values.",
                "type": "Object"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 469,
            "description": "Each record can have a color that represents its state.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getRecordColor",
            "params": [
                {
                    "name": "record",
                    "description": "The record instance",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The records color.\n  Possible options: black, red, blue, green.",
                "type": "String"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 482,
            "description": "Observes all relevant properties and re-sends the wrapped record\nwhen a change occurs.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "observerRecord",
            "params": [
                {
                    "name": "record",
                    "description": "The record instance.",
                    "type": "Object"
                },
                {
                    "name": "recordUpdated",
                    "description": "The callback to call when a record is updated.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The function to call to remove all observers.",
                "type": "Function"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/components/link-to.js",
            "line": 6,
            "description": "The `{{link-to}}` component renders a link to the supplied\n`routeName` passing an optionally supplied model to the\nroute as its `model` context of the route. The block\nfor `{{link-to}}` becomes the innerHTML of the rendered\nelement:\n\n```handlebars\n{{#link-to 'photoGallery'}}\n  Great Hamster Photos\n{{/link-to}}\n```\n\nYou can also use an inline form of `{{link-to}}` component by\npassing the link text as the first argument\nto the component:\n\n```handlebars\n{{link-to 'Great Hamster Photos' 'photoGallery'}}\n```\n\nBoth will result in:\n\n```html\n<a href=\"/hamster-photos\">\n  Great Hamster Photos\n</a>\n```\n\n### Supplying a tagName\nBy default `{{link-to}}` renders an `<a>` element. This can\nbe overridden for a single use of `{{link-to}}` by supplying\na `tagName` option:\n\n```handlebars\n{{#link-to 'photoGallery' tagName=\"li\"}}\n  Great Hamster Photos\n{{/link-to}}\n```\n\n```html\n<li>\n  Great Hamster Photos\n</li>\n```\n\nTo override this option for your entire application, see\n\"Overriding Application-wide Defaults\".\n\n### Disabling the `link-to` component\nBy default `{{link-to}}` is enabled.\nany passed value to the `disabled` component property will disable\nthe `link-to` component.\n\nstatic use: the `disabled` option:\n\n```handlebars\n{{#link-to 'photoGallery' disabled=true}}\n  Great Hamster Photos\n{{/link-to}}\n```\n\ndynamic use: the `disabledWhen` option:\n\n```handlebars\n{{#link-to 'photoGallery' disabledWhen=controller.someProperty}}\n  Great Hamster Photos\n{{/link-to}}\n```\n\nany passed value to `disabled` will disable it except `undefined`.\nto ensure that only `true` disable the `link-to` component you can\noverride the global behaviour of `Ember.LinkComponent`.\n\n```javascript\nEmber.LinkComponent.reopen({\n  disabled: Ember.computed(function(key, value) {\n    if (value !== undefined) {\n      this.set('_isDisabled', value === true);\n    }\n    return value === true ? get(this, 'disabledClass') : false;\n  })\n});\n```\n\nsee \"Overriding Application-wide Defaults\" for more.\n\n### Handling `href`\n`{{link-to}}` will use your application's Router to\nfill the element's `href` property with a url that\nmatches the path to the supplied `routeName` for your\nrouter's configured `Location` scheme, which defaults\nto Ember.HashLocation.\n\n### Handling current route\n`{{link-to}}` will apply a CSS class name of 'active'\nwhen the application's current route matches\nthe supplied routeName. For example, if the application's\ncurrent route is 'photoGallery.recent' the following\nuse of `{{link-to}}`:\n\n```handlebars\n{{#link-to 'photoGallery.recent'}}\n  Great Hamster Photos\n{{/link-to}}\n```\n\nwill result in\n\n```html\n<a href=\"/hamster-photos/this-week\" class=\"active\">\n  Great Hamster Photos\n</a>\n```\n\nThe CSS class name used for active classes can be customized\nfor a single use of `{{link-to}}` by passing an `activeClass`\noption:\n\n```handlebars\n{{#link-to 'photoGallery.recent' activeClass=\"current-url\"}}\n  Great Hamster Photos\n{{/link-to}}\n```\n\n```html\n<a href=\"/hamster-photos/this-week\" class=\"current-url\">\n  Great Hamster Photos\n</a>\n```\n\nTo override this option for your entire application, see\n\"Overriding Application-wide Defaults\".\n\n### Keeping a link active for other routes\n\nIf you need a link to be 'active' even when it doesn't match\nthe current route, you can use the `current-when` argument.\n\n```handlebars\n{{#link-to 'photoGallery' current-when='photos'}}\n  Photo Gallery\n{{/link-to}}\n```\n\nThis may be helpful for keeping links active for:\n\n* non-nested routes that are logically related\n* some secondary menu approaches\n* 'top navigation' with 'sub navigation' scenarios\n\nA link will be active if `current-when` is `true` or the current\nroute is the route this link would transition to.\n\nTo match multiple routes 'space-separate' the routes:\n\n```handlebars\n{{#link-to 'gallery' current-when='photos drawings paintings'}}\n  Art Gallery\n{{/link-to}}\n```\n\n### Supplying a model\nAn optional model argument can be used for routes whose\npaths contain dynamic segments. This argument will become\nthe model context of the linked route:\n\n```javascript\nRouter.map(function() {\n  this.route(\"photoGallery\", {path: \"hamster-photos/:photo_id\"});\n});\n```\n\n```handlebars\n{{#link-to 'photoGallery' aPhoto}}\n  {{aPhoto.title}}\n{{/link-to}}\n```\n\n```html\n<a href=\"/hamster-photos/42\">\n  Tomster\n</a>\n```\n\n### Supplying multiple models\nFor deep-linking to route paths that contain multiple\ndynamic segments, multiple model arguments can be used.\nAs the router transitions through the route path, each\nsupplied model argument will become the context for the\nroute with the dynamic segments:\n\n```javascript\nRouter.map(function() {\n  this.route(\"photoGallery\", { path: \"hamster-photos/:photo_id\" }, function() {\n    this.route(\"comment\", {path: \"comments/:comment_id\"});\n  });\n});\n```\nThis argument will become the model context of the linked route:\n\n```handlebars\n{{#link-to 'photoGallery.comment' aPhoto comment}}\n  {{comment.body}}\n{{/link-to}}\n```\n\n```html\n<a href=\"/hamster-photos/42/comments/718\">\n  A+++ would snuggle again.\n</a>\n```\n\n### Supplying an explicit dynamic segment value\nIf you don't have a model object available to pass to `{{link-to}}`,\nan optional string or integer argument can be passed for routes whose\npaths contain dynamic segments. This argument will become the value\nof the dynamic segment:\n\n```javascript\nRouter.map(function() {\n  this.route(\"photoGallery\", { path: \"hamster-photos/:photo_id\" });\n});\n```\n\n```handlebars\n{{#link-to 'photoGallery' aPhotoId}}\n  {{aPhoto.title}}\n{{/link-to}}\n```\n\n```html\n<a href=\"/hamster-photos/42\">\n  Tomster\n</a>\n```\n\nWhen transitioning into the linked route, the `model` hook will\nbe triggered with parameters including this passed identifier.\n\n### Allowing Default Action\n\n By default the `{{link-to}}` component prevents the default browser action\n by calling `preventDefault()` as this sort of action bubbling is normally\n handled internally and we do not want to take the browser to a new URL (for\n example).\n\n If you need to override this behavior specify `preventDefault=false` in\n your template:\n\n```handlebars\n{{#link-to 'photoGallery' aPhotoId preventDefault=false}}\n  {{aPhotoId.title}}\n{{/link-to}}\n```\n\n### Overriding attributes\nYou can override any given property of the `Ember.LinkComponent`\nthat is generated by the `{{link-to}}` component by passing\nkey/value pairs, like so:\n\n```handlebars\n{{#link-to  aPhoto tagName='li' title='Following this link will change your life' classNames='pic sweet'}}\n  Uh-mazing!\n{{/link-to}}\n```\n\nSee [Ember.LinkComponent](/api/classes/Ember.LinkComponent.html) for a\ncomplete list of overrideable properties. Be sure to also\ncheck out inherited properties of `LinkComponent`.\n\n### Overriding Application-wide Defaults\n``{{link-to}}`` creates an instance of `Ember.LinkComponent`\nfor rendering. To override options for your entire\napplication, reopen `Ember.LinkComponent` and supply the\ndesired values:\n\n``` javascript\nEmber.LinkComponent.reopen({\n  activeClass: \"is-active\",\n  tagName: 'li'\n})\n```\n\nIt is also possible to override the default event in\nthis manner:\n\n``` javascript\nEmber.LinkComponent.reopen({\n  eventName: 'customEventName'\n});\n```",
            "itemtype": "method",
            "name": "link-to",
            "params": [
                {
                    "name": "routeName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "multiple": true
                },
                {
                    "name": "options",
                    "description": "Handlebars key/value pairs of options, you can override any property of Ember.LinkComponent",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "HTML string",
                "type": "String"
            },
            "see": [
                "{Ember.LinkComponent}"
            ],
            "access": "public",
            "tagname": "",
            "class": "Ember.Templates.helpers",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-glimmer/lib/components/link-to.js",
            "line": 349,
            "deprecated": true,
            "deprecationMessage": "Use current-when instead.",
            "itemtype": "property",
            "name": "currentWhen",
            "access": "private",
            "tagname": "",
            "class": "Ember.LinkComponent",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/components/link-to.js",
            "line": 356,
            "description": "Used to determine when this `LinkComponent` is active.",
            "itemtype": "property",
            "name": "currentWhen",
            "access": "public",
            "tagname": "",
            "class": "Ember.LinkComponent",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/components/link-to.js",
            "line": 364,
            "description": "Sets the `title` attribute of the `LinkComponent`'s HTML element.",
            "itemtype": "property",
            "name": "title",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Ember.LinkComponent",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/components/link-to.js",
            "line": 373,
            "description": "Sets the `rel` attribute of the `LinkComponent`'s HTML element.",
            "itemtype": "property",
            "name": "rel",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Ember.LinkComponent",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/components/link-to.js",
            "line": 382,
            "description": "Sets the `tabindex` attribute of the `LinkComponent`'s HTML element.",
            "itemtype": "property",
            "name": "tabindex",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Ember.LinkComponent",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/components/link-to.js",
            "line": 391,
            "description": "Sets the `target` attribute of the `LinkComponent`'s HTML element.",
            "since": "1.8.0",
            "itemtype": "property",
            "name": "target",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Ember.LinkComponent",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/components/link-to.js",
            "line": 401,
            "description": "The CSS class to apply to `LinkComponent`'s element when its `active`\nproperty is `true`.",
            "itemtype": "property",
            "name": "activeClass",
            "type": "String",
            "default": "active",
            "access": "public",
            "tagname": "",
            "class": "Ember.LinkComponent",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/components/link-to.js",
            "line": 412,
            "description": "The CSS class to apply to `LinkComponent`'s element when its `loading`\nproperty is `true`.",
            "itemtype": "property",
            "name": "loadingClass",
            "type": "String",
            "default": "loading",
            "access": "private",
            "tagname": "",
            "class": "Ember.LinkComponent",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/components/link-to.js",
            "line": 423,
            "description": "The CSS class to apply to a `LinkComponent`'s element when its `disabled`\nproperty is `true`.",
            "itemtype": "property",
            "name": "disabledClass",
            "type": "String",
            "default": "disabled",
            "access": "private",
            "tagname": "",
            "class": "Ember.LinkComponent",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/components/link-to.js",
            "line": 435,
            "description": "Determines whether the `LinkComponent` will trigger routing via\nthe `replaceWith` routing strategy.",
            "itemtype": "property",
            "name": "replace",
            "type": "Boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "Ember.LinkComponent",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/components/link-to.js",
            "line": 446,
            "description": "By default the `{{link-to}}` component will bind to the `href` and\n`title` attributes. It's discouraged that you override these defaults,\nhowever you can push onto the array if needed.",
            "itemtype": "property",
            "name": "attributeBindings",
            "type": "Array | String",
            "default": "['title', 'rel', 'tabindex', 'target']",
            "access": "public",
            "tagname": "",
            "class": "Ember.LinkComponent",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/components/link-to.js",
            "line": 458,
            "description": "By default the `{{link-to}}` component will bind to the `active`, `loading`,\nand `disabled` classes. It is discouraged to override these directly.",
            "itemtype": "property",
            "name": "classNameBindings",
            "type": "Array",
            "default": "['active', 'loading', 'disabled', 'ember-transitioning-in', 'ember-transitioning-out']",
            "access": "public",
            "tagname": "",
            "class": "Ember.LinkComponent",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/components/link-to.js",
            "line": 469,
            "description": "By default the `{{link-to}}` component responds to the `click` event. You\ncan override this globally by setting this property to your custom\nevent name.\n\nThis is particularly useful on mobile when one wants to avoid the 300ms\nclick delay using some sort of custom `tap` event.",
            "itemtype": "property",
            "name": "eventName",
            "type": "String",
            "default": "click",
            "access": "private",
            "tagname": "",
            "class": "Ember.LinkComponent",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/components/link-to.js",
            "line": 487,
            "description": "Triggers the `LinkComponent`'s routing behavior. If\n`eventName` is changed to a value other than `click`\nthe routing behavior will trigger on that custom event\ninstead.",
            "itemtype": "event",
            "name": "click",
            "access": "private",
            "tagname": "",
            "class": "Ember.LinkComponent",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/components/link-to.js",
            "line": 497,
            "description": "An overridable method called when `LinkComponent` objects are instantiated.\n\nExample:\n\n```javascript\nApp.MyLinkComponent = Ember.LinkComponent.extend({\n  init: function() {\n    this._super(...arguments);\n    Ember.Logger.log('Event is ' + this.get('eventName'));\n  }\n});\n```\n\nNOTE: If you do override `init` for a framework class like `Ember.View`,\nbe sure to call `this._super(...arguments)` in your\n`init` declaration! If you don't, Ember may not have an opportunity to\ndo important setup work, and you'll see strange behavior in your\napplication.",
            "itemtype": "method",
            "name": "init",
            "access": "private",
            "tagname": "",
            "class": "Ember.LinkComponent",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/components/link-to.js",
            "line": 530,
            "description": "Accessed as a classname binding to apply the `LinkComponent`'s `disabledClass`\nCSS `class` to the element when the link is disabled.\n\nWhen `true` interactions with the element will not trigger route changes.",
            "itemtype": "property",
            "name": "disabled",
            "access": "private",
            "tagname": "",
            "class": "Ember.LinkComponent",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/components/link-to.js",
            "line": 570,
            "description": "Accessed as a classname binding to apply the `LinkComponent`'s `activeClass`\nCSS `class` to the element when the link is active.\n\nA `LinkComponent` is considered active when its `currentWhen` property is `true`\nor the application's current route is the route the `LinkComponent` would trigger\ntransitions into.\n\nThe `currentWhen` property can match against multiple routes by separating\nroute names using the ` ` (space) character.",
            "itemtype": "property",
            "name": "active",
            "access": "private",
            "tagname": "",
            "class": "Ember.LinkComponent",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/components/link-to.js",
            "line": 613,
            "description": "Event handler that invokes the link, activating the associated route.",
            "itemtype": "method",
            "name": "_invoke",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember.LinkComponent",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/components/link-to.js",
            "line": 695,
            "description": "Sets the element's `href` attribute to the url for\nthe `LinkComponent`'s targeted route.\n\nIf the `LinkComponent`'s `tagName` is changed to a value other\nthan `a`, this property will be ignored.",
            "itemtype": "property",
            "name": "href",
            "access": "private",
            "tagname": "",
            "class": "Ember.LinkComponent",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/components/link-to.js",
            "line": 779,
            "description": "The default href value to use while a link-to is loading.\nOnly applies when tagName is 'a'",
            "itemtype": "property",
            "name": "loadingHref",
            "type": "String",
            "default": "#",
            "access": "private",
            "tagname": "",
            "class": "Ember.LinkComponent",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/components/text_area.js",
            "line": 9,
            "description": "`{{textarea}}` inserts a new instance of `<textarea>` tag into the template.\nThe attributes of `{{textarea}}` match those of the native HTML tags as\nclosely as possible.\n\nThe following HTML attributes can be set:\n\n  * `value`\n  * `name`\n  * `rows`\n  * `cols`\n  * `placeholder`\n  * `disabled`\n  * `maxlength`\n  * `tabindex`\n  * `selectionEnd`\n  * `selectionStart`\n  * `selectionDirection`\n  * `wrap`\n  * `readonly`\n  * `autofocus`\n  * `form`\n  * `spellcheck`\n  * `required`\n\nWhen set to a quoted string, these value will be directly applied to the HTML\nelement. When left unquoted, these values will be bound to a property on the\ntemplate's current rendering context (most typically a controller instance).\n\nUnbound:\n\n```handlebars\n{{textarea value=\"Lots of static text that ISN'T bound\"}}\n```\n\nWould result in the following HTML:\n\n```html\n<textarea class=\"ember-text-area\">\n  Lots of static text that ISN'T bound\n</textarea>\n```\n\nBound:\n\nIn the following example, the `writtenWords` property on `App.ApplicationController`\nwill be updated live as the user types 'Lots of text that IS bound' into\nthe text area of their browser's window.\n\n```javascript\nApp.ApplicationController = Ember.Controller.extend({\n  writtenWords: \"Lots of text that IS bound\"\n});\n```\n\n```handlebars\n{{textarea value=writtenWords}}\n```\n\n Would result in the following HTML:\n\n```html\n<textarea class=\"ember-text-area\">\n  Lots of text that IS bound\n</textarea>\n```\n\nIf you wanted a one way binding between the text area and a div tag\nsomewhere else on your screen, you could use `Ember.computed.oneWay`:\n\n```javascript\nApp.ApplicationController = Ember.Controller.extend({\n  writtenWords: \"Lots of text that IS bound\",\n  outputWrittenWords: Ember.computed.oneWay(\"writtenWords\")\n});\n```\n\n```handlebars\n{{textarea value=writtenWords}}\n<div>\n  {{outputWrittenWords}}\n</div>\n```\n\nWould result in the following HTML:\n\n```html\n<textarea class=\"ember-text-area\">\n  Lots of text that IS bound\n</textarea>\n<-- the following div will be updated in real time as you type -->\n<div>\n  Lots of text that IS bound\n</div>\n```\n\nFinally, this example really shows the power and ease of Ember when two\nproperties are bound to eachother via `Ember.computed.alias`. Type into\neither text area box and they'll both stay in sync. Note that\n`Ember.computed.alias` costs more in terms of performance, so only use it when\nyour really binding in both directions:\n\n```javascript\nApp.ApplicationController = Ember.Controller.extend({\n  writtenWords: \"Lots of text that IS bound\",\n  twoWayWrittenWords: Ember.computed.alias(\"writtenWords\")\n});\n```\n\n```handlebars\n{{textarea value=writtenWords}}\n{{textarea value=twoWayWrittenWords}}\n```\n\n```html\n<textarea id=\"ember1\" class=\"ember-text-area\">\n  Lots of text that IS bound\n</textarea>\n<-- both updated in real time -->\n<textarea id=\"ember2\" class=\"ember-text-area\">\n  Lots of text that IS bound\n</textarea>\n```\n\n### Actions\n\nThe helper can send multiple actions based on user events.\nThe action property defines the action which is send when\nthe user presses the return key.\n\n```handlebars\n{{input action=\"submit\"}}\n```\n\nThe helper allows some user events to send actions.\n\n* `enter`\n* `insert-newline`\n* `escape-press`\n* `focus-in`\n* `focus-out`\n* `key-press`\n\nFor example, if you desire an action to be sent when the input is blurred,\nyou only need to setup the action name to the event name property.\n\n```handlebars\n{{textarea focus-in=\"alertMessage\"}}\n```\n\nSee more about [Text Support Actions](/api/classes/Ember.TextArea.html)\n\n### Extension\n\nInternally, `{{textarea}}` creates an instance of `Ember.TextArea`, passing\narguments from the helper to `Ember.TextArea`'s `create` method. You can\nextend the capabilities of text areas in your application by reopening this\nclass. For example, if you are building a Bootstrap project where `data-*`\nattributes are used, you can globally add support for a `data-*` attribute\non all `{{textarea}}`s' in your app by reopening `Ember.TextArea` or\n`Ember.TextSupport` and adding it to the `attributeBindings` concatenated\nproperty:\n\n```javascript\nEmber.TextArea.reopen({\n  attributeBindings: ['data-error']\n});\n```\n\nKeep in mind when writing `Ember.TextArea` subclasses that `Ember.TextArea`\nitself extends `Ember.Component`. Expect isolated component semantics, not\nlegacy 1.x view semantics (like `controller` being present).\n\nSee more about [Ember components](/api/classes/Ember.Component.html)",
            "itemtype": "method",
            "name": "textarea",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Hash"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Ember.Templates.helpers",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-glimmer/lib/components/text_field.js",
            "line": 87,
            "description": "The `value` attribute of the input element. As the user inputs text, this\nproperty is updated live.",
            "itemtype": "property",
            "name": "value",
            "type": "String",
            "default": "\"\"",
            "access": "public",
            "tagname": "",
            "class": "Ember.TextField",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/components/text_field.js",
            "line": 98,
            "description": "The `type` attribute of the input element.",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "default": "\"text\"",
            "access": "public",
            "tagname": "",
            "class": "Ember.TextField",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/components/text_field.js",
            "line": 122,
            "description": "The `size` of the text field in characters.",
            "itemtype": "property",
            "name": "size",
            "type": "String",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Ember.TextField",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/components/text_field.js",
            "line": 132,
            "description": "The `pattern` attribute of input element.",
            "itemtype": "property",
            "name": "pattern",
            "type": "String",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Ember.TextField",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/components/text_field.js",
            "line": 142,
            "description": "The `min` attribute of input element used with `type=\"number\"` or `type=\"range\"`.",
            "itemtype": "property",
            "name": "min",
            "type": "String",
            "default": "null",
            "since": "1.4.0",
            "access": "public",
            "tagname": "",
            "class": "Ember.TextField",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/components/text_field.js",
            "line": 153,
            "description": "The `max` attribute of input element used with `type=\"number\"` or `type=\"range\"`.",
            "itemtype": "property",
            "name": "max",
            "type": "String",
            "default": "null",
            "since": "1.4.0",
            "access": "public",
            "tagname": "",
            "class": "Ember.TextField",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/helpers/action.js",
            "line": 21,
            "description": "The `{{action}}` helper provides a way to pass triggers for behavior (usually\njust a function) between components, and into components from controllers.\n\n### Passing functions with the action helper\n\nThere are three contexts an action helper can be used in. The first two\ncontexts to discuss are attribute context, and Handlebars value context.\n\n```handlebars\n{{! An example of attribute context }}\n<div onclick={{action \"save\"}}></div>\n{{! Examples of Handlebars value context }}\n{{input on-input=(action \"save\")}}\n{{yield (action \"refreshData\") andAnotherParam}}\n```\n\nIn these contexts,\nthe helper is called a \"closure action\" helper. Its behavior is simple:\nIf passed a function name, read that function off the `actions` property\nof the current context. Once that function is read (or if a function was\npassed), create a closure over that function and any arguments.\nThe resulting value of an action helper used this way is simply a function.\n\nFor example, in the attribute context:\n\n```handlebars\n{{! An example of attribute context }}\n<div onclick={{action \"save\"}}></div>\n```\n\nThe resulting template render logic would be:\n\n```js\nvar div = document.createElement('div');\nvar actionFunction = (function(context){\n  return function() {\n    return context.actions.save.apply(context, arguments);\n  };\n})(context);\ndiv.onclick = actionFunction;\n```\n\nThus when the div is clicked, the action on that context is called.\nBecause the `actionFunction` is just a function, closure actions can be\npassed between components and still execute in the correct context.\n\nHere is an example action handler on a component:\n\n```js\nexport default Ember.Component.extend({\n  actions: {\n    save() {\n      this.get('model').save();\n    }\n  }\n});\n```\n\nActions are always looked up on the `actions` property of the current context.\nThis avoids collisions in the naming of common actions, such as `destroy`.\nTwo options can be passed to the `action` helper when it is used in this way.\n\n* `target=someProperty` will look to `someProperty` instead of the current\n  context for the `actions` hash. This can be useful when targetting a\n  service for actions.\n* `value=\"target.value\"` will read the path `target.value` off the first\n  argument to the action when it is called and rewrite the first argument\n  to be that value. This is useful when attaching actions to event listeners.\n\n### Invoking an action\n\nClosure actions curry both their scope and any arguments. When invoked, any\nadditional arguments are added to the already curried list.\nActions should be invoked using the [sendAction](/api/classes/Ember.Component.html#method_sendAction)\nmethod. The first argument to `sendAction` is the action to be called, and\nadditional arguments are passed to the action function. This has interesting\nproperties combined with currying of arguments. For example:\n\n```js\nexport default Ember.Component.extend({\n  actions: {\n    // Usage {{input on-input=(action (action 'setName' model) value=\"target.value\")}}\n    setName(model, name) {\n      model.set('name', name);\n    }\n  }\n});\n```\n\nThe first argument (`model`) was curried over, and the run-time argument (`event`)\nbecomes a second argument. Action calls can be nested this way because each simply\nreturns a function. Any function can be passed to the `{{action}}` helper, including\nother actions.\n\nActions invoked with `sendAction` have the same currying behavior as demonstrated\nwith `on-input` above. For example:\n\n```js\nexport default Ember.Component.extend({\n  actions: {\n    setName(model, name) {\n      model.set('name', name);\n    }\n  }\n});\n```\n\n```handlebars\n{{my-input submit=(action 'setName' model)}}\n```\n\n```js\n// app/components/my-component.js\nexport default Ember.Component.extend({\n  click() {\n    // Note that model is not passed, it was curried in the template\n    this.sendAction('submit', 'bob');\n  }\n});\n```\n\n### Attaching actions to DOM elements\n\nThe third context of the `{{action}}` helper can be called \"element space\".\nFor example:\n\n```handlebars\n{{! An example of element space }}\n<div {{action \"save\"}}></div>\n```\n\nUsed this way, the `{{action}}` helper provides a useful shortcut for\nregistering an HTML element in a template for a single DOM event and\nforwarding that interaction to the template's context (controller or component).\nIf the context of a template is a controller, actions used this way will\nbubble to routes when the controller does not implement the specified action.\nOnce an action hits a route, it will bubble through the route hierarchy.\n\n### Event Propagation\n\n`{{action}}` helpers called in element space can control event bubbling. Note\nthat the closure style actions cannot.\n\nEvents triggered through the action helper will automatically have\n`.preventDefault()` called on them. You do not need to do so in your event\nhandlers. If you need to allow event propagation (to handle file inputs for\nexample) you can supply the `preventDefault=false` option to the `{{action}}` helper:\n\n```handlebars\n<div {{action \"sayHello\" preventDefault=false}}>\n  <input type=\"file\" />\n  <input type=\"checkbox\" />\n</div>\n```\n\nTo disable bubbling, pass `bubbles=false` to the helper:\n\n```handlebars\n<button {{action 'edit' post bubbles=false}}>Edit</button>\n```\n\nTo disable bubbling with closure style actions you must create your own\nwrapper helper that makes use of `event.stopPropagation()`:\n\n```handlebars\n<div onclick={{disable-bubbling (action \"sayHello\")}}>Hello</div>\n```\n\n```js\n// app/helpers/disable-bubbling.js\nimport Ember from 'ember';\nexport function disableBubbling([action]) {\n  return function(event) {\n    event.stopPropagation();\n    return action(event);\n  };\n}\nexport default Ember.Helper.helper(disableBubbling);\n```\n\nIf you need the default handler to trigger you should either register your\nown event handler, or use event methods on your view class. See\n[\"Responding to Browser Events\"](/api/classes/Ember.View.html#toc_responding-to-browser-events)\nin the documentation for Ember.View for more information.\n\n### Specifying DOM event type\n\n`{{action}}` helpers called in element space can specify an event type.\nBy default the `{{action}}` helper registers for DOM `click` events. You can\nsupply an `on` option to the helper to specify a different DOM event name:\n\n```handlebars\n<div {{action \"anActionName\" on=\"doubleClick\"}}>\n  click me\n</div>\n```\n\nSee [\"Event Names\"](/api/classes/Ember.View.html#toc_event-names) for a list of\nacceptable DOM event names.\n\n### Specifying whitelisted modifier keys\n\n`{{action}}` helpers called in element space can specify modifier keys.\nBy default the `{{action}}` helper will ignore click events with pressed modifier\nkeys. You can supply an `allowedKeys` option to specify which keys should not be ignored.\n\n```handlebars\n<div {{action \"anActionName\" allowedKeys=\"alt\"}}>\n  click me\n</div>\n```\n\nThis way the action will fire when clicking with the alt key pressed down.\nAlternatively, supply \"any\" to the `allowedKeys` option to accept any combination of modifier keys.\n\n```handlebars\n<div {{action \"anActionName\" allowedKeys=\"any\"}}>\n  click me with any key pressed\n</div>\n```\n\n### Specifying a Target\n\nA `target` option can be provided to the helper to change\nwhich object will receive the method call. This option must be a path\nto an object, accessible in the current context:\n\n```handlebars\n{{! app/templates/application.hbs }}\n<div {{action \"anActionName\" target=someService}}>\n  click me\n</div>\n```\n\n```javascript\n// app/controllers/application.js\nexport default Ember.Controller.extend({\n  someService: Ember.inject.service()\n});\n```",
            "itemtype": "method",
            "name": "action",
            "access": "public",
            "tagname": "",
            "class": "Ember.Templates.helpers",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-glimmer/lib/helpers/component.js",
            "line": 20,
            "description": "The `{{component}}` helper lets you add instances of `Ember.Component` to a\ntemplate. See [Ember.Component](/api/classes/Ember.Component.html) for\nadditional information on how a `Component` functions.\n`{{component}}`'s primary use is for cases where you want to dynamically\nchange which type of component is rendered as the state of your application\nchanges. This helper has three modes: inline, block, and nested.\n\n### Inline Form\n\nGiven the following template:\n\n```app/application.hbs\n{{component infographicComponentName}}\n```\n\nAnd the following application code:\n\n```app/controllers/application.js\nexport default Ember.Controller.extend({\n  infographicComponentName: computed('isMarketOpen', {\n    get() {\n      if (this.get('isMarketOpen')) {\n        return 'live-updating-chart';\n      } else {\n        return 'market-close-summary';\n      }\n    }\n  })\n});\n```\n\nThe `live-updating-chart` component will be appended when `isMarketOpen` is\n`true`, and the `market-close-summary` component will be appended when\n`isMarketOpen` is `false`. If the value changes while the app is running,\nthe component will be automatically swapped out accordingly.\nNote: You should not use this helper when you are consistently rendering the same\ncomponent. In that case, use standard component syntax, for example:\n\n```app/templates/application.hbs\n{{live-updating-chart}}\n```\n\n### Block Form\n\nUsing the block form of this helper is similar to using the block form\nof a component. Given the following application template:\n\n```app/templates/application.hbs\n{{#component infographicComponentName}}\n  Last update: {{lastUpdateTimestamp}}\n{{/component}}\n```\n\nThe following controller code:\n\n```app/controllers/application.js\nexport default Ember.Controller.extend({\n  lastUpdateTimestamp: computed(function() {\n    return new Date();\n  }),\n\n  infographicComponentName: computed('isMarketOpen', {\n    get() {\n      if (this.get('isMarketOpen')) {\n        return 'live-updating-chart';\n      } else {\n        return 'market-close-summary';\n      }\n    }\n  })\n});\n```\n\nAnd the following component template:\n\n```app/templates/components/live-updating-chart.hbs\n{{! chart }}\n{{yield}}\n```\n\nThe `Last Update: {{lastUpdateTimestamp}}` will be rendered in place of the `{{yield}}`.\n\n### Nested Usage\n\nThe `component` helper can be used to package a component path with initial attrs.\nThe included attrs can then be merged during the final invocation.\nFor example, given a `person-form` component with the following template:\n\n```app/templates/components/person-form.hbs\n{{yield (hash\n  nameInput=(component \"my-input-component\" value=model.name placeholder=\"First Name\")\n)}}\n```\n\nWhen yielding the component via the `hash` helper, the component is invocked directly.\nSee the following snippet:\n\n```\n{{#person-form as |form|}}\n  {{form.nameInput placeholder=\"Username\"}}\n{{/person-form}}\n```\n\nWhich outputs an input whose value is already bound to `model.name` and `placeholder`\nis \"Username\".\n\nWhen yielding the component without the hash helper use the `component` helper.\nFor example, below is a `full-name` component template:\n\n```handlebars\n{{yield (component \"my-input-component\" value=model.name placeholder=\"Name\")}}\n```\n\n```\n{{#full-name as |field|}}\n  {{component field placeholder=\"Full name\"}}\n{{/full-name}}\n```",
            "itemtype": "method",
            "name": "component",
            "since": "1.11.0",
            "access": "public",
            "tagname": "",
            "class": "Ember.Templates.helpers",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-glimmer/lib/helpers/concat.js",
            "line": 9,
            "description": "Concatenates the given arguments into a string.\n\nExample:\n\n```handlebars\n{{some-component name=(concat firstName \" \" lastName)}}\n\n{{! would pass name=\"<first name value> <last name value>\" to the component}}\n```",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "concat",
            "since": "1.13.0",
            "class": "Ember.Templates.helpers",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-glimmer/lib/helpers/debugger.js",
            "line": 15,
            "description": "Execute the `debugger` statement in the current template's context.\n\n```handlebars\n{{debugger}}\n```\n\nWhen using the debugger helper you will have access to a `get` function. This\nfunction retrieves values available in the context of the template.\nFor example, if you're wondering why a value `{{foo}}` isn't rendering as\nexpected within a template, you could place a `{{debugger}}` statement and,\nwhen the `debugger;` breakpoint is hit, you can attempt to retrieve this value:\n\n```\n> get('foo')\n```\n\n`get` is also aware of block variables. So in this situation\n\n```handlebars\n{{#each items as |item|}}\n  {{debugger}}\n{{/each}}\n```\n\nYou'll be able to get values from the current item:\n\n```\n> get('item.name')\n```\n\nYou can also access the context of the view to make sure it is the object that\nyou expect:\n\n```\n> context\n```",
            "itemtype": "method",
            "name": "debugger",
            "access": "public",
            "tagname": "",
            "class": "Ember.Templates.helpers",
            "module": "ember",
            "submodule": "ember-htmlbars"
        },
        {
            "file": "packages/ember-glimmer/lib/helpers/each-in.js",
            "line": 7,
            "description": "The `{{#each}}` helper loops over elements in a collection. It is an extension\nof the base Handlebars `{{#each}}` helper.\nThe default behavior of `{{#each}}` is to yield its inner block once for every\nitem in an array passing the item as the first block parameter.\n\n```javascript\nvar developers = [{ name: 'Yehuda' },{ name: 'Tom' }, { name: 'Paul' }];\n```\n\n```handlebars\n{{#each developers key=\"name\" as |person|}}\n  {{person.name}}\n  {{! `this` is whatever it was outside the #each }}\n{{/each}}\n```\n\nThe same rules apply to arrays of primitives.\n\n```javascript\nvar developerNames = ['Yehuda', 'Tom', 'Paul']\n```\n\n```handlebars\n{{#each developerNames key=\"@index\" as |name|}}\n  {{name}}\n{{/each}}\n```\n\nDuring iteration, the index of each item in the array is provided as a second block parameter.\n\n```handlebars\n<ul>\n  {{#each people as |person index|}}\n    <li>Hello, {{person.name}}! You're number {{index}} in line</li>\n  {{/each}}\n</ul>\n```\n\n### Specifying Keys\n\nThe `key` option is used to tell Ember how to determine if the array being\niterated over with `{{#each}}` has changed between renders. By helping Ember\ndetect that some elements in the array are the same, DOM elements can be\nre-used, significantly improving rendering speed.\n\nFor example, here's the `{{#each}}` helper with its `key` set to `id`:\n\n```handlebars\n{{#each model key=\"id\" as |item|}}\n{{/each}}\n```\n\nWhen this `{{#each}}` re-renders, Ember will match up the previously rendered\nitems (and reorder the generated DOM elements) based on each item's `id`\nproperty.\nBy default the item's own reference is used.\n\n### {{else}} condition\n\n`{{#each}}` can have a matching `{{else}}`. The contents of this block will render\nif the collection is empty.\n\n```handlebars\n{{#each developers as |person|}}\n  {{person.name}}\n{{else}}\n  <p>Sorry, nobody is available for this task.</p>\n{{/each}}\n```",
            "itemtype": "method",
            "name": "each",
            "access": "public",
            "tagname": "",
            "class": "Ember.Templates.helpers",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-glimmer/lib/helpers/each-in.js",
            "line": 83,
            "description": "The `{{each-in}}` helper loops over properties on an object.\n\nFor example, given a `user` object that looks like:\n\n```javascript\n{\n  \"name\": \"Shelly Sails\",\n  \"age\": 42\n}\n```\n\nThis template would display all properties on the `user`\nobject in a list:\n\n```handlebars\n<ul>\n{{#each-in user as |key value|}}\n  <li>{{key}}: {{value}}</li>\n{{/each-in}}\n</ul>\n```\n\nOutputting their name and age.",
            "itemtype": "method",
            "name": "each-in",
            "access": "public",
            "tagname": "",
            "since": "2.1.0",
            "class": "Ember.Templates.helpers",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-glimmer/lib/helpers/get.js",
            "line": 16,
            "description": "Dynamically look up a property on an object. The second argument to `{{get}}`\nshould have a string value, although it can be bound.\n\nFor example, these two usages are equivilent:\n\n```handlebars\n{{person.height}}\n{{get person \"height\"}}\n```\n\nIf there were several facts about a person, the `{{get}}` helper can dynamically\npick one:\n\n```handlebars\n{{get person factName}}\n```\n\nFor a more complex example, this template would allow the user to switch\nbetween showing the user's height and weight with a click:\n\n```handlebars\n{{get person factName}}\n<button {{action (action (mut factName)) \"height\"}}>Show height</button>\n<button {{action (action (mut factName)) \"weight\"}}>Show weight</button>\n```\n\nThe `{{get}}` helper can also respect mutable values itself. For example:\n\n```handlebars\n{{input value=(mut (get person factName)) type=\"text\"}}\n<button {{action (action (mut factName)) \"height\"}}>Show height</button>\n<button {{action (action (mut factName)) \"weight\"}}>Show weight</button>\n```\n\nWould allow the user to swap what fact is being displayed, and also edit\nthat fact via a two-way mutable binding.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "get",
            "since": "2.1.0",
            "class": "Ember.Templates.helpers",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-glimmer/lib/helpers/hash.js",
            "line": 6,
            "description": "Use the `{{hash}}` helper to create a hash to pass as an option to your\ncomponents. This is specially useful for contextual components where you can\njust yield a hash:\n\n```handlebars\n{{yield (hash\n   name='Sarah'\n   title=office\n)}}\n```\n\nWould result in an object such as:\n\n```js\n{ name: 'Sarah', title: this.get('office') }\n```\n\nWhere the `title` is bound to updates of the `office` property.",
            "itemtype": "method",
            "name": "hash",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Hash",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember.Templates.helpers",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-glimmer/lib/helpers/if-unless.js",
            "line": 20,
            "description": "Use the `if` block helper to conditionally render a block depending on a\nproperty. If the property is \"falsey\", for example: `false`, `undefined`,\n`null`, `\"\"`, `0`, `NaN` or an empty array, the block will not be rendered.\n\n```handlebars\n{{! will not render if foo is falsey}}\n{{#if foo}}\n  Welcome to the {{foo.bar}}\n{{/if}}\n```\n\nYou can also specify a template to show if the property is falsey by using\nthe `else` helper.\n\n```handlebars\n{{! is it raining outside?}}\n{{#if isRaining}}\n  Yes, grab an umbrella!\n{{else}}\n  No, it's lovely outside!\n{{/if}}\n```\n\nYou are also able to combine `else` and `if` helpers to create more complex\nconditional logic.\n\n```handlebars\n{{#if isMorning}}\n  Good morning\n{{else if isAfternoon}}\n  Good afternoon\n{{else}}\n  Good night\n{{/if}}\n```\n\nYou can use `if` inline to conditionally render a single property or string.\nThis helper acts like a ternary operator. If the first property is truthy,\nthe second argument will be displayed, if not, the third argument will be\ndisplayed\n\n```handlebars\n{{if useLongGreeting \"Hello\" \"Hi\"}} Dave\n```\n\nFinally, you can use the `if` helper inside another helper as a subexpression.\n\n```handlebars\n{{some-component height=(if isBig \"100\" \"10\")}}\n```",
            "itemtype": "method",
            "name": "if",
            "access": "public",
            "tagname": "",
            "class": "Ember.Templates.helpers",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-glimmer/lib/helpers/if-unless.js",
            "line": 112,
            "description": "The inline `if` helper conditionally renders a single property or string.\nThis helper acts like a ternary operator. If the first property is truthy,\nthe second argument will be displayed, otherwise, the third argument will be\ndisplayed\n\n```handlebars\n{{if useLongGreeting \"Hello\" \"Hi\"}} Alex\n```\n\nYou can use the `if` helper inside another helper as a subexpression.\n\n```handlebars\n{{some-component height=(if isBig \"100\" \"10\")}}\n```",
            "itemtype": "method",
            "name": "if",
            "access": "public",
            "tagname": "",
            "class": "Ember.Templates.helpers",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-glimmer/lib/helpers/if-unless.js",
            "line": 144,
            "description": "The inline `unless` helper conditionally renders a single property or string.\nThis helper acts like a ternary operator. If the first property is falsy,\nthe second argument will be displayed, otherwise, the third argument will be\ndisplayed\n\n```handlebars\n{{unless useLongGreeting \"Hi\" \"Hello\"}} Ben\n```\n\nYou can use the `unless` helper inside another helper as a subexpression.\n\n```handlebars\n{{some-component height=(unless isBig \"10\" \"100\")}}\n```",
            "itemtype": "method",
            "name": "unless",
            "access": "public",
            "tagname": "",
            "class": "Ember.Templates.helpers",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-glimmer/lib/helpers/loc.js",
            "line": 9,
            "description": "Calls [Ember.String.loc](/api/classes/Ember.String.html#method_loc) with the\nprovided string. This is a convenient way to localize text within a template.\nFor example:\n\n```javascript\nEmber.STRINGS = {\n  '_welcome_': 'Bonjour'\n};\n```\n\n```handlebars\n<div class='message'>\n  {{loc '_welcome_'}}\n</div>\n```\n\n```html\n<div class='message'>\n  Bonjour\n</div>\n```\n\nSee [Ember.String.loc](/api/classes/Ember.String.html#method_loc) for how to\nset up localized string references.",
            "itemtype": "method",
            "name": "loc",
            "params": [
                {
                    "name": "str",
                    "description": "The string to format.",
                    "type": "String"
                }
            ],
            "see": [
                "{Ember.String#loc}"
            ],
            "access": "public",
            "tagname": "",
            "class": "Ember.Templates.helpers",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-glimmer/lib/helpers/log.js",
            "line": 9,
            "description": "`log` allows you to output the value of variables in the current rendering\ncontext. `log` also accepts primitive types such as strings or numbers.\n\n```handlebars\n{{log \"myVariable:\" myVariable }}\n```",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Array"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Ember.Templates.helpers",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-glimmer/lib/helpers/mut.js",
            "line": 10,
            "description": "The `mut` helper lets you __clearly specify__ that a child `Component` can update the\n(mutable) value passed to it, which will __change the value of the parent component__.\n\nTo specify that a parameter is mutable, when invoking the child `Component`:\n\n```handlebars\n{{my-child childClickCount=(mut totalClicks)}}\n```\n\nThe child `Component` can then modify the parent's value just by modifying its own\nproperty:\n\n```javascript\n// my-child.js\nexport default Component.extend({\n  click() {\n    this.incrementProperty('childClickCount');\n  }\n});\n```\n\nNote that for curly components (`{{my-component}}`) the bindings are already mutable,\nmaking the `mut` unnecessary.\n\nAdditionally, the `mut` helper can be combined with the `action` helper to\nmutate a value. For example:\n\n```handlebars\n{{my-child childClickCount=totalClicks click-count-change=(action (mut totalClicks))}}\n```\n\nThe child `Component` would invoke the action with the new click value:\n\n```javascript\n// my-child.js\nexport default Component.extend({\n  click() {\n    this.get('click-count-change')(this.get('childClickCount') + 1);\n  }\n});\n```\n\nThe `mut` helper changes the `totalClicks` value to what was provided as the action argument.\n\nThe `mut` helper, when used with `action`, will return a function that\nsets the value passed to `mut` to its first argument. This works like any other\nclosure action and interacts with the other features `action` provides.\nAs an example, we can create a button that increments a value passing the value\ndirectly to the `action`:\n\n```handlebars\n{{! inc helper is not provided by Ember }}\n<button onclick={{action (mut count) (inc count)}}>\n  Increment count\n</button>\n```\n\nYou can also use the `value` option:\n\n```handlebars\n<input value={{name}} oninput={{action (mut name) value=\"target.value\"}}>\n```",
            "itemtype": "method",
            "name": "mut",
            "params": [
                {
                    "name": "attr",
                    "description": "the \"two-way\" attribute that can be modified.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Ember.Templates.helpers",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-glimmer/lib/helpers/query-param.js",
            "line": 10,
            "description": "This is a helper to be used in conjunction with the link-to helper.\nIt will supply url query parameters to the target route.\n\nExample\n\n```handlebars\n{{#link-to 'posts' (query-params direction=\"asc\")}}Sort{{/link-to}}\n```",
            "itemtype": "method",
            "name": "query-params",
            "params": [
                {
                    "name": "hash",
                    "description": "takes a hash of query parameters",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A `QueryParams` object for `{{link-to}}`",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember.Templates.helpers",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-glimmer/lib/helpers/readonly.js",
            "line": 9,
            "description": "The `readonly` helper let's you specify that a binding is one-way only,\ninstead of two-way.\nWhen you pass a `readonly` binding from an outer context (e.g. parent component),\nto to an inner context (e.g. child component), you are saying that changing that\nproperty in the inner context does not change the value in the outer context.\n\nTo specify that a binding is read-only, when invoking the child `Component`:\n\n```app/components/my-parent.js\nexport default Component.extend({\n  totalClicks: 3\n});\n```\n\n```app/templates/components/my-parent.hbs\n{{log totalClicks}} // -> 3\n{{my-child childClickCount=(readonly totalClicks)}}\n```\n\nNow, when you update `childClickCount`:\n\n```app/components/my-child.js\nexport default Component.extend({\n  click() {\n    this.incrementProperty('childClickCount');\n  }\n});\n```\n\nThe value updates in the child component, but not the parent component:\n\n```app/templates/components/my-child.hbs\n{{log childClickCount}} //-> 4\n```\n\n```app/templates/components/my-parent.hbs\n{{log totalClicks}} //-> 3\n{{my-child childClickCount=(readonly totalClicks)}}\n```\n\n### Objects and Arrays\n\nWhen passing a property that is a complex object (e.g. object, array) instead of a primitive object (e.g. number, string),\nonly the reference to the object is protected using the readonly helper.\nThis means that you can change properties of the object both on the parent component, as well as the child component.\nThe `readonly` binding behaves similar to the `const` keyword in JavaScript.\n\nLet's look at an example:\n\nFirst let's set up the parent component:\n\n```app/components/my-parent.js\nexport default Ember.Component.extend({\n  clicks: null,\n\n  init() {\n    this._super(...arguments);\n    this.set('clicks', { total: 3 });\n  }\n});\n```\n\n```app/templates/components/my-parent.hbs\n{{log clicks.total}} //-> 3\n{{my-child childClicks=(readonly clicks)}}\n```\n\nNow, if you update the `total` property of `childClicks`:\n\n```app/components/my-child.js\nexport default Ember.Component.extend({\n  click() {\n    this.get('clicks').incrementProperty('total');\n  }\n});\n```\n\nYou will see the following happen:\n\n```app/templates/components/my-parent.hbs\n{{log clicks.total}} //-> 4\n{{my-child childClicks=(readonly clicks)}}\n```\n\n```app/templates/components/my-child.hbs\n{{log childClicks.total}} //-> 4\n```",
            "itemtype": "method",
            "name": "readonly",
            "params": [
                {
                    "name": "attr",
                    "description": "the read-only attribute.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember.Templates.helpers",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-glimmer/lib/helpers/unbound.js",
            "line": 9,
            "description": "The `{{unbound}}` helper disconnects the one-way binding of a property,\nessentially freezing its value at the moment of rendering. For example,\nin this example the display of the variable `name` will not change even\nif it is set with a new value:\n\n```handlebars\n{{unbound name}}\n```\n\nLike any helper, the `unbound` helper can accept a nested helper expression.\nThis allows for custom helpers to be rendered unbound:\n\n```handlebars\n{{unbound (some-custom-helper)}}\n{{unbound (capitalize name)}}\n{{! You can use any helper, including unbound, in a nested expression }}\n{{capitalize (unbound name)}}\n```\n\nThe `unbound` helper only accepts a single argument, and it return an\nunbound value.",
            "itemtype": "method",
            "name": "unbound",
            "access": "public",
            "tagname": "",
            "class": "Ember.Templates.helpers",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-glimmer/lib/syntax/input.js",
            "line": 16,
            "description": "The `{{input}}` helper lets you create an HTML `<input />` component.\nIt causes an `Ember.TextField` component to be rendered.  For more info,\nsee the [Ember.TextField](/api/classes/Ember.TextField.html) docs and\nthe [templates guide](http://emberjs.com/guides/templates/input-helpers/).\n\n```handlebars\n{{input value=\"987\"}}\n```\n\nrenders as:\n\n```HTML\n<input type=\"text\" value=\"987\" />\n```\n\n### Text field\n\nIf no `type` option is specified, a default of type 'text' is used.\nMany of the standard HTML attributes may be passed to this helper.\n<table>\n  <tr><td>`readonly`</td><td>`required`</td><td>`autofocus`</td></tr>\n  <tr><td>`value`</td><td>`placeholder`</td><td>`disabled`</td></tr>\n  <tr><td>`size`</td><td>`tabindex`</td><td>`maxlength`</td></tr>\n  <tr><td>`name`</td><td>`min`</td><td>`max`</td></tr>\n  <tr><td>`pattern`</td><td>`accept`</td><td>`autocomplete`</td></tr>\n  <tr><td>`autosave`</td><td>`formaction`</td><td>`formenctype`</td></tr>\n  <tr><td>`formmethod`</td><td>`formnovalidate`</td><td>`formtarget`</td></tr>\n  <tr><td>`height`</td><td>`inputmode`</td><td>`multiple`</td></tr>\n  <tr><td>`step`</td><td>`width`</td><td>`form`</td></tr>\n  <tr><td>`selectionDirection`</td><td>`spellcheck`</td><td>&nbsp;</td></tr>\n</table>\nWhen set to a quoted string, these values will be directly applied to the HTML\nelement. When left unquoted, these values will be bound to a property on the\ntemplate's current rendering context (most typically a controller instance).\nA very common use of this helper is to bind the `value` of an input to an Object's attribute:\n\n```handlebars\nSearch:\n{{input value=searchWord}}\n```\n\nIn this example, the inital value in the `<input />` will be set to the value of `searchWord`.\nIf the user changes the text, the value of `searchWord` will also be updated.\n\n### Actions\n\nThe helper can send multiple actions based on user events.\nThe action property defines the action which is sent when\nthe user presses the return key.\n\n```handlebars\n{{input action=\"submit\"}}\n```\n\nThe helper allows some user events to send actions.\n\n* `enter`\n* `insert-newline`\n* `escape-press`\n* `focus-in`\n* `focus-out`\n* `key-press`\n* `key-up`\n\nFor example, if you desire an action to be sent when the input is blurred,\nyou only need to setup the action name to the event name property.\n\n```handlebars\n{{input focus-out=\"alertMessage\"}}\n```\nSee more about [Text Support Actions](/api/classes/Ember.TextField.html)\n\n### Extending `Ember.TextField`\n\nInternally, `{{input type=\"text\"}}` creates an instance of `Ember.TextField`, passing\narguments from the helper to `Ember.TextField`'s `create` method. You can extend the\ncapabilities of text inputs in your applications by reopening this class. For example,\nif you are building a Bootstrap project where `data-*` attributes are used, you\ncan add one to the `TextField`'s `attributeBindings` property:\n\n```javascript\nEmber.TextField.reopen({\n  attributeBindings: ['data-error']\n});\n```\n\nKeep in mind when writing `Ember.TextField` subclasses that `Ember.TextField`\nitself extends `Ember.Component`. Expect isolated component semantics, not\nlegacy 1.x view semantics (like `controller` being present).\nSee more about [Ember components](/api/classes/Ember.Component.html)\n\n### Checkbox\n\nCheckboxes are special forms of the `{{input}}` helper.  To create a `<checkbox />`:\n\n```handlebars\nEmberize Everything:\n{{input type=\"checkbox\" name=\"isEmberized\" checked=isEmberized}}\n```\n\nThis will bind checked state of this checkbox to the value of `isEmberized`  -- if either one changes,\nit will be reflected in the other.\n\nThe following HTML attributes can be set via the helper:\n\n* `checked`\n* `disabled`\n* `tabindex`\n* `indeterminate`\n* `name`\n* `autofocus`\n* `form`\n\n### Extending `Ember.Checkbox`\n\nInternally, `{{input type=\"checkbox\"}}` creates an instance of `Ember.Checkbox`, passing\narguments from the helper to `Ember.Checkbox`'s `create` method. You can extend the\ncapablilties of checkbox inputs in your applications by reopening this class. For example,\nif you wanted to add a css class to all checkboxes in your application:\n\n```javascript\nEmber.Checkbox.reopen({\n  classNames: ['my-app-checkbox']\n});\n```",
            "itemtype": "method",
            "name": "input",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Hash"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Ember.Templates.helpers",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-glimmer/lib/syntax/mount.js",
            "line": 17,
            "description": "The `{{mount}}` helper lets you embed a routeless engine in a template.\nMounting an engine will cause an instance to be booted and its `application`\ntemplate to be rendered.\n\nFor example, the following template mounts the `ember-chat` engine:\n\n```handlebars\n{{! application.hbs }}\n{{mount \"ember-chat\"}}\n```\n\nCurrently, the engine name is the only argument that can be passed to\n`{{mount}}`.",
            "itemtype": "method",
            "name": "mount",
            "category": [
                "ember-application-engines"
            ],
            "access": "public",
            "tagname": "",
            "class": "Ember.Templates.helpers",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-glimmer/lib/syntax/outlet.js",
            "line": 34,
            "description": "The `{{outlet}}` helper lets you specify where a child route will render in\nyour template. An important use of the `{{outlet}}` helper is in your\napplication's `application.hbs` file:\n\n```handlebars\n{{! app/templates/application.hbs }}\n<!-- header content goes here, and will always display -->\n{{my-header}}\n<div class=\"my-dynamic-content\">\n  <!-- this content will change based on the current route, which depends on the current URL -->\n  {{outlet}}\n</div>\n<!-- footer content goes here, and will always display -->\n{{my-footer}}\n```\n\nSee [templates guide](http://emberjs.com/guides/templates/the-application-template/) for\nadditional information on using `{{outlet}}` in `application.hbs`.\nYou may also specify a name for the `{{outlet}}`, which is useful when using more than one\n`{{outlet}}` in a template:\n\n```handlebars\n{{outlet \"menu\"}}\n{{outlet \"sidebar\"}}\n{{outlet \"main\"}}\n```\n\nYour routes can then render into a specific one of these `outlet`s by specifying the `outlet`\nattribute in your `renderTemplate` function:\n\n```javascript\n// app/routes/menu.js\nexport default Ember.Route.extend({\n  renderTemplate() {\n    this.render({ outlet: 'menu' });\n  }\n});\n```\n\nSee the [routing guide](http://emberjs.com/guides/routing/rendering-a-template/) for more\ninformation on how your `route` interacts with the `{{outlet}}` helper.\nNote: Your content __will not render__ if there isn't an `{{outlet}}` for it.",
            "itemtype": "method",
            "name": "outlet",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Ember.Templates.helpers",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-glimmer/lib/syntax/render.js",
            "line": 52,
            "description": "Calling ``{{render}}`` from within a template will insert another\ntemplate that matches the provided name. The inserted template will\naccess its properties on its own controller (rather than the controller\nof the parent template).\n\nIf a view class with the same name exists, the view class also will be used.\nNote: A given controller may only be used *once* in your app in this manner.\nA singleton instance of the controller will be created for you.\n\nExample:\n\n```javascript\nApp.NavigationController = Ember.Controller.extend({\n  who: \"world\"\n});\n```\n\n```handlebars\n<!-- navigation.hbs -->\nHello, {{who}}.\n```\n\n```handlebars\n<!-- application.hbs -->\n<h1>My great app</h1>\n{{render \"navigation\"}}\n```\n\n```html\n<h1>My great app</h1>\n<div class='ember-view'>\n  Hello, world.\n</div>\n```\n\nOptionally you may provide a second argument: a property path\nthat will be bound to the `model` property of the controller.\nIf a `model` property path is specified, then a new instance of the\ncontroller will be created and `{{render}}` can be used multiple times\nwith the same name.\n\nFor example if you had this `author` template.\n\n```handlebars\n<div class=\"author\">\n  Written by {{firstName}} {{lastName}}.\n  Total Posts: {{postCount}}\n</div>\n```\n\nYou could render it inside the `post` template using the `render` helper.\n\n```handlebars\n<div class=\"post\">\n  <h1>{{title}}</h1>\n  <div>{{body}}</div>\n  {{render \"author\" author}}\n</div>\n```",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object?"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Hash"
                }
            ],
            "return": {
                "description": "HTML string",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember.Templates.helpers",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-glimmer/lib/utils/string.js",
            "line": 76,
            "description": "Mark a string as safe for unescaped output with Ember templates. If you\nreturn HTML from a helper, use this function to\nensure Ember's rendering layer does not escape the HTML.\n\n```javascript\nEmber.String.htmlSafe('<div>someString</div>')\n```",
            "itemtype": "method",
            "name": "htmlSafe",
            "static": 1,
            "return": {
                "description": "A string that will not be HTML escaped by Handlebars.",
                "type": "Handlebars.SafeString"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-glimmer/lib/utils/string.js",
            "line": 100,
            "description": "Detects if a string was decorated using `Ember.String.htmlSafe`.\n\n```javascript\nvar plainString = 'plain string',\n    safeString = Ember.String.htmlSafe('<div>someValue</div>');\n\nEmber.String.isHTMLSafe(plainString); // false\nEmber.String.isHTMLSafe(safeString);  // true\n```",
            "itemtype": "method",
            "name": "isHTMLSafe",
            "static": 1,
            "return": {
                "description": "`true` if the string was decorated with `htmlSafe`, `false` otherwise.",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-glimmer/lib/component.js",
            "line": 604,
            "description": "Normally, Ember's component model is \"write-only\". The component takes a\nbunch of attributes that it got passed in, and uses them to render its\ntemplate.\n\nOne nice thing about this model is that if you try to set a value to the\nsame thing as last time, Ember (through HTMLBars) will avoid doing any\nwork on the DOM.\n\nThis is not just a performance optimization. If an attribute has not\nchanged, it is important not to clobber the element's \"hidden state\".\nFor example, if you set an input's `value` to the same value as before,\nit will clobber selection state and cursor position. In other words,\nsetting an attribute is not **always** idempotent.\n\nThis method provides a way to read an element's attribute and also\nupdate the last value Ember knows about at the same time. This makes\nsetting an attribute idempotent.\n\nIn particular, what this means is that if you get an `<input>` element's\n`value` attribute and then re-render the template with the same value,\nit will avoid clobbering the cursor and selection position.\nSince most attribute sets are idempotent in the browser, you typically\ncan get away with reading attributes using jQuery, but the most reliable\nway to do so is through this method.",
            "itemtype": "method",
            "name": "readDOMAttr",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "String"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/component.js",
            "line": 640,
            "description": "The WAI-ARIA role of the control represented by this view. For example, a\nbutton may have a role of type 'button', or a pane may have a role of\ntype 'alertdialog'. This property is used by assistive software to help\nvisually challenged users navigate rich web applications.\n\nThe full list of valid WAI-ARIA roles is available at:\n[http://www.w3.org/TR/wai-aria/roles#roles_categorization](http://www.w3.org/TR/wai-aria/roles#roles_categorization)",
            "itemtype": "property",
            "name": "ariaRole",
            "type": "String",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/component.js",
            "line": 655,
            "description": "Enables components to take a list of parameters as arguments.\nFor example, a component that takes two parameters with the names\n`name` and `age`:\n\n```javascript\nlet MyComponent = Ember.Component.extend;\n\nMyComponent.reopenClass({\n  positionalParams: ['name', 'age']\n});\n```\n\nIt can then be invoked like this:\n\n```hbs\n{{my-component \"John\" 38}}\n```\n\nThe parameters can be referred to just like named parameters:\n\n```hbs\nName: {{name}}, Age: {{age}}.\n```\n\nUsing a string instead of an array allows for an arbitrary number of\nparameters:\n\n```javascript\nlet MyComponent = Ember.Component.extend;\n\nMyComponent.reopenClass({\n  positionalParams: 'names'\n});\n```\n\nIt can then be invoked like this:\n\n```hbs\n{{my-component \"John\" \"Michael\" \"Scott\"}}\n```\nThe parameters can then be referred to by enumerating over the list:\n\n```hbs\n{{#each names as |name|}}{{name}}{{/each}}\n```",
            "static": 1,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "positionalParams",
            "since": "1.13.0",
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/component.js",
            "line": 709,
            "description": "Called when the attributes passed into the component have been updated.\nCalled both during the initial render of a container and during a rerender.\nCan be used in place of an observer; code placed here will be executed\nevery time any attribute updates.",
            "itemtype": "method",
            "name": "didReceiveAttrs",
            "access": "public",
            "tagname": "",
            "since": "1.13.0",
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/component.js",
            "line": 719,
            "description": "Called when the attributes passed into the component have been updated.\nCalled both during the initial render of a container and during a rerender.\nCan be used in place of an observer; code placed here will be executed\nevery time any attribute updates.",
            "itemtype": "event",
            "name": "didReceiveAttrs",
            "access": "public",
            "tagname": "",
            "since": "1.13.0",
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/component.js",
            "line": 729,
            "description": "Called after a component has been rendered, both on initial render and\nin subsequent rerenders.",
            "itemtype": "method",
            "name": "didRender",
            "access": "public",
            "tagname": "",
            "since": "1.13.0",
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/component.js",
            "line": 737,
            "description": "Called after a component has been rendered, both on initial render and\nin subsequent rerenders.",
            "itemtype": "event",
            "name": "didRender",
            "access": "public",
            "tagname": "",
            "since": "1.13.0",
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/component.js",
            "line": 745,
            "description": "Called before a component has been rendered, both on initial render and\nin subsequent rerenders.",
            "itemtype": "method",
            "name": "willRender",
            "access": "public",
            "tagname": "",
            "since": "1.13.0",
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/component.js",
            "line": 753,
            "description": "Called before a component has been rendered, both on initial render and\nin subsequent rerenders.",
            "itemtype": "event",
            "name": "willRender",
            "access": "public",
            "tagname": "",
            "since": "1.13.0",
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/component.js",
            "line": 761,
            "description": "Called when the attributes passed into the component have been changed.\nCalled only during a rerender, not during an initial render.",
            "itemtype": "method",
            "name": "didUpdateAttrs",
            "access": "public",
            "tagname": "",
            "since": "1.13.0",
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/component.js",
            "line": 769,
            "description": "Called when the attributes passed into the component have been changed.\nCalled only during a rerender, not during an initial render.",
            "itemtype": "event",
            "name": "didUpdateAttrs",
            "access": "public",
            "tagname": "",
            "since": "1.13.0",
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/component.js",
            "line": 777,
            "description": "Called when the component is about to update and rerender itself.\nCalled only during a rerender, not during an initial render.",
            "itemtype": "method",
            "name": "willUpdate",
            "access": "public",
            "tagname": "",
            "since": "1.13.0",
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/component.js",
            "line": 785,
            "description": "Called when the component is about to update and rerender itself.\nCalled only during a rerender, not during an initial render.",
            "itemtype": "event",
            "name": "willUpdate",
            "access": "public",
            "tagname": "",
            "since": "1.13.0",
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/component.js",
            "line": 793,
            "description": "Called when the component has updated and rerendered itself.\nCalled only during a rerender, not during an initial render.",
            "itemtype": "method",
            "name": "didUpdate",
            "access": "public",
            "tagname": "",
            "since": "1.13.0",
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/component.js",
            "line": 801,
            "description": "Called when the component has updated and rerendered itself.\nCalled only during a rerender, not during an initial render.",
            "itemtype": "event",
            "name": "didUpdate",
            "access": "public",
            "tagname": "",
            "since": "1.13.0",
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/component.js",
            "line": 809,
            "description": "A component may contain a layout. A layout is a regular template but\nsupersedes the `template` property during rendering. It is the\nresponsibility of the layout template to retrieve the `template`\nproperty from the component (or alternatively, call `Handlebars.helpers.yield`,\n`{{yield}}`) to render it in the correct location.\nThis is useful for a component that has a shared wrapper, but which delegates\nthe rendering of the contents of the wrapper to the `template` property\non a subclass.",
            "itemtype": "property",
            "name": "layout",
            "type": "Function",
            "access": "public",
            "tagname": "",
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/component.js",
            "line": 823,
            "description": "The name of the layout to lookup if no layout is provided.\nBy default `Ember.Component` will lookup a template with this name in\n`Ember.TEMPLATES` (a shared global object).",
            "itemtype": "property",
            "name": "layoutName",
            "type": "String",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/component.js",
            "line": 833,
            "description": "Returns a jQuery object for this component's element. If you pass in a selector\nstring, this method will return a jQuery object, using the current element\nas its buffer.\nFor example, calling `component.$('li')` will return a jQuery object containing\nall of the `li` elements inside the DOM element of this component.",
            "itemtype": "method",
            "name": "$",
            "params": [
                {
                    "name": "selector",
                    "description": "a jQuery-compatible selector string",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "the jQuery object for the DOM node",
                "type": "JQuery"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/component.js",
            "line": 845,
            "description": "The HTML `id` of the component's element in the DOM. You can provide this\nvalue yourself but it must be unique (just as in HTML):\n\n```handlebars\n{{my-component elementId=\"a-really-cool-id\"}}\n```\nIf not manually set a default value will be provided by the framework.\nOnce rendered an element's `elementId` is considered immutable and you\nshould never change it. If you need to compute a dynamic value for the\n`elementId`, you should do this when the component or element is being\ninstantiated:\n\n```javascript\nexport default Ember.Component.extend({\n  init() {\n    this._super(...arguments);\n\n    var index = this.get('index');\n    this.set('elementId', `component-id${index}`);\n  }\n});\n```",
            "itemtype": "property",
            "name": "elementId",
            "type": "String",
            "access": "public",
            "tagname": "",
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/component.js",
            "line": 874,
            "description": "If `false`, the view will appear hidden in DOM.",
            "itemtype": "property",
            "name": "isVisible",
            "type": "Boolean",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-glimmer",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-glimmer/lib/helper.js",
            "line": 60,
            "description": "On a class-based helper, it may be useful to force a recomputation of that\nhelpers value. This is akin to `rerender` on a component.\n\nFor example, this component will rerender when the `currentUser` on a\nsession service changes:\n\n```js\n// app/helpers/current-user-email.js\nexport default Ember.Helper.extend({\n  session: Ember.inject.service(),\n  onNewUser: Ember.observer('session.currentUser', function() {\n    this.recompute();\n  }),\n  compute() {\n    return this.get('session.currentUser.email');\n  }\n});\n```",
            "itemtype": "method",
            "name": "recompute",
            "access": "public",
            "tagname": "",
            "since": "1.13.0",
            "class": "Ember.Helper",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-glimmer/lib/helper.js",
            "line": 88,
            "description": "Override this function when writing a class-based helper.",
            "itemtype": "method",
            "name": "compute",
            "params": [
                {
                    "name": "params",
                    "description": "The positional arguments to the helper",
                    "type": "Array"
                },
                {
                    "name": "hash",
                    "description": "The named arguments to the helper",
                    "type": "Object"
                }
            ],
            "access": "public",
            "tagname": "",
            "since": "1.13.0",
            "class": "Ember.Helper",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-glimmer/lib/helper.js",
            "line": 103,
            "description": "In many cases, the ceremony of a full `Ember.Helper` class is not required.\nThe `helper` method create pure-function helpers without instances. For\nexample:\n\n```js\n// app/helpers/format-currency.js\nexport default Ember.Helper.helper(function(params, hash) {\n  let cents = params[0];\n  let currency = hash.currency;\n  return `${currency}${cents * 0.01}`;\n});\n```",
            "static": 1,
            "params": [
                {
                    "name": "helper",
                    "description": "The helper function",
                    "type": "Function"
                }
            ],
            "itemtype": "method",
            "name": "helper",
            "access": "public",
            "tagname": "",
            "since": "1.13.0",
            "class": "Ember.Helper",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-glimmer/lib/index.js",
            "line": 83,
            "description": "Use the `{{with}}` helper when you want to alias a property to a new name. This is helpful\nfor semantic clarity as it allows you to retain default scope or to reference a property from another\n`{{with}}` block.\n\nIf the aliased property is \"falsey\", for example: `false`, `undefined` `null`, `\"\"`, `0`, NaN or\nan empty array, the block will not be rendered.\n\n```handlebars\n{{! Will only render if user.posts contains items}}\n{{#with user.posts as |blogPosts|}}\n  <div class=\"notice\">\n    There are {{blogPosts.length}} blog posts written by {{user.name}}.\n  </div>\n  {{#each blogPosts as |post|}}\n    <li>{{post.title}}</li>\n  {{/each}}\n{{/with}}\n```\n\nWithout the `as` operator, it would be impossible to reference `user.name` in the example above.\n\nNOTE: The alias should not reuse a name from the bound property path.\n\nFor example: `{{#with foo.bar as |foo|}}` is not supported because it attempts to alias using\nthe first part of the property path, `foo`. Instead, use `{{#with foo.bar as |baz|}}`.",
            "itemtype": "method",
            "name": "with",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "HTML string",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember.Templates.helpers",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-glimmer/lib/index.js",
            "line": 118,
            "description": "Execute the `debugger` statement in the current template's context.\n\n```handlebars\n{{debugger}}\n```\n\nWhen using the debugger helper you will have access to a `get` function. This\nfunction retrieves values available in the context of the template.\nFor example, if you're wondering why a value `{{foo}}` isn't rendering as\nexpected within a template, you could place a `{{debugger}}` statement and,\nwhen the `debugger;` breakpoint is hit, you can attempt to retrieve this value:\n\n```\n> get('foo')\n```\n\n`get` is also aware of keywords. So in this situation\n\n```handlebars\n{{#each items as |item|}}\n  {{debugger}}\n{{/each}}\n```\n\nYou'll be able to get values from the current item:\n\n```\n> get('item.name')\n```\n\nYou can also access the context of the view to make sure it is the object that\nyou expect:\n\n```\n> context\n```",
            "itemtype": "method",
            "name": "debugger",
            "access": "public",
            "tagname": "",
            "class": "Ember.Templates.helpers",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-glimmer/lib/index.js",
            "line": 161,
            "description": "The `partial` helper renders another template without\nchanging the template context:\n\n```handlebars\n{{foo}}\n{{partial \"nav\"}}\n```\n\nThe above example template will render a template named\n\"-nav\", which has the same context as the parent template\nit's rendered into, so if the \"-nav\" template also referenced\n`{{foo}}`, it would print the same thing as the `{{foo}}`\nin the above example.\n\nIf a \"-nav\" template isn't found, the `partial` helper will\nfall back to a template named \"nav\".\n\n### Bound template names\n\nThe parameter supplied to `partial` can also be a path\nto a property containing a template name, e.g.:\n\n```handlebars\n{{partial someTemplateName}}\n```\n\nThe above example will look up the value of `someTemplateName`\non the template context (e.g. a controller) and use that\nvalue as the name of the template to render. If the resolved\nvalue is falsy, nothing will be rendered. If `someTemplateName`\nchanges, the partial will be re-rendered using the new template\nname.",
            "itemtype": "method",
            "name": "partial",
            "params": [
                {
                    "name": "partialName",
                    "description": "The name of the template to render minus the leading underscore.",
                    "type": "String"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Ember.Templates.helpers",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-glimmer/lib/make-bound-helper.js",
            "line": 8,
            "description": "Create a bound helper. Accepts a function that receives the ordered and hash parameters\nfrom the template. If a bound property was provided in the template, it will be resolved to its\nvalue and any changes to the bound property cause the helper function to be re-run with the updated\nvalues.\n\n* `params` - An array of resolved ordered parameters.\n* `hash` - An object containing the hash parameters.\n\nFor example:\n\n* With an unquoted ordered parameter:\n\n  ```javascript\n  {{x-capitalize foo}}\n  ```\n\n  Assuming `foo` was set to `\"bar\"`, the bound helper would receive `[\"bar\"]` as its first argument, and\n  an empty hash as its second.\n\n* With a quoted ordered parameter:\n\n  ```javascript\n  {{x-capitalize \"foo\"}}\n  ```\n\n  The bound helper would receive `[\"foo\"]` as its first argument, and an empty hash as its second.\n\n* With an unquoted hash parameter:\n\n  ```javascript\n  {{x-repeat \"foo\" count=repeatCount}}\n  ```\n\n  Assuming that `repeatCount` resolved to 2, the bound helper would receive `[\"foo\"]` as its first argument,\n  and { count: 2 } as its second.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "makeBoundHelper",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "since": "1.10.0",
            "class": "Ember.HTMLBars",
            "module": "ember",
            "submodule": "ember-glimmer"
        },
        {
            "file": "packages/ember-metal/lib/binding.js",
            "line": 51,
            "description": "This copies the Binding so it can be connected to another object.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "`this`",
                "type": "Ember.Binding"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember.Binding",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/binding.js",
            "line": 68,
            "description": "This will set `from` property path to the specified value. It will not\nattempt to resolve this property path to an actual object until you\nconnect the binding.\n\nThe binding will search for the property path starting at the root object\nyou pass when you `connect()` the binding. It follows the same rules as\n`get()` - see that method for more information.",
            "itemtype": "method",
            "name": "from",
            "params": [
                {
                    "name": "path",
                    "description": "The property path to connect to.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "`this`",
                "type": "Ember.Binding"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember.Binding",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/binding.js",
            "line": 87,
            "description": "This will set the `to` property path to the specified value. It will not\nattempt to resolve this property path to an actual object until you\nconnect the binding.\n\nThe binding will search for the property path starting at the root object\nyou pass when you `connect()` the binding. It follows the same rules as\n`get()` - see that method for more information.",
            "itemtype": "method",
            "name": "to",
            "params": [
                {
                    "name": "path",
                    "description": "A property path or tuple.",
                    "type": "String|Tuple"
                }
            ],
            "return": {
                "description": "`this`",
                "type": "Ember.Binding"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember.Binding",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/binding.js",
            "line": 106,
            "description": "Configures the binding as one way. A one-way binding will relay changes\non the `from` side to the `to` side, but not the other way around. This\nmeans that if you change the `to` side directly, the `from` side may have\na different value.",
            "itemtype": "method",
            "name": "oneWay",
            "return": {
                "description": "`this`",
                "type": "Ember.Binding"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember.Binding",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/binding.js",
            "line": 121,
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "string representation of binding",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember.Binding",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/binding.js",
            "line": 135,
            "description": "Attempts to connect this binding instance so that it can receive and relay\nchanges. This method will raise an exception if you have not set the\nfrom/to properties yet.",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "obj",
                    "description": "The root object for this binding.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "`this`",
                "type": "Ember.Binding"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember.Binding",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/binding.js",
            "line": 196,
            "description": "Disconnects the binding instance. Changes will no longer be relayed. You\nwill not usually need to call this method.",
            "itemtype": "method",
            "name": "disconnect",
            "return": {
                "description": "`this`",
                "type": "Ember.Binding"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember.Binding",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/binding.js",
            "line": 486,
            "description": "Global helper method to create a new binding. Just pass the root object\nalong with a `to` and `from` path to create and connect the binding.",
            "itemtype": "method",
            "name": "bind",
            "params": [
                {
                    "name": "obj",
                    "description": "The root object of the transform.",
                    "type": "Object"
                },
                {
                    "name": "to",
                    "description": "The path to the 'to' side of the binding.\n  Must be relative to obj.",
                    "type": "String"
                },
                {
                    "name": "from",
                    "description": "The path to the 'from' side of the binding.\n  Must be relative to obj or a global path.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "binding instance",
                "type": "Ember.Binding"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/computed.js",
            "line": 163,
            "description": "Call on a computed property to set it into non-cached mode. When in this\nmode the computed property will not automatically cache the return value.\n\nIt also does not automatically fire any change events. You must manually notify\nany changes if you want to observe this property.\n\nDependency keys have no effect on volatile properties as they are for cache\ninvalidation and notification when cached value is invalidated.\n\n```javascript\nlet outsideService = Ember.Object.extend({\n  value: Ember.computed(function() {\n    return OutsideService.getValue();\n  }).volatile()\n}).create();\n```",
            "itemtype": "method",
            "name": "volatile",
            "return": {
                "description": "this",
                "type": "Ember.ComputedProperty"
            },
            "chainable": 1,
            "access": "public",
            "tagname": "",
            "class": "Ember.ComputedProperty",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed.js",
            "line": 191,
            "description": "Call on a computed property to set it into read-only mode. When in this\nmode the computed property will throw an error when set.\n\n```javascript\nlet Person = Ember.Object.extend({\n  guid: Ember.computed(function() {\n    return 'guid-guid-guid';\n  }).readOnly()\n});\n\nlet person = Person.create();\n\nperson.set('guid', 'new-guid'); // will throw an exception\n```",
            "itemtype": "method",
            "name": "readOnly",
            "return": {
                "description": "this",
                "type": "Ember.ComputedProperty"
            },
            "chainable": 1,
            "access": "public",
            "tagname": "",
            "class": "Ember.ComputedProperty",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed.js",
            "line": 218,
            "description": "Sets the dependent keys on this computed property. Pass any number of\narguments containing key paths that this computed property depends on.\n\n```javascript\nlet President = Ember.Object.extend({\n  fullName: Ember.computed(function() {\n    return this.get('firstName') + ' ' + this.get('lastName');\n\n    // Tell Ember that this computed property depends on firstName\n    // and lastName\n  }).property('firstName', 'lastName')\n});\n\nlet president = President.create({\n  firstName: 'Barack',\n  lastName: 'Obama'\n});\n\npresident.get('fullName'); // 'Barack Obama'\n```",
            "itemtype": "method",
            "name": "property",
            "params": [
                {
                    "name": "path",
                    "description": "zero or more property paths",
                    "type": "String",
                    "multiple": true
                }
            ],
            "return": {
                "description": "this",
                "type": "Ember.ComputedProperty"
            },
            "chainable": 1,
            "access": "public",
            "tagname": "",
            "class": "Ember.ComputedProperty",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed.js",
            "line": 268,
            "description": "In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For example,\ncomputed property functions may close over variables that are then no longer\navailable for introspection.\n\nYou can pass a hash of these values to a computed property like this:\n\n```\nperson: Ember.computed(function() {\n  let personId = this.get('personId');\n  return App.Person.create({ id: personId });\n}).meta({ type: App.Person })\n```\n\nThe hash that you pass to the `meta()` function will be saved on the\ncomputed property descriptor under the `_meta` key. Ember runtime\nexposes a public API for retrieving these values from classes,\nvia the `metaForProperty()` function.",
            "itemtype": "method",
            "name": "meta",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "access": "public",
            "tagname": "",
            "class": "Ember.ComputedProperty",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed.js",
            "line": 552,
            "description": "Returns the cached value for a property, if one exists.\nThis can be useful for peeking at the value of a computed\nproperty that is generated lazily, without accidentally causing\nit to be created.",
            "itemtype": "method",
            "name": "cacheFor",
            "params": [
                {
                    "name": "obj",
                    "description": "the object whose property you want to check",
                    "type": "Object"
                },
                {
                    "name": "key",
                    "description": "the name of the property whose cached value you want\n  to return",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the cached value",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/deprecate_property.js",
            "line": 11,
            "description": "Used internally to allow changing properties in a backwards compatible way, and print a helpful\ndeprecation warning.",
            "itemtype": "method",
            "name": "deprecateProperty",
            "params": [
                {
                    "name": "object",
                    "description": "The object to add the deprecated property to.",
                    "type": "Object"
                },
                {
                    "name": "deprecatedKey",
                    "description": "The property to add (and print deprecation warnings upon accessing).",
                    "type": "String"
                },
                {
                    "name": "newKey",
                    "description": "The property that will be aliased.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "1.7.0",
            "class": "Descriptor",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/events.js",
            "line": 70,
            "description": "Add an event listener",
            "itemtype": "method",
            "name": "addListener",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "A target object or a function",
                    "type": "Object|Function"
                },
                {
                    "name": "method",
                    "description": "A function or the name of a function to be called on `target`",
                    "type": "Function|String"
                },
                {
                    "name": "once",
                    "description": "A flag whether a function should only be called once",
                    "type": "Boolean"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/events.js",
            "line": 112,
            "description": "Remove an event listener\n\nArguments should match those passed to `Ember.addListener`.",
            "itemtype": "method",
            "name": "removeListener",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "A target object or a function",
                    "type": "Object|Function"
                },
                {
                    "name": "method",
                    "description": "A function or the name of a function to be called on `target`",
                    "type": "Function|String"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/events.js",
            "line": 140,
            "description": "Suspend listener during callback.\n\nThis should only be used by the target of the event listener\nwhen it is taking an action that would cause the event, e.g.\nan object might suspend its property change listener while it is\nsetting that property.",
            "itemtype": "method",
            "name": "suspendListener",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "A target object or a function",
                    "type": "Object|Function"
                },
                {
                    "name": "method",
                    "description": "A function or the name of a function to be called on `target`",
                    "type": "Function|String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/events.js",
            "line": 162,
            "description": "Suspends multiple listeners during a callback.",
            "itemtype": "method",
            "name": "suspendListeners",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "eventNames",
                    "description": "Array of event names",
                    "type": "Array"
                },
                {
                    "name": "target",
                    "description": "A target object or a function",
                    "type": "Object|Function"
                },
                {
                    "name": "method",
                    "description": "A function or the name of a function to be called on `target`",
                    "type": "Function|String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/events.js",
            "line": 183,
            "description": "Return a list of currently watched events",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "watchedEvents",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/events.js",
            "line": 195,
            "description": "Send an event. The execution of suspended listeners\nis skipped, and once listeners are removed. A listener without\na target is executed on the passed object. If an array of actions\nis not passed, the actions stored on the passed object are invoked.",
            "itemtype": "method",
            "name": "sendEvent",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Optional parameters for each listener.",
                    "type": "Array"
                },
                {
                    "name": "actions",
                    "description": "Optional array of actions (listeners).",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "true"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/events.js",
            "line": 244,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "hasListeners",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/events.js",
            "line": 257,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "listenersFor",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/events.js",
            "line": 280,
            "description": "Define a property as a function that should be executed when\na specified event or events are triggered.\n\n\n``` javascript\nlet Job = Ember.Object.extend({\n  logCompleted: Ember.on('completed', function() {\n    console.log('Job completed!');\n  })\n});\n\nlet job = Job.create();\n\nEmber.sendEvent(job, 'completed'); // Logs 'Job completed!'\n ```",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "eventNames",
                    "description": "",
                    "type": "String",
                    "multiple": true
                },
                {
                    "name": "func",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "func"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/expand_properties.js",
            "line": 11,
            "description": "Expands `pattern`, invoking `callback` for each expansion.\n\nThe only pattern supported is brace-expansion, anything else will be passed\nonce to `callback` directly.\n\nExample\n\n```js\nfunction echo(arg){ console.log(arg); }\n\nEmber.expandProperties('foo.bar', echo);              //=> 'foo.bar'\nEmber.expandProperties('{foo,bar}', echo);            //=> 'foo', 'bar'\nEmber.expandProperties('foo.{bar,baz}', echo);        //=> 'foo.bar', 'foo.baz'\nEmber.expandProperties('{foo,bar}.baz', echo);        //=> 'foo.baz', 'bar.baz'\nEmber.expandProperties('foo.{bar,baz}.[]', echo)      //=> 'foo.bar.[]', 'foo.baz.[]'\nEmber.expandProperties('{foo,bar}.{spam,eggs}', echo) //=> 'foo.spam', 'foo.eggs', 'bar.spam', 'bar.eggs'\nEmber.expandProperties('{foo}.bar.{baz}')             //=> 'foo.bar.baz'\n```",
            "itemtype": "method",
            "name": "expandProperties",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "pattern",
                    "description": "The property pattern to expand.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to invoke.  It is invoked once per\nexpansion, and is passed the expansion.",
                    "type": "Function"
                }
            ],
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/features.js",
            "line": 20,
            "description": "Determine whether the specified `feature` is enabled. Used by Ember's\nbuild tools to exclude experimental features from beta/stable builds.\n\nYou can define the following configuration options:\n\n* `EmberENV.ENABLE_OPTIONAL_FEATURES` - enable any features that have not been explicitly\n  enabled/disabled.",
            "itemtype": "method",
            "name": "isEnabled",
            "params": [
                {
                    "name": "feature",
                    "description": "The feature to check",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "since": "1.1.0",
            "access": "public",
            "tagname": "",
            "class": "Ember.FEATURES",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/get_properties.js",
            "line": 3,
            "description": "To get multiple properties at once, call `Ember.getProperties`\nwith an object followed by a list of strings or an array:\n\n```javascript\nEmber.getProperties(record, 'firstName', 'lastName', 'zipCode');\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```\n\nis equivalent to:\n\n```javascript\nEmber.getProperties(record, ['firstName', 'lastName', 'zipCode']);\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```",
            "itemtype": "method",
            "name": "getProperties",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "list",
                    "description": "of keys to get",
                    "type": "String...|Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember",
            "module": "ember"
        },
        {
            "file": "packages/ember-metal/lib/instrumentation.js",
            "line": 78,
            "description": "Notifies event's subscribers, calls `before` and `after` hooks.",
            "itemtype": "method",
            "name": "instrument",
            "params": [
                {
                    "name": "name",
                    "description": "Namespaced event name.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "_payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Function that you're instrumenting.",
                    "type": "Function"
                },
                {
                    "name": "binding",
                    "description": "Context that instrument function is called with.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember.Instrumentation",
            "module": "ember",
            "namespace": "Ember.Instrumentation"
        },
        {
            "file": "packages/ember-metal/lib/instrumentation.js",
            "line": 181,
            "description": "Subscribes to a particular event or instrumented block of code.",
            "itemtype": "method",
            "name": "subscribe",
            "params": [
                {
                    "name": "pattern",
                    "description": "Namespaced event name.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "object",
                    "description": "Before and After hooks.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Subscriber"
            },
            "access": "private",
            "tagname": "",
            "class": "Ember.Instrumentation",
            "module": "ember",
            "namespace": "Ember.Instrumentation"
        },
        {
            "file": "packages/ember-metal/lib/instrumentation.js",
            "line": 222,
            "description": "Unsubscribes from a particular event or instrumented block of code.",
            "itemtype": "method",
            "name": "unsubscribe",
            "params": [
                {
                    "name": "subscriber",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember.Instrumentation",
            "module": "ember",
            "namespace": "Ember.Instrumentation"
        },
        {
            "file": "packages/ember-metal/lib/instrumentation.js",
            "line": 244,
            "description": "Resets `Ember.Instrumentation` by flushing list of subscribers.",
            "itemtype": "method",
            "name": "reset",
            "access": "private",
            "tagname": "",
            "class": "Ember.Instrumentation",
            "module": "ember",
            "namespace": "Ember.Instrumentation"
        },
        {
            "file": "packages/ember-metal/lib/is_blank.js",
            "line": 3,
            "description": "A value is blank if it is empty or a whitespace string.\n\n```javascript\nEmber.isBlank();                // true\nEmber.isBlank(null);            // true\nEmber.isBlank(undefined);       // true\nEmber.isBlank('');              // true\nEmber.isBlank([]);              // true\nEmber.isBlank('\\n\\t');          // true\nEmber.isBlank('  ');            // true\nEmber.isBlank({});              // false\nEmber.isBlank('\\n\\t Hello');    // false\nEmber.isBlank('Hello world');   // false\nEmber.isBlank([1,2,3]);         // false\n```",
            "itemtype": "method",
            "name": "isBlank",
            "params": [
                {
                    "name": "obj",
                    "description": "Value to test",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "since": "1.5.0",
            "access": "public",
            "tagname": "",
            "class": "Ember",
            "module": "ember"
        },
        {
            "file": "packages/ember-metal/lib/is_empty.js",
            "line": 4,
            "description": "Verifies that a value is `null` or an empty string, empty array,\nor empty function.\n\nConstrains the rules on `Ember.isNone` by returning true for empty\nstring and empty arrays.\n\n```javascript\nEmber.isEmpty();                // true\nEmber.isEmpty(null);            // true\nEmber.isEmpty(undefined);       // true\nEmber.isEmpty('');              // true\nEmber.isEmpty([]);              // true\nEmber.isEmpty({});              // false\nEmber.isEmpty('Adam Hawkins');  // false\nEmber.isEmpty([0,1,2]);         // false\nEmber.isEmpty('\\n\\t');          // false\nEmber.isEmpty('  ');            // false\n```",
            "itemtype": "method",
            "name": "isEmpty",
            "params": [
                {
                    "name": "obj",
                    "description": "Value to test",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember",
            "module": "ember"
        },
        {
            "file": "packages/ember-metal/lib/is_none.js",
            "line": 1,
            "description": "Returns true if the passed value is null or undefined. This avoids errors\nfrom JSLint complaining about use of ==, which can be technically\nconfusing.\n\n```javascript\nEmber.isNone();              // true\nEmber.isNone(null);          // true\nEmber.isNone(undefined);     // true\nEmber.isNone('');            // false\nEmber.isNone([]);            // false\nEmber.isNone(function() {}); // false\n```",
            "itemtype": "method",
            "name": "isNone",
            "params": [
                {
                    "name": "obj",
                    "description": "Value to test",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember",
            "module": "ember"
        },
        {
            "file": "packages/ember-metal/lib/is_present.js",
            "line": 3,
            "description": "A value is present if it not `isBlank`.\n\n```javascript\nEmber.isPresent();                // false\nEmber.isPresent(null);            // false\nEmber.isPresent(undefined);       // false\nEmber.isPresent('');              // false\nEmber.isPresent('  ');            // false\nEmber.isPresent('\\n\\t');          // false\nEmber.isPresent([]);              // false\nEmber.isPresent({ length: 0 })    // false\nEmber.isPresent(false);           // true\nEmber.isPresent(true);            // true\nEmber.isPresent('string');        // true\nEmber.isPresent(0);               // true\nEmber.isPresent(function() {})    // true\nEmber.isPresent({});              // true\nEmber.isPresent(false);           // true\nEmber.isPresent('\\n\\t Hello');    // true\nEmber.isPresent([1,2,3]);         // true\n```",
            "itemtype": "method",
            "name": "isPresent",
            "params": [
                {
                    "name": "obj",
                    "description": "Value to test",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "since": "1.8.0",
            "access": "public",
            "tagname": "",
            "class": "Ember",
            "module": "ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 74,
            "itemtype": "method",
            "name": "create",
            "static": 1,
            "return": {
                "description": "",
                "type": "Ember.OrderedSet"
            },
            "access": "private",
            "tagname": "",
            "class": "Ember.OrderedSet",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 88,
            "itemtype": "method",
            "name": "clear",
            "access": "private",
            "tagname": "",
            "class": "Ember.OrderedSet",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 98,
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "guid",
                    "description": "(optional, and for internal use)"
                }
            ],
            "return": {
                "description": "",
                "type": "Ember.OrderedSet"
            },
            "access": "private",
            "tagname": "",
            "class": "Ember.OrderedSet",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 118,
            "since": "1.8.0",
            "itemtype": "method",
            "name": "delete",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "_guid",
                    "description": "(optional and for internal use only)"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "Ember.OrderedSet",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 144,
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "Ember.OrderedSet",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 153,
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "Ember.OrderedSet",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 168,
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "self",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember.OrderedSet",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 194,
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "Ember.OrderedSet",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 203,
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "",
                "type": "Ember.OrderedSet"
            },
            "access": "private",
            "tagname": "",
            "class": "Ember.OrderedSet",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 252,
            "itemtype": "method",
            "name": "create",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "Ember.Map",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 265,
            "description": "This property will change as the number of objects in the map changes.",
            "since": "1.8.0",
            "itemtype": "property",
            "name": "size",
            "type": "number",
            "default": "0",
            "access": "private",
            "tagname": "",
            "class": "Ember.Map",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 276,
            "description": "Retrieve the value associated with a given key.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "the value associated with the key, or `undefined`",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": "Ember.Map",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 293,
            "description": "Adds a value to the map. If a value for the given key has already been\nprovided, the new value will replace the old value.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "Ember.Map"
            },
            "access": "private",
            "tagname": "",
            "class": "Ember.Map",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 320,
            "description": "Removes a value from the map for an associated key.",
            "since": "1.8.0",
            "itemtype": "method",
            "name": "delete",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "true if an item was removed, false otherwise",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "Ember.Map",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 346,
            "description": "Check whether a key is present.",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "true if the item was present, false otherwise",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "Ember.Map",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 358,
            "description": "Iterate over all the keys and values. Calls the function once\nfor each key, passing in value, key, and the map being iterated over,\nin that order.\n\nThe keys are guaranteed to be iterated over in insertion order.",
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "self",
                    "description": "if passed, the `this` value inside the\n  callback. By default, `this` is the map.",
                    "type": "*"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember.Map",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 391,
            "itemtype": "method",
            "name": "clear",
            "access": "private",
            "tagname": "",
            "class": "Ember.Map",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 401,
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "",
                "type": "Ember.Map"
            },
            "access": "private",
            "tagname": "",
            "class": "Ember.Map",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 425,
            "itemtype": "method",
            "name": "create",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "optional": true,
                    "props": [
                        {
                            "name": "defaultValue",
                            "description": "",
                            "type": "*",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "If options are passed, returns\n  `Ember.MapWithDefault` otherwise returns `Ember.Map`",
                "type": "Ember.MapWithDefault|Ember.Map"
            },
            "access": "private",
            "tagname": "",
            "class": "Ember.MapWithDefault",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 447,
            "description": "Retrieve the value associated with a given key.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "the value associated with the key, or the default value",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": "Ember.MapWithDefault",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 467,
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "",
                "type": "Ember.MapWithDefault"
            },
            "access": "private",
            "tagname": "",
            "class": "Ember.MapWithDefault",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/merge.js",
            "line": 1,
            "description": "Merge the contents of two objects together into the first object.\n\n```javascript\nEmber.merge({ first: 'Tom' }, { last: 'Dale' }); // { first: 'Tom', last: 'Dale' }\nvar a = { first: 'Yehuda' };\nvar b = { last: 'Katz' };\nEmber.merge(a, b); // a == { first: 'Yehuda', last: 'Katz' }, b == { last: 'Katz' }\n```",
            "itemtype": "method",
            "name": "merge",
            "params": [
                {
                    "name": "original",
                    "description": "The object to merge into",
                    "type": "Object"
                },
                {
                    "name": "updates",
                    "description": "The object to copy properties from",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember",
            "module": "ember"
        },
        {
            "file": "packages/ember-metal/lib/meta.js",
            "line": 540,
            "description": "Retrieves the meta hash for an object. If `writable` is true ensures the\nhash is writable for this object as well.\n\nThe meta object contains information about computed property descriptors as\nwell as any watched properties and other information. You generally will\nnot access this information directly but instead work with higher level\nmethods that manipulate this hash indirectly.",
            "itemtype": "method",
            "name": "meta",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to retrieve meta for",
                    "type": "Object"
                },
                {
                    "name": "writable",
                    "description": "Pass `false` if you do not intend to modify\n  the meta hash, allowing the method to avoid making an unnecessary copy.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "the meta hash for an object",
                "type": "Object"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/mixin.js",
            "line": 403,
            "itemtype": "method",
            "name": "mixin",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "mixins",
                    "description": "",
                    "multiple": true
                }
            ],
            "return": {
                "description": "obj"
            },
            "access": "private",
            "tagname": "",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/mixin.js",
            "line": 520,
            "itemtype": "method",
            "name": "create",
            "static": 1,
            "params": [
                {
                    "name": "arguments",
                    "description": "",
                    "multiple": true
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Ember.Mixin",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/mixin.js",
            "line": 535,
            "itemtype": "method",
            "name": "reopen",
            "params": [
                {
                    "name": "arguments",
                    "description": "",
                    "multiple": true
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember.Mixin",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/mixin.js",
            "line": 572,
            "itemtype": "method",
            "name": "apply",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "applied object"
            },
            "access": "private",
            "tagname": "",
            "class": "Ember.Mixin",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/mixin.js",
            "line": 603,
            "itemtype": "method",
            "name": "detect",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "Ember.Mixin",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/mixin.js",
            "line": 667,
            "description": "Denotes a required property for a mixin",
            "itemtype": "method",
            "name": "required",
            "access": "private",
            "tagname": "",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/mixin.js",
            "line": 690,
            "description": "Makes a method available via an additional name.\n\n```javascript\nApp.Person = Ember.Object.extend({\n  name: function() {\n    return 'Tomhuda Katzdale';\n  },\n  moniker: Ember.aliasMethod('name')\n});\n\nlet goodGuy = App.Person.create();\n\ngoodGuy.name();    // 'Tomhuda Katzdale'\ngoodGuy.moniker(); // 'Tomhuda Katzdale'\n```",
            "itemtype": "method",
            "name": "aliasMethod",
            "params": [
                {
                    "name": "methodName",
                    "description": "name of the method to alias",
                    "type": "String"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/mixin.js",
            "line": 720,
            "description": "Specify a method that observes property changes.\n\n```javascript\nEmber.Object.extend({\n  valueObserver: Ember.observer('value', function() {\n    // Executes whenever the \"value\" property changes\n  })\n});\n```\n\nAlso available as `Function.prototype.observes` if prototype extensions are\nenabled.",
            "itemtype": "method",
            "name": "observer",
            "params": [
                {
                    "name": "propertyNames",
                    "description": "",
                    "type": "String",
                    "multiple": true
                },
                {
                    "name": "func",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "func"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/mixin.js",
            "line": 772,
            "description": "Specify a method that observes property changes.\n\n```javascript\nEmber.Object.extend({\n  valueObserver: Ember.immediateObserver('value', function() {\n    // Executes whenever the \"value\" property changes\n  })\n});\n```\n\nIn the future, `Ember.observer` may become asynchronous. In this event,\n`Ember.immediateObserver` will maintain the synchronous behavior.\n\nAlso available as `Function.prototype.observesImmediately` if prototype extensions are\nenabled.",
            "itemtype": "method",
            "name": "_immediateObserver",
            "params": [
                {
                    "name": "propertyNames",
                    "description": "",
                    "type": "String",
                    "multiple": true
                },
                {
                    "name": "func",
                    "description": "",
                    "type": "Function"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "Use `Ember.observer` instead.",
            "return": {
                "description": "func"
            },
            "access": "private",
            "tagname": "",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/mixin.js",
            "line": 811,
            "description": "When observers fire, they are called with the arguments `obj`, `keyName`.\n\nNote, `@each.property` observer is called per each add or replace of an element\nand it's not called with a specific enumeration item.\n\nA `_beforeObserver` fires before a property changes.",
            "itemtype": "method",
            "name": "beforeObserver",
            "params": [
                {
                    "name": "propertyNames",
                    "description": "",
                    "type": "String",
                    "multiple": true
                },
                {
                    "name": "func",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "func"
            },
            "deprecated": true,
            "access": "private",
            "tagname": "",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/observer.js",
            "line": 27,
            "itemtype": "method",
            "name": "addObserver",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "_path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "",
                    "type": "Object|Function"
                },
                {
                    "name": "method",
                    "description": "",
                    "type": "Function|String",
                    "optional": true
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/observer.js",
            "line": 47,
            "itemtype": "method",
            "name": "removeObserver",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "",
                    "type": "Object|Function"
                },
                {
                    "name": "method",
                    "description": "",
                    "type": "Function|String",
                    "optional": true
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/observer.js",
            "line": 63,
            "itemtype": "method",
            "name": "_addBeforeObserver",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "",
                    "type": "Object|Function"
                },
                {
                    "name": "method",
                    "description": "",
                    "type": "Function|String",
                    "optional": true
                }
            ],
            "deprecated": true,
            "access": "private",
            "tagname": "",
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/observer.js",
            "line": 93,
            "itemtype": "method",
            "name": "removeBeforeObserver",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "",
                    "type": "Object|Function"
                },
                {
                    "name": "method",
                    "description": "",
                    "type": "Function|String",
                    "optional": true
                }
            ],
            "deprecated": true,
            "access": "private",
            "tagname": "",
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/properties.js",
            "line": 84,
            "description": "NOTE: This is a low-level method used by other parts of the API. You almost\nnever want to call this method directly. Instead you should use\n`Ember.mixin()` to define new properties.\n\nDefines a property on an object. This method works much like the ES5\n`Object.defineProperty()` method except that it can also accept computed\nproperties and other special descriptors.\n\nNormally this method takes only three parameters. However if you pass an\ninstance of `Descriptor` as the third param then you can pass an\noptional value as the fourth parameter. This is often more efficient than\ncreating new descriptor hashes for each property.\n\n## Examples\n\n```javascript\n// ES5 compatible mode\nEmber.defineProperty(contact, 'firstName', {\n  writable: true,\n  configurable: false,\n  enumerable: true,\n  value: 'Charles'\n});\n\n// define a simple property\nEmber.defineProperty(contact, 'lastName', undefined, 'Jolley');\n\n// define a computed property\nEmber.defineProperty(contact, 'fullName', Ember.computed('firstName', 'lastName', function() {\n  return this.firstName+' '+this.lastName;\n}));\n```",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "defineProperty",
            "params": [
                {
                    "name": "obj",
                    "description": "the object to define this property on. This may be a prototype.",
                    "type": "Object"
                },
                {
                    "name": "keyName",
                    "description": "the name of the property",
                    "type": "String"
                },
                {
                    "name": "desc",
                    "description": "an instance of `Descriptor` (typically a\n  computed property) or an ES5 descriptor.\n  You must provide this or `data` but not both.",
                    "type": "Descriptor",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "something other than a descriptor, that will\n  become the explicit value of this property.",
                    "type": "*",
                    "optional": true
                }
            ],
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/property_events.js",
            "line": 26,
            "description": "This function is called just before an object property is about to change.\nIt will notify any before observers and prepare caches among other things.\n\nNormally you will not need to call this method directly but if for some\nreason you can't directly watch a property you can invoke this method\nmanually along with `Ember.propertyDidChange()` which you should call just\nafter the property value changes.",
            "itemtype": "method",
            "name": "propertyWillChange",
            "params": [
                {
                    "name": "obj",
                    "description": "The object with the property that will change",
                    "type": "Object"
                },
                {
                    "name": "keyName",
                    "description": "The property key (or path) that will change.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "access": "private",
            "tagname": "",
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/property_events.js",
            "line": 64,
            "description": "This function is called just after an object property has changed.\nIt will notify any observers and clear caches among other things.\n\nNormally you will not need to call this method directly but if for some\nreason you can't directly watch a property you can invoke this method\nmanually along with `Ember.propertyWillChange()` which you should call just\nbefore the property value changes.",
            "itemtype": "method",
            "name": "propertyDidChange",
            "params": [
                {
                    "name": "obj",
                    "description": "The object with the property that will change",
                    "type": "Object"
                },
                {
                    "name": "keyName",
                    "description": "The property key (or path) that will change.",
                    "type": "String"
                },
                {
                    "name": "meta",
                    "description": "The objects meta.",
                    "type": "Meta"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "access": "private",
            "tagname": "",
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/property_events.js",
            "line": 213,
            "itemtype": "method",
            "name": "beginPropertyChanges",
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/property_events.js",
            "line": 222,
            "itemtype": "method",
            "name": "endPropertyChanges",
            "access": "private",
            "tagname": "",
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/property_events.js",
            "line": 234,
            "description": "Make a series of property changes together in an\nexception-safe way.\n\n```javascript\nEmber.changeProperties(function() {\n  obj1.set('foo', mayBlowUpWhenSet);\n  obj2.set('bar', baz);\n});\n```",
            "itemtype": "method",
            "name": "changeProperties",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "binding",
                    "description": "",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/property_get.js",
            "line": 21,
            "description": "Gets the value of a property on an object. If the property is computed,\nthe function will be invoked. If the property is not defined but the\nobject implements the `unknownProperty` method then that will be invoked.\n\n```javascript\nEmber.get(obj, \"name\");\n```\n\nIf you plan to run on IE8 and older browsers then you should use this\nmethod anytime you want to retrieve a property on an object that you don't\nknow for sure is private. (Properties beginning with an underscore '_'\nare considered private.)\n\nOn all newer browsers, you only need to use this method to retrieve\nproperties if the property might not be defined on the object and you want\nto respect the `unknownProperty` handler. Otherwise you can ignore this\nmethod.\n\nNote that if the object itself is `undefined`, this method will throw\nan error.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to retrieve from.",
                    "type": "Object"
                },
                {
                    "name": "keyName",
                    "description": "The property key to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the property value or `null`.",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/property_get.js",
            "line": 106,
            "description": "Retrieves the value of a property from an Object, or a default value in the\ncase that the property returns `undefined`.\n\n```javascript\nEmber.getWithDefault(person, 'lastName', 'Doe');\n```",
            "itemtype": "method",
            "name": "getWithDefault",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to retrieve from.",
                    "type": "Object"
                },
                {
                    "name": "keyName",
                    "description": "The name of the property to retrieve",
                    "type": "String"
                },
                {
                    "name": "defaultValue",
                    "description": "The value to return if the property value is undefined",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The property value or the defaultValue.",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/property_set.js",
            "line": 19,
            "description": "Sets the value of a property on an object, respecting computed properties\nand notifying observers and other listeners of the change. If the\nproperty is not defined but the object implements the `setUnknownProperty`\nmethod then that will be invoked as well.\n\n```javascript\nEmber.set(obj, \"name\", value);\n```",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to modify.",
                    "type": "Object"
                },
                {
                    "name": "keyName",
                    "description": "The property key to set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to set",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the passed value.",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/property_set.js",
            "line": 131,
            "description": "Error-tolerant form of `Ember.set`. Will not blow up if any part of the\nchain is `undefined`, `null`, or destroyed.\n\nThis is primarily used when syncing bindings, which may try to update after\nan object has been destroyed.",
            "itemtype": "method",
            "name": "trySet",
            "params": [
                {
                    "name": "root",
                    "description": "The object to modify.",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "The property path to set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to set",
                    "type": "Object"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/run_loop.js",
            "line": 80,
            "description": "If no run-loop is present, it creates a new one. If a run loop is\npresent it will queue itself to run on the existing run-loops action\nqueue.\n\nPlease note: This is not for normal usage, and should be used sparingly.\n\nIf invoked when not within a run loop:\n\n```javascript\nrun.join(function() {\n  // creates a new run-loop\n});\n```\n\nAlternatively, if called within an existing run loop:\n\n```javascript\nrun(function() {\n  // creates a new run-loop\n  run.join(function() {\n    // joins with the existing run-loop, and queues for invocation on\n    // the existing run-loops action queue.\n  });\n});\n```",
            "itemtype": "method",
            "name": "join",
            "params": [
                {
                    "name": "target",
                    "description": "target of method to call",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "method",
                    "description": "Method to invoke.\n  May be a function or a string. If you pass a string\n  then it will be looked up on the passed target.",
                    "type": "Function|String"
                },
                {
                    "name": "args*",
                    "description": "Any additional arguments you wish to pass to the method.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Return value from invoking the passed function. Please note,\nwhen called within an existing loop, no return value is possible.",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/run_loop.js",
            "line": 122,
            "description": "Allows you to specify which context to call the specified function in while\nadding the execution of that function to the Ember run loop. This ability\nmakes this method a great way to asynchronously integrate third-party libraries\ninto your Ember application.\n\n`run.bind` takes two main arguments, the desired context and the function to\ninvoke in that context. Any additional arguments will be supplied as arguments\nto the function that is passed in.\n\nLet's use the creation of a TinyMCE component as an example. Currently,\nTinyMCE provides a setup configuration option we can use to do some processing\nafter the TinyMCE instance is initialized but before it is actually rendered.\nWe can use that setup option to do some additional setup for our component.\nThe component itself could look something like the following:\n\n```javascript\nApp.RichTextEditorComponent = Ember.Component.extend({\n  initializeTinyMCE: Ember.on('didInsertElement', function() {\n    tinymce.init({\n      selector: '#' + this.$().prop('id'),\n      setup: Ember.run.bind(this, this.setupEditor)\n    });\n  }),\n\n  setupEditor: function(editor) {\n    this.set('editor', editor);\n\n    editor.on('change', function() {\n      console.log('content changed!');\n    });\n  }\n});\n```\n\nIn this example, we use Ember.run.bind to bind the setupEditor method to the\ncontext of the App.RichTextEditorComponent and to have the invocation of that\nmethod be safely handled and executed by the Ember run loop.",
            "itemtype": "method",
            "name": "bind",
            "params": [
                {
                    "name": "target",
                    "description": "target of method to call",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "method",
                    "description": "Method to invoke.\n  May be a function or a string. If you pass a string\n  then it will be looked up on the passed target.",
                    "type": "Function|String"
                },
                {
                    "name": "args*",
                    "description": "Any additional arguments you wish to pass to the method.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "returns a new function that will always have a particular context",
                "type": "Function"
            },
            "since": "1.4.0",
            "access": "public",
            "tagname": "",
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/run_loop.js",
            "line": 178,
            "description": "Begins a new RunLoop. Any deferred actions invoked after the begin will\nbe buffered until you invoke a matching call to `run.end()`. This is\na lower-level way to use a RunLoop instead of using `run()`.\n\n```javascript\nrun.begin();\n// code to be executed within a RunLoop\nrun.end();\n```",
            "itemtype": "method",
            "name": "begin",
            "return": {
                "description": "",
                "type": "Void"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/run_loop.js",
            "line": 197,
            "description": "Ends a RunLoop. This must be called sometime after you call\n`run.begin()` to flush any deferred actions. This is a lower-level way\nto use a RunLoop instead of using `run()`.\n\n```javascript\nrun.begin();\n// code to be executed within a RunLoop\nrun.end();\n```",
            "itemtype": "method",
            "name": "end",
            "return": {
                "description": "",
                "type": "Void"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/run_loop.js",
            "line": 216,
            "description": "Array of named queues. This array determines the order in which queues\nare flushed at the end of the RunLoop. You can define your own queues by\nsimply adding the queue name to this array. Normally you should not need\nto inspect or modify this property.",
            "itemtype": "property",
            "name": "queues",
            "type": "Array",
            "default": "['sync', 'actions', 'destroy']",
            "access": "private",
            "tagname": "",
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/run_loop.js",
            "line": 228,
            "description": "Adds the passed target/method and any optional arguments to the named\nqueue to be executed at the end of the RunLoop. If you have not already\nstarted a RunLoop when calling this method one will be started for you\nautomatically.\n\nAt the end of a RunLoop, any methods scheduled in this way will be invoked.\nMethods will be invoked in an order matching the named queues defined in\nthe `run.queues` property.\n\n```javascript\nrun.schedule('sync', this, function() {\n  // this will be executed in the first RunLoop queue, when bindings are synced\n  console.log('scheduled on sync queue');\n});\n\nrun.schedule('actions', this, function() {\n  // this will be executed in the 'actions' queue, after bindings have synced.\n  console.log('scheduled on actions queue');\n});\n\n// Note the functions will be run in order based on the run queues order.\n// Output would be:\n//   scheduled on sync queue\n//   scheduled on actions queue\n```",
            "itemtype": "method",
            "name": "schedule",
            "params": [
                {
                    "name": "queue",
                    "description": "The name of the queue to schedule against.\n  Default queues are 'sync' and 'actions'",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "target object to use as the context when invoking a method.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "method",
                    "description": "The method to invoke. If you pass a string it\n  will be resolved on the target object at the time the scheduled item is\n  invoked allowing you to change the target function.",
                    "type": "String|Function"
                },
                {
                    "name": "arguments*",
                    "description": "Optional arguments to be passed to the queued method.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Timer information for use in cancelling, see `run.cancel`.",
                "type": "*"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/run_loop.js",
            "line": 286,
            "description": "Immediately flushes any events scheduled in the 'sync' queue. Bindings\nuse this queue so this method is a useful way to immediately force all\nbindings in the application to sync.\n\nYou should call this method anytime you need any changed state to propagate\nthroughout the app immediately without repainting the UI (which happens\nin the later 'render' queue added by the `ember-views` package).\n\n```javascript\nrun.sync();\n```",
            "itemtype": "method",
            "name": "sync",
            "return": {
                "description": "",
                "type": "Void"
            },
            "access": "private",
            "tagname": "",
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/run_loop.js",
            "line": 309,
            "description": "Invokes the passed target/method and optional arguments after a specified\nperiod of time. The last parameter of this method must always be a number\nof milliseconds.\n\nYou should use this method whenever you need to run some action after a\nperiod of time instead of using `setTimeout()`. This method will ensure that\nitems that expire during the same script execution cycle all execute\ntogether, which is often more efficient than using a real setTimeout.\n\n```javascript\nrun.later(myContext, function() {\n  // code here will execute within a RunLoop in about 500ms with this == myContext\n}, 500);\n```",
            "itemtype": "method",
            "name": "later",
            "params": [
                {
                    "name": "target",
                    "description": "target of method to invoke",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "method",
                    "description": "The method to invoke.\n  If you pass a string it will be resolved on the\n  target at the time the method is invoked.",
                    "type": "Function|String"
                },
                {
                    "name": "args*",
                    "description": "Optional arguments to pass to the timeout.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "wait",
                    "description": "Number of milliseconds to wait.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Timer information for use in cancelling, see `run.cancel`.",
                "type": "*"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/run_loop.js",
            "line": 339,
            "description": "Schedule a function to run one time during the current RunLoop. This is equivalent\nto calling `scheduleOnce` with the \"actions\" queue.",
            "itemtype": "method",
            "name": "once",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the method to invoke.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "method",
                    "description": "The method to invoke.\n  If you pass a string it will be resolved on the\n  target at the time the method is invoked.",
                    "type": "Function|String"
                },
                {
                    "name": "args*",
                    "description": "Optional arguments to pass to the timeout.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Timer information for use in cancelling, see `run.cancel`.",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
